
Timer_controlBrightLed.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000035a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000003ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000090  00000000  00000000  000003ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000571  00000000  00000000  0000045e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000164  00000000  00000000  000009cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000471  00000000  00000000  00000b33  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  000000b0  00000000  00000000  00000fa4  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000014d  00000000  00000000  00001054  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000002b4  00000000  00000000  000011a1  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e5       	ldi	r30, 0x5A	; 90
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 5f 01 	call	0x2be	; 0x2be <main>
  8a:	0c 94 ab 01 	jmp	0x356	; 0x356 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <sendcmd>:
	senddata(b&0xF0);//First 4 bits
	senddata((b<<4)&0xF0);//Next 4
	_delay_ms(1);
}
void sendcmd(int c)
{
  92:	82 bb       	out	0x12, r24	; 18
	PORTD=c;
	PORTD+=4;
  94:	82 b3       	in	r24, 0x12	; 18
  96:	8c 5f       	subi	r24, 0xFC	; 252
  98:	82 bb       	out	0x12, r24	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9a:	8a ef       	ldi	r24, 0xFA	; 250
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <sendcmd+0xc>
	_delay_ms(1);
	PORTD-=4;
  a2:	82 b3       	in	r24, 0x12	; 18
  a4:	84 50       	subi	r24, 0x04	; 4
  a6:	82 bb       	out	0x12, r24	; 18
}
  a8:	08 95       	ret

000000aa <divcmd>:
	divcmd(0x28);//4 bit mode
	divcmd(0x06);//Increment Mode
	divcmd(0x0c);//Display on cursor off
}
void divcmd(int b)
{
  aa:	0f 93       	push	r16
  ac:	1f 93       	push	r17
  ae:	8c 01       	movw	r16, r24
	sendcmd(b&0xF0);//First 4 bits
  b0:	80 7f       	andi	r24, 0xF0	; 240
  b2:	90 70       	andi	r25, 0x00	; 0
  b4:	0e 94 49 00 	call	0x92	; 0x92 <sendcmd>
	sendcmd((b<<4)&0xF0);//Next 4
  b8:	84 e0       	ldi	r24, 0x04	; 4
  ba:	00 0f       	add	r16, r16
  bc:	11 1f       	adc	r17, r17
  be:	8a 95       	dec	r24
  c0:	e1 f7       	brne	.-8      	; 0xba <divcmd+0x10>
  c2:	c8 01       	movw	r24, r16
  c4:	90 70       	andi	r25, 0x00	; 0
  c6:	0e 94 49 00 	call	0x92	; 0x92 <sendcmd>
  ca:	8a ef       	ldi	r24, 0xFA	; 250
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <divcmd+0x24>
	_delay_ms(1);
}
  d2:	1f 91       	pop	r17
  d4:	0f 91       	pop	r16
  d6:	08 95       	ret

000000d8 <lcdstr>:
void lcdstr(void)
{
  d8:	82 e0       	ldi	r24, 0x02	; 2
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
	divcmd(0x02);//Home position Initialization with dividing function
	divcmd(0x28);//4 bit mode
  e0:	88 e2       	ldi	r24, 0x28	; 40
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
	divcmd(0x06);//Increment Mode
  e8:	86 e0       	ldi	r24, 0x06	; 6
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
	divcmd(0x0c);//Display on cursor off
  f0:	8c e0       	ldi	r24, 0x0C	; 12
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
}
  f8:	08 95       	ret

000000fa <senddata>:
	PORTD+=4;
	_delay_ms(1);
	PORTD-=4;
}
void senddata(int c)
{
  fa:	82 bb       	out	0x12, r24	; 18
	PORTD=c;
	PORTD+=5;
  fc:	82 b3       	in	r24, 0x12	; 18
  fe:	8b 5f       	subi	r24, 0xFB	; 251
 100:	82 bb       	out	0x12, r24	; 18
 102:	8a ef       	ldi	r24, 0xFA	; 250
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <senddata+0xc>
	_delay_ms(1);
	PORTD-=4;
 10a:	82 b3       	in	r24, 0x12	; 18
 10c:	84 50       	subi	r24, 0x04	; 4
 10e:	82 bb       	out	0x12, r24	; 18
}
 110:	08 95       	ret

00000112 <divdata>:
	sendcmd(b&0xF0);//First 4 bits
	sendcmd((b<<4)&0xF0);//Next 4
	_delay_ms(1);
}
void divdata(int b)
{
 112:	0f 93       	push	r16
 114:	1f 93       	push	r17
 116:	8c 01       	movw	r16, r24
	senddata(b&0xF0);//First 4 bits
 118:	80 7f       	andi	r24, 0xF0	; 240
 11a:	90 70       	andi	r25, 0x00	; 0
 11c:	0e 94 7d 00 	call	0xfa	; 0xfa <senddata>
	senddata((b<<4)&0xF0);//Next 4
 120:	94 e0       	ldi	r25, 0x04	; 4
 122:	00 0f       	add	r16, r16
 124:	11 1f       	adc	r17, r17
 126:	9a 95       	dec	r25
 128:	e1 f7       	brne	.-8      	; 0x122 <divdata+0x10>
 12a:	c8 01       	movw	r24, r16
 12c:	90 70       	andi	r25, 0x00	; 0
 12e:	0e 94 7d 00 	call	0xfa	; 0xfa <senddata>
 132:	8a ef       	ldi	r24, 0xFA	; 250
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <divdata+0x24>
	_delay_ms(1);
}
 13a:	1f 91       	pop	r17
 13c:	0f 91       	pop	r16
 13e:	08 95       	ret

00000140 <disp_string>:
	_delay_ms(1);
	PORTD-=4;
}

void disp_string(char *str, int pos)
{
 140:	0f 93       	push	r16
 142:	1f 93       	push	r17
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
 148:	18 2f       	mov	r17, r24
 14a:	09 2f       	mov	r16, r25
 14c:	cb 01       	movw	r24, r22
	int i=0;
	divcmd(pos);
 14e:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
 152:	21 2f       	mov	r18, r17
 154:	30 2f       	mov	r19, r16
 156:	c9 01       	movw	r24, r18
 158:	ec 01       	movw	r28, r24
 15a:	03 c0       	rjmp	.+6      	; 0x162 <disp_string+0x22>
	while(str[i]!='\0')
	{
		divdata(str[i]);
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	0e 94 89 00 	call	0x112	; 0x112 <divdata>

void disp_string(char *str, int pos)
{
	int i=0;
	divcmd(pos);
	while(str[i]!='\0')
 162:	89 91       	ld	r24, Y+
 164:	88 23       	and	r24, r24
 166:	d1 f7       	brne	.-12     	; 0x15c <disp_string+0x1c>
	{
		divdata(str[i]);
		i++;
	}

}
 168:	df 91       	pop	r29
 16a:	cf 91       	pop	r28
 16c:	1f 91       	pop	r17
 16e:	0f 91       	pop	r16
 170:	08 95       	ret

00000172 <disp_number>:

void disp_number(int x,int y)
{
 172:	ef 92       	push	r14
 174:	ff 92       	push	r15
 176:	0f 93       	push	r16
 178:	1f 93       	push	r17
	long int i;
	i=x;
 17a:	7c 01       	movw	r14, r24
 17c:	00 27       	eor	r16, r16
 17e:	f7 fc       	sbrc	r15, 7
 180:	00 95       	com	r16
 182:	10 2f       	mov	r17, r16
	divcmd(y);
 184:	cb 01       	movw	r24, r22
 186:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
	if(i<0)
 18a:	17 ff       	sbrs	r17, 7
 18c:	09 c0       	rjmp	.+18     	; 0x1a0 <disp_number+0x2e>
	{
           i=i*-1;
 18e:	10 95       	com	r17
 190:	00 95       	com	r16
 192:	f0 94       	com	r15
 194:	e0 94       	com	r14
 196:	e1 1c       	adc	r14, r1
 198:	f1 1c       	adc	r15, r1
 19a:	01 1d       	adc	r16, r1
 19c:	11 1d       	adc	r17, r1
 19e:	27 c0       	rjmp	.+78     	; 0x1ee <disp_number+0x7c>
           }
           
	if(i==0)
 1a0:	e1 14       	cp	r14, r1
 1a2:	f1 04       	cpc	r15, r1
 1a4:	01 05       	cpc	r16, r1
 1a6:	11 05       	cpc	r17, r1
 1a8:	11 f5       	brne	.+68     	; 0x1ee <disp_number+0x7c>
	{
		divdata(48);
 1aa:	80 e3       	ldi	r24, 0x30	; 48
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	0e 94 89 00 	call	0x112	; 0x112 <divdata>
 1b2:	1d c0       	rjmp	.+58     	; 0x1ee <disp_number+0x7c>
	}
	while(i>0)
	{
		divcmd(0x04);
 1b4:	84 e0       	ldi	r24, 0x04	; 4
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
		divdata((i%10)+48);
 1bc:	c8 01       	movw	r24, r16
 1be:	b7 01       	movw	r22, r14
 1c0:	2a e0       	ldi	r18, 0x0A	; 10
 1c2:	30 e0       	ldi	r19, 0x00	; 0
 1c4:	40 e0       	ldi	r20, 0x00	; 0
 1c6:	50 e0       	ldi	r21, 0x00	; 0
 1c8:	0e 94 6e 01 	call	0x2dc	; 0x2dc <__divmodsi4>
 1cc:	dc 01       	movw	r26, r24
 1ce:	cb 01       	movw	r24, r22
 1d0:	c0 96       	adiw	r24, 0x30	; 48
 1d2:	0e 94 89 00 	call	0x112	; 0x112 <divdata>
		i=i/10;
 1d6:	c8 01       	movw	r24, r16
 1d8:	b7 01       	movw	r22, r14
 1da:	2a e0       	ldi	r18, 0x0A	; 10
 1dc:	30 e0       	ldi	r19, 0x00	; 0
 1de:	40 e0       	ldi	r20, 0x00	; 0
 1e0:	50 e0       	ldi	r21, 0x00	; 0
 1e2:	0e 94 6e 01 	call	0x2dc	; 0x2dc <__divmodsi4>
 1e6:	c9 01       	movw	r24, r18
 1e8:	da 01       	movw	r26, r20
 1ea:	7c 01       	movw	r14, r24
 1ec:	8d 01       	movw	r16, r26
           
	if(i==0)
	{
		divdata(48);
	}
	while(i>0)
 1ee:	e1 14       	cp	r14, r1
 1f0:	f1 04       	cpc	r15, r1
 1f2:	01 05       	cpc	r16, r1
 1f4:	11 05       	cpc	r17, r1
 1f6:	f1 f6       	brne	.-68     	; 0x1b4 <disp_number+0x42>
	{
		divcmd(0x04);
		divdata((i%10)+48);
		i=i/10;
	}
}
 1f8:	1f 91       	pop	r17
 1fa:	0f 91       	pop	r16
 1fc:	ff 90       	pop	r15
 1fe:	ef 90       	pop	r14
 200:	08 95       	ret

00000202 <timer_0_init>:
#include<util/delay.h>
#include<string.h>
#include<mars/lcd.h>
void airtel(void);
void timer_0_init(void)
{
 202:	8a e1       	ldi	r24, 0x1A	; 26
 204:	83 bf       	out	0x33, r24	; 51
	TCCR0=0b00011010;
	DDRB=0x08;
 206:	88 e0       	ldi	r24, 0x08	; 8
 208:	87 bb       	out	0x17, r24	; 23
}
 20a:	08 95       	ret

0000020c <sari>:
	sari();
}
}

void sari(void)
{
 20c:	8b e3       	ldi	r24, 0x3B	; 59
 20e:	8c bf       	out	0x3c, r24	; 60
 210:	80 e7       	ldi	r24, 0x70	; 112
 212:	97 e1       	ldi	r25, 0x17	; 23
 214:	29 e1       	ldi	r18, 0x19	; 25
 216:	30 e0       	ldi	r19, 0x00	; 0
 218:	f9 01       	movw	r30, r18
 21a:	31 97       	sbiw	r30, 0x01	; 1
 21c:	f1 f7       	brne	.-4      	; 0x21a <sari+0xe>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 21e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 220:	d9 f7       	brne	.-10     	; 0x218 <sari+0xc>
OCR0=59;
_delay_ms(600);
OCR0=52;
 222:	84 e3       	ldi	r24, 0x34	; 52
 224:	8c bf       	out	0x3c, r24	; 60
 226:	80 e7       	ldi	r24, 0x70	; 112
 228:	97 e1       	ldi	r25, 0x17	; 23
 22a:	29 e1       	ldi	r18, 0x19	; 25
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	f9 01       	movw	r30, r18
 230:	31 97       	sbiw	r30, 0x01	; 1
 232:	f1 f7       	brne	.-4      	; 0x230 <sari+0x24>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 234:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 236:	d9 f7       	brne	.-10     	; 0x22e <sari+0x22>
_delay_ms(600);
OCR0=46;
 238:	8e e2       	ldi	r24, 0x2E	; 46
 23a:	8c bf       	out	0x3c, r24	; 60
 23c:	80 e7       	ldi	r24, 0x70	; 112
 23e:	97 e1       	ldi	r25, 0x17	; 23
 240:	29 e1       	ldi	r18, 0x19	; 25
 242:	30 e0       	ldi	r19, 0x00	; 0
 244:	f9 01       	movw	r30, r18
 246:	31 97       	sbiw	r30, 0x01	; 1
 248:	f1 f7       	brne	.-4      	; 0x246 <sari+0x3a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 24a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 24c:	d9 f7       	brne	.-10     	; 0x244 <sari+0x38>
_delay_ms(600);
OCR0=80;
 24e:	80 e5       	ldi	r24, 0x50	; 80
 250:	8c bf       	out	0x3c, r24	; 60
 252:	80 e1       	ldi	r24, 0x10	; 16
 254:	97 e2       	ldi	r25, 0x27	; 39
 256:	29 e1       	ldi	r18, 0x19	; 25
 258:	30 e0       	ldi	r19, 0x00	; 0
 25a:	f9 01       	movw	r30, r18
 25c:	31 97       	sbiw	r30, 0x01	; 1
 25e:	f1 f7       	brne	.-4      	; 0x25c <sari+0x50>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 260:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 262:	d9 f7       	brne	.-10     	; 0x25a <sari+0x4e>
_delay_ms(1000);
OCR0=38;
 264:	86 e2       	ldi	r24, 0x26	; 38
 266:	8c bf       	out	0x3c, r24	; 60
 268:	80 e7       	ldi	r24, 0x70	; 112
 26a:	97 e1       	ldi	r25, 0x17	; 23
 26c:	29 e1       	ldi	r18, 0x19	; 25
 26e:	30 e0       	ldi	r19, 0x00	; 0
 270:	f9 01       	movw	r30, r18
 272:	31 97       	sbiw	r30, 0x01	; 1
 274:	f1 f7       	brne	.-4      	; 0x272 <sari+0x66>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 276:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 278:	d9 f7       	brne	.-10     	; 0x270 <sari+0x64>
_delay_ms(600);
OCR0=34;
 27a:	82 e2       	ldi	r24, 0x22	; 34
 27c:	8c bf       	out	0x3c, r24	; 60
 27e:	80 e7       	ldi	r24, 0x70	; 112
 280:	97 e1       	ldi	r25, 0x17	; 23
 282:	29 e1       	ldi	r18, 0x19	; 25
 284:	30 e0       	ldi	r19, 0x00	; 0
 286:	f9 01       	movw	r30, r18
 288:	31 97       	sbiw	r30, 0x01	; 1
 28a:	f1 f7       	brne	.-4      	; 0x288 <sari+0x7c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 28c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 28e:	d9 f7       	brne	.-10     	; 0x286 <sari+0x7a>
_delay_ms(600);
OCR0=30;
 290:	8e e1       	ldi	r24, 0x1E	; 30
 292:	8c bf       	out	0x3c, r24	; 60
 294:	80 e7       	ldi	r24, 0x70	; 112
 296:	97 e1       	ldi	r25, 0x17	; 23
 298:	29 e1       	ldi	r18, 0x19	; 25
 29a:	30 e0       	ldi	r19, 0x00	; 0
 29c:	f9 01       	movw	r30, r18
 29e:	31 97       	sbiw	r30, 0x01	; 1
 2a0:	f1 f7       	brne	.-4      	; 0x29e <sari+0x92>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2a2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2a4:	d9 f7       	brne	.-10     	; 0x29c <sari+0x90>
_delay_ms(600);
OCR0=84;
 2a6:	84 e5       	ldi	r24, 0x54	; 84
 2a8:	8c bf       	out	0x3c, r24	; 60
 2aa:	80 e1       	ldi	r24, 0x10	; 16
 2ac:	97 e2       	ldi	r25, 0x27	; 39
 2ae:	29 e1       	ldi	r18, 0x19	; 25
 2b0:	30 e0       	ldi	r19, 0x00	; 0
 2b2:	f9 01       	movw	r30, r18
 2b4:	31 97       	sbiw	r30, 0x01	; 1
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <sari+0xa8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2b8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2ba:	d9 f7       	brne	.-10     	; 0x2b2 <sari+0xa6>
_delay_ms(1000);
}
 2bc:	08 95       	ret

000002be <main>:
{
	TCCR0=0b00011010;
	DDRB=0x08;
}
main()
{
 2be:	8f ef       	ldi	r24, 0xFF	; 255
 2c0:	81 bb       	out	0x11, r24	; 17
	DDRD=0xFF;
	lcdstr();
 2c2:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcdstr>
	divcmd(0x01);
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
#include<string.h>
#include<mars/lcd.h>
void airtel(void);
void timer_0_init(void)
{
	TCCR0=0b00011010;
 2ce:	8a e1       	ldi	r24, 0x1A	; 26
 2d0:	83 bf       	out	0x33, r24	; 51
	DDRB=0x08;
 2d2:	88 e0       	ldi	r24, 0x08	; 8
 2d4:	87 bb       	out	0x17, r24	; 23
	lcdstr();
	divcmd(0x01);
	timer_0_init();
while(1)
{
	sari();
 2d6:	0e 94 06 01 	call	0x20c	; 0x20c <sari>
 2da:	fd cf       	rjmp	.-6      	; 0x2d6 <main+0x18>

000002dc <__divmodsi4>:
 2dc:	97 fb       	bst	r25, 7
 2de:	09 2e       	mov	r0, r25
 2e0:	05 26       	eor	r0, r21
 2e2:	0e d0       	rcall	.+28     	; 0x300 <__divmodsi4_neg1>
 2e4:	57 fd       	sbrc	r21, 7
 2e6:	04 d0       	rcall	.+8      	; 0x2f0 <__divmodsi4_neg2>
 2e8:	14 d0       	rcall	.+40     	; 0x312 <__udivmodsi4>
 2ea:	0a d0       	rcall	.+20     	; 0x300 <__divmodsi4_neg1>
 2ec:	00 1c       	adc	r0, r0
 2ee:	38 f4       	brcc	.+14     	; 0x2fe <__divmodsi4_exit>

000002f0 <__divmodsi4_neg2>:
 2f0:	50 95       	com	r21
 2f2:	40 95       	com	r20
 2f4:	30 95       	com	r19
 2f6:	21 95       	neg	r18
 2f8:	3f 4f       	sbci	r19, 0xFF	; 255
 2fa:	4f 4f       	sbci	r20, 0xFF	; 255
 2fc:	5f 4f       	sbci	r21, 0xFF	; 255

000002fe <__divmodsi4_exit>:
 2fe:	08 95       	ret

00000300 <__divmodsi4_neg1>:
 300:	f6 f7       	brtc	.-4      	; 0x2fe <__divmodsi4_exit>
 302:	90 95       	com	r25
 304:	80 95       	com	r24
 306:	70 95       	com	r23
 308:	61 95       	neg	r22
 30a:	7f 4f       	sbci	r23, 0xFF	; 255
 30c:	8f 4f       	sbci	r24, 0xFF	; 255
 30e:	9f 4f       	sbci	r25, 0xFF	; 255
 310:	08 95       	ret

00000312 <__udivmodsi4>:
 312:	a1 e2       	ldi	r26, 0x21	; 33
 314:	1a 2e       	mov	r1, r26
 316:	aa 1b       	sub	r26, r26
 318:	bb 1b       	sub	r27, r27
 31a:	fd 01       	movw	r30, r26
 31c:	0d c0       	rjmp	.+26     	; 0x338 <__udivmodsi4_ep>

0000031e <__udivmodsi4_loop>:
 31e:	aa 1f       	adc	r26, r26
 320:	bb 1f       	adc	r27, r27
 322:	ee 1f       	adc	r30, r30
 324:	ff 1f       	adc	r31, r31
 326:	a2 17       	cp	r26, r18
 328:	b3 07       	cpc	r27, r19
 32a:	e4 07       	cpc	r30, r20
 32c:	f5 07       	cpc	r31, r21
 32e:	20 f0       	brcs	.+8      	; 0x338 <__udivmodsi4_ep>
 330:	a2 1b       	sub	r26, r18
 332:	b3 0b       	sbc	r27, r19
 334:	e4 0b       	sbc	r30, r20
 336:	f5 0b       	sbc	r31, r21

00000338 <__udivmodsi4_ep>:
 338:	66 1f       	adc	r22, r22
 33a:	77 1f       	adc	r23, r23
 33c:	88 1f       	adc	r24, r24
 33e:	99 1f       	adc	r25, r25
 340:	1a 94       	dec	r1
 342:	69 f7       	brne	.-38     	; 0x31e <__udivmodsi4_loop>
 344:	60 95       	com	r22
 346:	70 95       	com	r23
 348:	80 95       	com	r24
 34a:	90 95       	com	r25
 34c:	9b 01       	movw	r18, r22
 34e:	ac 01       	movw	r20, r24
 350:	bd 01       	movw	r22, r26
 352:	cf 01       	movw	r24, r30
 354:	08 95       	ret

00000356 <_exit>:
 356:	f8 94       	cli

00000358 <__stop_program>:
 358:	ff cf       	rjmp	.-2      	; 0x358 <__stop_program>
