
MOSOLCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000027a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000002ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000065  00000000  00000000  000002ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000425  00000000  00000000  00000353  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000150  00000000  00000000  00000778  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000035f  00000000  00000000  000008c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000080  00000000  00000000  00000c28  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000121  00000000  00000000  00000ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000140  00000000  00000000  00000dc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000060  00000000  00000000  00000f09  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e7       	ldi	r30, 0x7A	; 122
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <main>
  8a:	0c 94 3b 01 	jmp	0x276	; 0x276 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <divcmd4>:
	divcmd4(0x28);//4 bit mode
	divcmd4(0x06);//Decrement Mode
	divcmd4(0x0c);//Display on cursor off
}
void divcmd4(int b)
{
  92:	9c 01       	movw	r18, r24
  94:	20 7f       	andi	r18, 0xF0	; 240
  96:	30 70       	andi	r19, 0x00	; 0
  98:	22 bb       	out	0x12, r18	; 18
	_delay_ms(1);
}
void sendcmd(int c)
{
	PORTD=c;
	PORTD+=4;
  9a:	22 b3       	in	r18, 0x12	; 18
  9c:	2c 5f       	subi	r18, 0xFC	; 252
  9e:	22 bb       	out	0x12, r18	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  a0:	4a ef       	ldi	r20, 0xFA	; 250
  a2:	50 e0       	ldi	r21, 0x00	; 0
  a4:	fa 01       	movw	r30, r20
  a6:	31 97       	sbiw	r30, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <divcmd4+0x14>
	_delay_ms(1);
	PORTD-=4;
  aa:	22 b3       	in	r18, 0x12	; 18
  ac:	24 50       	subi	r18, 0x04	; 4
  ae:	22 bb       	out	0x12, r18	; 18
	senddata((b<<4)&0xF0);//Next 4
	_delay_ms(1);
}
void sendcmd(int c)
{
	PORTD=c;
  b0:	24 e0       	ldi	r18, 0x04	; 4
  b2:	88 0f       	add	r24, r24
  b4:	99 1f       	adc	r25, r25
  b6:	2a 95       	dec	r18
  b8:	e1 f7       	brne	.-8      	; 0xb2 <divcmd4+0x20>
  ba:	90 70       	andi	r25, 0x00	; 0
  bc:	82 bb       	out	0x12, r24	; 18
	PORTD+=4;
  be:	82 b3       	in	r24, 0x12	; 18
  c0:	8c 5f       	subi	r24, 0xFC	; 252
  c2:	82 bb       	out	0x12, r24	; 18
  c4:	ca 01       	movw	r24, r20
  c6:	01 97       	sbiw	r24, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <divcmd4+0x34>
	_delay_ms(1);
	PORTD-=4;
  ca:	82 b3       	in	r24, 0x12	; 18
  cc:	84 50       	subi	r24, 0x04	; 4
  ce:	82 bb       	out	0x12, r24	; 18
  d0:	ca 01       	movw	r24, r20
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <divcmd4+0x40>
void divcmd4(int b)
{
	sendcmd(b&0xF0);//First 4 bits
	sendcmd((b<<4)&0xF0);//Next 4
	_delay_ms(1);
}
  d6:	08 95       	ret

000000d8 <lcdstr>:
void sendcmd(int);
void senddata(int);
void divdata4(int);
void mystring(int);
void lcdstr(void)
{
  d8:	82 e0       	ldi	r24, 0x02	; 2
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 49 00 	call	0x92	; 0x92 <divcmd4>
	divcmd4(0x02);//Home position Initialization with dividing function
	divcmd4(0x28);//4 bit mode
  e0:	88 e2       	ldi	r24, 0x28	; 40
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 49 00 	call	0x92	; 0x92 <divcmd4>
	divcmd4(0x06);//Decrement Mode
  e8:	86 e0       	ldi	r24, 0x06	; 6
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 49 00 	call	0x92	; 0x92 <divcmd4>
	divcmd4(0x0c);//Display on cursor off
  f0:	8c e0       	ldi	r24, 0x0C	; 12
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0e 94 49 00 	call	0x92	; 0x92 <divcmd4>
}
  f8:	08 95       	ret

000000fa <divdata4>:
	sendcmd(b&0xF0);//First 4 bits
	sendcmd((b<<4)&0xF0);//Next 4
	_delay_ms(1);
}
void divdata4(int b)
{
  fa:	9c 01       	movw	r18, r24
  fc:	20 7f       	andi	r18, 0xF0	; 240
  fe:	30 70       	andi	r19, 0x00	; 0
 100:	22 bb       	out	0x12, r18	; 18
	PORTD-=4;
}
void senddata(int c)
{
	PORTD=c;
	PORTD+=5;
 102:	22 b3       	in	r18, 0x12	; 18
 104:	2b 5f       	subi	r18, 0xFB	; 251
 106:	22 bb       	out	0x12, r18	; 18
 108:	4a ef       	ldi	r20, 0xFA	; 250
 10a:	50 e0       	ldi	r21, 0x00	; 0
 10c:	fa 01       	movw	r30, r20
 10e:	31 97       	sbiw	r30, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <divdata4+0x14>
	_delay_ms(1);
	PORTD-=4;
 112:	22 b3       	in	r18, 0x12	; 18
 114:	24 50       	subi	r18, 0x04	; 4
 116:	22 bb       	out	0x12, r18	; 18
	_delay_ms(1);
	PORTD-=4;
}
void senddata(int c)
{
	PORTD=c;
 118:	34 e0       	ldi	r19, 0x04	; 4
 11a:	88 0f       	add	r24, r24
 11c:	99 1f       	adc	r25, r25
 11e:	3a 95       	dec	r19
 120:	e1 f7       	brne	.-8      	; 0x11a <divdata4+0x20>
 122:	90 70       	andi	r25, 0x00	; 0
 124:	82 bb       	out	0x12, r24	; 18
	PORTD+=5;
 126:	82 b3       	in	r24, 0x12	; 18
 128:	8b 5f       	subi	r24, 0xFB	; 251
 12a:	82 bb       	out	0x12, r24	; 18
 12c:	ca 01       	movw	r24, r20
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <divdata4+0x34>
	_delay_ms(1);
	PORTD-=4;
 132:	82 b3       	in	r24, 0x12	; 18
 134:	84 50       	subi	r24, 0x04	; 4
 136:	82 bb       	out	0x12, r24	; 18
 138:	ca 01       	movw	r24, r20
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <divdata4+0x40>
void divdata4(int b)
{
	senddata(b&0xF0);//First 4 bits
	senddata((b<<4)&0xF0);//Next 4
	_delay_ms(1);
}
 13e:	08 95       	ret

00000140 <sendcmd>:
void sendcmd(int c)
{
 140:	82 bb       	out	0x12, r24	; 18
	PORTD=c;
	PORTD+=4;
 142:	82 b3       	in	r24, 0x12	; 18
 144:	8c 5f       	subi	r24, 0xFC	; 252
 146:	82 bb       	out	0x12, r24	; 18
 148:	8a ef       	ldi	r24, 0xFA	; 250
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <sendcmd+0xc>
	_delay_ms(1);
	PORTD-=4;
 150:	82 b3       	in	r24, 0x12	; 18
 152:	84 50       	subi	r24, 0x04	; 4
 154:	82 bb       	out	0x12, r24	; 18
}
 156:	08 95       	ret

00000158 <senddata>:
void senddata(int c)
{
 158:	82 bb       	out	0x12, r24	; 18
	PORTD=c;
	PORTD+=5;
 15a:	82 b3       	in	r24, 0x12	; 18
 15c:	8b 5f       	subi	r24, 0xFB	; 251
 15e:	82 bb       	out	0x12, r24	; 18
 160:	8a ef       	ldi	r24, 0xFA	; 250
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	01 97       	sbiw	r24, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <senddata+0xc>
	_delay_ms(1);
	PORTD-=4;
 168:	82 b3       	in	r24, 0x12	; 18
 16a:	84 50       	subi	r24, 0x04	; 4
 16c:	82 bb       	out	0x12, r24	; 18
}
 16e:	08 95       	ret

00000170 <mystring>:
k++;
}
}

void mystring(int k)
{
 170:	cf 93       	push	r28
 172:	df 93       	push	r29
 174:	ec 01       	movw	r28, r24
	divcmd4(0x40);
 176:	80 e4       	ldi	r24, 0x40	; 64
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	0e 94 49 00 	call	0x92	; 0x92 <divcmd4>
	divdata4(0x04); 
 17e:	84 e0       	ldi	r24, 0x04	; 4
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	0e 94 7d 00 	call	0xfa	; 0xfa <divdata4>
	divdata4(0x0E); 
 186:	8e e0       	ldi	r24, 0x0E	; 14
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	0e 94 7d 00 	call	0xfa	; 0xfa <divdata4>
	divdata4(0x0E); 
 18e:	8e e0       	ldi	r24, 0x0E	; 14
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	0e 94 7d 00 	call	0xfa	; 0xfa <divdata4>
	divdata4(0x1F); 
 196:	8f e1       	ldi	r24, 0x1F	; 31
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	0e 94 7d 00 	call	0xfa	; 0xfa <divdata4>
	divdata4(0x04);
 19e:	84 e0       	ldi	r24, 0x04	; 4
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	0e 94 7d 00 	call	0xfa	; 0xfa <divdata4>
	if(k==1||k==3)
 1a6:	c1 30       	cpi	r28, 0x01	; 1
 1a8:	d1 05       	cpc	r29, r1
 1aa:	19 f0       	breq	.+6      	; 0x1b2 <mystring+0x42>
 1ac:	c3 30       	cpi	r28, 0x03	; 3
 1ae:	d1 05       	cpc	r29, r1
 1b0:	39 f4       	brne	.+14     	; 0x1c0 <mystring+0x50>
	{ 
		divdata4(0x04); 
 1b2:	84 e0       	ldi	r24, 0x04	; 4
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	0e 94 7d 00 	call	0xfa	; 0xfa <divdata4>
		divdata4(0x04);
 1ba:	84 e0       	ldi	r24, 0x04	; 4
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	12 c0       	rjmp	.+36     	; 0x1e4 <mystring+0x74>
	}
	else if(k==2)
 1c0:	c2 30       	cpi	r28, 0x02	; 2
 1c2:	d1 05       	cpc	r29, r1
 1c4:	39 f4       	brne	.+14     	; 0x1d4 <mystring+0x64>
	{
		 divdata4(0x08);
 1c6:	88 e0       	ldi	r24, 0x08	; 8
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	0e 94 7d 00 	call	0xfa	; 0xfa <divdata4>
		 divdata4(0x10);
 1ce:	80 e1       	ldi	r24, 0x10	; 16
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	08 c0       	rjmp	.+16     	; 0x1e4 <mystring+0x74>
	}
	else if(k==4)
 1d4:	24 97       	sbiw	r28, 0x04	; 4
 1d6:	41 f4       	brne	.+16     	; 0x1e8 <mystring+0x78>
	{
		divdata4(0x02);
 1d8:	82 e0       	ldi	r24, 0x02	; 2
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	0e 94 7d 00 	call	0xfa	; 0xfa <divdata4>
		divdata4(0x01);
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	0e 94 7d 00 	call	0xfa	; 0xfa <divdata4>
	}
	divdata4(0x00);
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	0e 94 7d 00 	call	0xfa	; 0xfa <divdata4>
}
 1f0:	df 91       	pop	r29
 1f2:	cf 91       	pop	r28
 1f4:	08 95       	ret

000001f6 <main>:
	PORTD+=5;
	_delay_ms(1);
	PORTD-=4;
}
main()
{
 1f6:	ef 92       	push	r14
 1f8:	ff 92       	push	r15
 1fa:	0f 93       	push	r16
 1fc:	1f 93       	push	r17
 1fe:	cf 93       	push	r28
 200:	df 93       	push	r29
DDRD=0xFF;
 202:	8f ef       	ldi	r24, 0xFF	; 255
 204:	81 bb       	out	0x11, r24	; 17
lcdstr();
 206:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcdstr>
divcmd4(0x01);
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	0e 94 49 00 	call	0x92	; 0x92 <divcmd4>
 212:	c1 e0       	ldi	r28, 0x01	; 1
 214:	d0 e0       	ldi	r29, 0x00	; 0
 216:	48 ea       	ldi	r20, 0xA8	; 168
 218:	e4 2e       	mov	r14, r20
 21a:	41 e6       	ldi	r20, 0x61	; 97
 21c:	f4 2e       	mov	r15, r20
int k=1;
while(1)
{
if(k==1||k==3) mystring(k);
 21e:	c1 30       	cpi	r28, 0x01	; 1
 220:	d1 05       	cpc	r29, r1
 222:	19 f0       	breq	.+6      	; 0x22a <main+0x34>
 224:	c3 30       	cpi	r28, 0x03	; 3
 226:	d1 05       	cpc	r29, r1
 228:	11 f4       	brne	.+4      	; 0x22e <main+0x38>
 22a:	ce 01       	movw	r24, r28
 22c:	0e c0       	rjmp	.+28     	; 0x24a <main+0x54>
else if (k==2) mystring(k);
 22e:	c2 30       	cpi	r28, 0x02	; 2
 230:	d1 05       	cpc	r29, r1
 232:	19 f4       	brne	.+6      	; 0x23a <main+0x44>
 234:	82 e0       	ldi	r24, 0x02	; 2
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	08 c0       	rjmp	.+16     	; 0x24a <main+0x54>
else if(k==4) mystring(k);
 23a:	c4 30       	cpi	r28, 0x04	; 4
 23c:	d1 05       	cpc	r29, r1
 23e:	19 f0       	breq	.+6      	; 0x246 <main+0x50>
 240:	c1 e0       	ldi	r28, 0x01	; 1
 242:	d0 e0       	ldi	r29, 0x00	; 0
 244:	04 c0       	rjmp	.+8      	; 0x24e <main+0x58>
 246:	84 e0       	ldi	r24, 0x04	; 4
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	0e 94 b8 00 	call	0x170	; 0x170 <mystring>
 24e:	00 e0       	ldi	r16, 0x00	; 0
 250:	10 e0       	ldi	r17, 0x00	; 0
else k=1;
for(int i=0;i<10;i++)
{
divcmd4(0x84);
 252:	84 e8       	ldi	r24, 0x84	; 132
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	0e 94 49 00 	call	0x92	; 0x92 <divcmd4>
divdata4(0);
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	0e 94 7d 00 	call	0xfa	; 0xfa <divdata4>
 262:	c7 01       	movw	r24, r14
 264:	01 97       	sbiw	r24, 0x01	; 1
 266:	f1 f7       	brne	.-4      	; 0x264 <main+0x6e>
{
if(k==1||k==3) mystring(k);
else if (k==2) mystring(k);
else if(k==4) mystring(k);
else k=1;
for(int i=0;i<10;i++)
 268:	0f 5f       	subi	r16, 0xFF	; 255
 26a:	1f 4f       	sbci	r17, 0xFF	; 255
 26c:	0a 30       	cpi	r16, 0x0A	; 10
 26e:	11 05       	cpc	r17, r1
 270:	81 f7       	brne	.-32     	; 0x252 <main+0x5c>
{
divcmd4(0x84);
divdata4(0);
_delay_ms(100);
}
k++;
 272:	21 96       	adiw	r28, 0x01	; 1
 274:	d4 cf       	rjmp	.-88     	; 0x21e <main+0x28>

00000276 <_exit>:
 276:	f8 94       	cli

00000278 <__stop_program>:
 278:	ff cf       	rjmp	.-2      	; 0x278 <__stop_program>
