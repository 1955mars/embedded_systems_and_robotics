
Sinewave_on_LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002f4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000007c  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000043c  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000014e  00000000  00000000  00000820  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000424  00000000  00000000  0000096e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  000000b0  00000000  00000000  00000d94  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000126  00000000  00000000  00000e44  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000e8  00000000  00000000  00000f6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00001052  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ef       	ldi	r30, 0xF4	; 244
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 3c 01 	call	0x278	; 0x278 <main>
  8a:	0c 94 78 01 	jmp	0x2f0	; 0x2f0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <divcmd4>:
	divcmd4(0x28);//4 bit mode
	divcmd4(0x06);//Decrement Mode
	divcmd4(0x0c);//Display on cursor off
}
void divcmd4(int b)
{
  92:	9c 01       	movw	r18, r24
  94:	20 7f       	andi	r18, 0xF0	; 240
  96:	30 70       	andi	r19, 0x00	; 0
  98:	22 bb       	out	0x12, r18	; 18
	_delay_ms(1);
}
void sendcmd(int c)
{
	PORTD=c;
	PORTD+=4;
  9a:	22 b3       	in	r18, 0x12	; 18
  9c:	2c 5f       	subi	r18, 0xFC	; 252
  9e:	22 bb       	out	0x12, r18	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  a0:	4a ef       	ldi	r20, 0xFA	; 250
  a2:	50 e0       	ldi	r21, 0x00	; 0
  a4:	fa 01       	movw	r30, r20
  a6:	31 97       	sbiw	r30, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <divcmd4+0x14>
	_delay_ms(1);
	PORTD-=4;
  aa:	22 b3       	in	r18, 0x12	; 18
  ac:	24 50       	subi	r18, 0x04	; 4
  ae:	22 bb       	out	0x12, r18	; 18
	senddata((b<<4)&0xF0);//Next 4
	_delay_ms(1);
}
void sendcmd(int c)
{
	PORTD=c;
  b0:	24 e0       	ldi	r18, 0x04	; 4
  b2:	88 0f       	add	r24, r24
  b4:	99 1f       	adc	r25, r25
  b6:	2a 95       	dec	r18
  b8:	e1 f7       	brne	.-8      	; 0xb2 <divcmd4+0x20>
  ba:	90 70       	andi	r25, 0x00	; 0
  bc:	82 bb       	out	0x12, r24	; 18
	PORTD+=4;
  be:	82 b3       	in	r24, 0x12	; 18
  c0:	8c 5f       	subi	r24, 0xFC	; 252
  c2:	82 bb       	out	0x12, r24	; 18
  c4:	ca 01       	movw	r24, r20
  c6:	01 97       	sbiw	r24, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <divcmd4+0x34>
	_delay_ms(1);
	PORTD-=4;
  ca:	82 b3       	in	r24, 0x12	; 18
  cc:	84 50       	subi	r24, 0x04	; 4
  ce:	82 bb       	out	0x12, r24	; 18
  d0:	ca 01       	movw	r24, r20
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <divcmd4+0x40>
void divcmd4(int b)
{
	sendcmd(b&0xF0);//First 4 bits
	sendcmd((b<<4)&0xF0);//Next 4
	_delay_ms(1);
}
  d6:	08 95       	ret

000000d8 <lcdstr>:
	divdata4(2);
	divdata4(4);
	divdata4(0x18);
}
void lcdstr(void)
{
  d8:	82 e0       	ldi	r24, 0x02	; 2
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 49 00 	call	0x92	; 0x92 <divcmd4>
	divcmd4(0x02);//Home position Initialization with dividing function
	divcmd4(0x28);//4 bit mode
  e0:	88 e2       	ldi	r24, 0x28	; 40
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 49 00 	call	0x92	; 0x92 <divcmd4>
	divcmd4(0x06);//Decrement Mode
  e8:	86 e0       	ldi	r24, 0x06	; 6
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 49 00 	call	0x92	; 0x92 <divcmd4>
	divcmd4(0x0c);//Display on cursor off
  f0:	8c e0       	ldi	r24, 0x0C	; 12
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0e 94 49 00 	call	0x92	; 0x92 <divcmd4>
}
  f8:	08 95       	ret

000000fa <divdata4>:
	sendcmd(b&0xF0);//First 4 bits
	sendcmd((b<<4)&0xF0);//Next 4
	_delay_ms(1);
}
void divdata4(int b)
{
  fa:	9c 01       	movw	r18, r24
  fc:	20 7f       	andi	r18, 0xF0	; 240
  fe:	30 70       	andi	r19, 0x00	; 0
 100:	22 bb       	out	0x12, r18	; 18
	PORTD-=4;
}
void senddata(int c)
{
	PORTD=c;
	PORTD+=5;
 102:	22 b3       	in	r18, 0x12	; 18
 104:	2b 5f       	subi	r18, 0xFB	; 251
 106:	22 bb       	out	0x12, r18	; 18
 108:	4a ef       	ldi	r20, 0xFA	; 250
 10a:	50 e0       	ldi	r21, 0x00	; 0
 10c:	fa 01       	movw	r30, r20
 10e:	31 97       	sbiw	r30, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <divdata4+0x14>
	_delay_ms(1);
	PORTD-=4;
 112:	22 b3       	in	r18, 0x12	; 18
 114:	24 50       	subi	r18, 0x04	; 4
 116:	22 bb       	out	0x12, r18	; 18
	_delay_ms(1);
	PORTD-=4;
}
void senddata(int c)
{
	PORTD=c;
 118:	34 e0       	ldi	r19, 0x04	; 4
 11a:	88 0f       	add	r24, r24
 11c:	99 1f       	adc	r25, r25
 11e:	3a 95       	dec	r19
 120:	e1 f7       	brne	.-8      	; 0x11a <divdata4+0x20>
 122:	90 70       	andi	r25, 0x00	; 0
 124:	82 bb       	out	0x12, r24	; 18
	PORTD+=5;
 126:	82 b3       	in	r24, 0x12	; 18
 128:	8b 5f       	subi	r24, 0xFB	; 251
 12a:	82 bb       	out	0x12, r24	; 18
 12c:	ca 01       	movw	r24, r20
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <divdata4+0x34>
	_delay_ms(1);
	PORTD-=4;
 132:	82 b3       	in	r24, 0x12	; 18
 134:	84 50       	subi	r24, 0x04	; 4
 136:	82 bb       	out	0x12, r24	; 18
 138:	ca 01       	movw	r24, r20
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <divdata4+0x40>
void divdata4(int b)
{
	senddata(b&0xF0);//First 4 bits
	senddata((b<<4)&0xF0);//Next 4
	_delay_ms(1);
}
 13e:	08 95       	ret

00000140 <sin4>:
	divdata4(8);
	divdata4(4);
	divdata4(3);
}
void sin4(void)
{
 140:	88 e5       	ldi	r24, 0x58	; 88
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	0e 94 49 00 	call	0x92	; 0x92 <divcmd4>
	divcmd4(0x58);
	divdata4(1);
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	0e 94 7d 00 	call	0xfa	; 0xfa <divdata4>
	divdata4(1);
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0e 94 7d 00 	call	0xfa	; 0xfa <divdata4>
	divdata4(1);
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	0e 94 7d 00 	call	0xfa	; 0xfa <divdata4>
	divdata4(1);
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	0e 94 7d 00 	call	0xfa	; 0xfa <divdata4>
	divdata4(2);
 168:	82 e0       	ldi	r24, 0x02	; 2
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	0e 94 7d 00 	call	0xfa	; 0xfa <divdata4>
	divdata4(4);
 170:	84 e0       	ldi	r24, 0x04	; 4
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	0e 94 7d 00 	call	0xfa	; 0xfa <divdata4>
	divdata4(0x18);
 178:	88 e1       	ldi	r24, 0x18	; 24
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	0e 94 7d 00 	call	0xfa	; 0xfa <divdata4>
}
 180:	08 95       	ret

00000182 <sin3>:
	divdata4(1);
	divdata4(1);
	divdata4(1);
}
void sin3(void)
{
 182:	80 e5       	ldi	r24, 0x50	; 80
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	0e 94 49 00 	call	0x92	; 0x92 <divcmd4>
	divcmd4(0x50);
	divdata4(16);
 18a:	80 e1       	ldi	r24, 0x10	; 16
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	0e 94 7d 00 	call	0xfa	; 0xfa <divdata4>
	divdata4(16);
 192:	80 e1       	ldi	r24, 0x10	; 16
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	0e 94 7d 00 	call	0xfa	; 0xfa <divdata4>
	divdata4(16);
 19a:	80 e1       	ldi	r24, 0x10	; 16
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	0e 94 7d 00 	call	0xfa	; 0xfa <divdata4>
	divdata4(16);
 1a2:	80 e1       	ldi	r24, 0x10	; 16
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	0e 94 7d 00 	call	0xfa	; 0xfa <divdata4>
	divdata4(8);
 1aa:	88 e0       	ldi	r24, 0x08	; 8
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	0e 94 7d 00 	call	0xfa	; 0xfa <divdata4>
	divdata4(4);
 1b2:	84 e0       	ldi	r24, 0x04	; 4
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	0e 94 7d 00 	call	0xfa	; 0xfa <divdata4>
	divdata4(3);
 1ba:	83 e0       	ldi	r24, 0x03	; 3
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	0e 94 7d 00 	call	0xfa	; 0xfa <divdata4>
}
 1c2:	08 95       	ret

000001c4 <sin2>:
	divdata4(16);
	divdata4(16);
	divdata4(16);
}
void sin2(void)
{
 1c4:	88 e4       	ldi	r24, 0x48	; 72
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	0e 94 49 00 	call	0x92	; 0x92 <divcmd4>
	divcmd4(0x48);
	divdata4(0x18);
 1cc:	88 e1       	ldi	r24, 0x18	; 24
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	0e 94 7d 00 	call	0xfa	; 0xfa <divdata4>
	divdata4(4);
 1d4:	84 e0       	ldi	r24, 0x04	; 4
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	0e 94 7d 00 	call	0xfa	; 0xfa <divdata4>
	divdata4(2);
 1dc:	82 e0       	ldi	r24, 0x02	; 2
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	0e 94 7d 00 	call	0xfa	; 0xfa <divdata4>
	divdata4(1);
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	0e 94 7d 00 	call	0xfa	; 0xfa <divdata4>
	divdata4(1);
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	0e 94 7d 00 	call	0xfa	; 0xfa <divdata4>
	divdata4(1);
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	0e 94 7d 00 	call	0xfa	; 0xfa <divdata4>
	divdata4(1);
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	0e 94 7d 00 	call	0xfa	; 0xfa <divdata4>
}
 204:	08 95       	ret

00000206 <sin1>:
void divcmd4(int);
void sendcmd(int);
void senddata(int);
void divdata4(int);
void sin1(void)
{
 206:	80 e4       	ldi	r24, 0x40	; 64
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	0e 94 49 00 	call	0x92	; 0x92 <divcmd4>
	divcmd4(0x40);
	divdata4(3);
 20e:	83 e0       	ldi	r24, 0x03	; 3
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	0e 94 7d 00 	call	0xfa	; 0xfa <divdata4>
	divdata4(4);
 216:	84 e0       	ldi	r24, 0x04	; 4
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	0e 94 7d 00 	call	0xfa	; 0xfa <divdata4>
	divdata4(8);
 21e:	88 e0       	ldi	r24, 0x08	; 8
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	0e 94 7d 00 	call	0xfa	; 0xfa <divdata4>
	divdata4(16);
 226:	80 e1       	ldi	r24, 0x10	; 16
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	0e 94 7d 00 	call	0xfa	; 0xfa <divdata4>
	divdata4(16);
 22e:	80 e1       	ldi	r24, 0x10	; 16
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	0e 94 7d 00 	call	0xfa	; 0xfa <divdata4>
	divdata4(16);
 236:	80 e1       	ldi	r24, 0x10	; 16
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	0e 94 7d 00 	call	0xfa	; 0xfa <divdata4>
	divdata4(16);
 23e:	80 e1       	ldi	r24, 0x10	; 16
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	0e 94 7d 00 	call	0xfa	; 0xfa <divdata4>
}
 246:	08 95       	ret

00000248 <sendcmd>:
	senddata(b&0xF0);//First 4 bits
	senddata((b<<4)&0xF0);//Next 4
	_delay_ms(1);
}
void sendcmd(int c)
{
 248:	82 bb       	out	0x12, r24	; 18
	PORTD=c;
	PORTD+=4;
 24a:	82 b3       	in	r24, 0x12	; 18
 24c:	8c 5f       	subi	r24, 0xFC	; 252
 24e:	82 bb       	out	0x12, r24	; 18
 250:	8a ef       	ldi	r24, 0xFA	; 250
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	01 97       	sbiw	r24, 0x01	; 1
 256:	f1 f7       	brne	.-4      	; 0x254 <sendcmd+0xc>
	_delay_ms(1);
	PORTD-=4;
 258:	82 b3       	in	r24, 0x12	; 18
 25a:	84 50       	subi	r24, 0x04	; 4
 25c:	82 bb       	out	0x12, r24	; 18
}
 25e:	08 95       	ret

00000260 <senddata>:
void senddata(int c)
{
 260:	82 bb       	out	0x12, r24	; 18
	PORTD=c;
	PORTD+=5;
 262:	82 b3       	in	r24, 0x12	; 18
 264:	8b 5f       	subi	r24, 0xFB	; 251
 266:	82 bb       	out	0x12, r24	; 18
 268:	8a ef       	ldi	r24, 0xFA	; 250
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	01 97       	sbiw	r24, 0x01	; 1
 26e:	f1 f7       	brne	.-4      	; 0x26c <senddata+0xc>
	_delay_ms(1);
	PORTD-=4;
 270:	82 b3       	in	r24, 0x12	; 18
 272:	84 50       	subi	r24, 0x04	; 4
 274:	82 bb       	out	0x12, r24	; 18
}
 276:	08 95       	ret

00000278 <main>:


main()
{
 278:	0f 93       	push	r16
 27a:	1f 93       	push	r17
 27c:	cf 93       	push	r28
 27e:	df 93       	push	r29
	DDRD=0xFF;
 280:	8f ef       	ldi	r24, 0xFF	; 255
 282:	81 bb       	out	0x11, r24	; 17
	lcdstr();
 284:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcdstr>
	sin1();sin2();sin3();sin4();
 288:	0e 94 03 01 	call	0x206	; 0x206 <sin1>
 28c:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <sin2>
 290:	0e 94 c1 00 	call	0x182	; 0x182 <sin3>
 294:	0e 94 a0 00 	call	0x140	; 0x140 <sin4>
	divcmd4(0x01);
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	0e 94 49 00 	call	0x92	; 0x92 <divcmd4>
 2a0:	04 ec       	ldi	r16, 0xC4	; 196
 2a2:	19 e0       	ldi	r17, 0x09	; 9
	while(1)
	{	
		int i=4;
		divcmd4(0x1c);
 2a4:	8c e1       	ldi	r24, 0x1C	; 28
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	0e 94 49 00 	call	0x92	; 0x92 <divcmd4>
 2ac:	c0 e8       	ldi	r28, 0x80	; 128
 2ae:	d0 e0       	ldi	r29, 0x00	; 0
		while(i!=44)
		{
		divcmd4(0x80+i-4);
 2b0:	ce 01       	movw	r24, r28
 2b2:	0e 94 49 00 	call	0x92	; 0x92 <divcmd4>
		divdata4(0);
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	0e 94 7d 00 	call	0xfa	; 0xfa <divdata4>
		divdata4(1);
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	0e 94 7d 00 	call	0xfa	; 0xfa <divdata4>
		divcmd4(0xc2+i-4);
 2c6:	ce 01       	movw	r24, r28
 2c8:	8e 5b       	subi	r24, 0xBE	; 190
 2ca:	9f 4f       	sbci	r25, 0xFF	; 255
 2cc:	0e 94 49 00 	call	0x92	; 0x92 <divcmd4>
		divdata4(2);
 2d0:	82 e0       	ldi	r24, 0x02	; 2
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	0e 94 7d 00 	call	0xfa	; 0xfa <divdata4>
		divdata4(3);
 2d8:	83 e0       	ldi	r24, 0x03	; 3
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	0e 94 7d 00 	call	0xfa	; 0xfa <divdata4>
 2e0:	c8 01       	movw	r24, r16
 2e2:	01 97       	sbiw	r24, 0x01	; 1
 2e4:	f1 f7       	brne	.-4      	; 0x2e2 <main+0x6a>
 2e6:	24 96       	adiw	r28, 0x04	; 4
	divcmd4(0x01);
	while(1)
	{	
		int i=4;
		divcmd4(0x1c);
		while(i!=44)
 2e8:	c8 3a       	cpi	r28, 0xA8	; 168
 2ea:	d1 05       	cpc	r29, r1
 2ec:	09 f7       	brne	.-62     	; 0x2b0 <main+0x38>
 2ee:	da cf       	rjmp	.-76     	; 0x2a4 <main+0x2c>

000002f0 <_exit>:
 2f0:	f8 94       	cli

000002f2 <__stop_program>:
 2f2:	ff cf       	rjmp	.-2      	; 0x2f2 <__stop_program>
