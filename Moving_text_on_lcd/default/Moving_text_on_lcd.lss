
Moving_text_on_lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002c2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000002c2  00000336  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  0000033e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000066  00000000  00000000  0000035e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000003f9  00000000  00000000  000003c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000151  00000000  00000000  000007bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000003c7  00000000  00000000  0000090e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000080  00000000  00000000  00000cd8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000122  00000000  00000000  00000d58  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000380  00000000  00000000  00000e7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  000011fa  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ec       	ldi	r30, 0xC2	; 194
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 36       	cpi	r26, 0x68	; 104
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b9 00 	call	0x172	; 0x172 <main>
  8a:	0c 94 5f 01 	jmp	0x2be	; 0x2be <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <sendcmd>:
	senddata(b&0xF0);//First 4 bits
	senddata((b<<4)&0xF0);//Next 4
	_delay_ms(1);
}
void sendcmd(int c)
{
  92:	82 bb       	out	0x12, r24	; 18
	PORTD=c;
	PORTD+=4;
  94:	82 b3       	in	r24, 0x12	; 18
  96:	8c 5f       	subi	r24, 0xFC	; 252
  98:	82 bb       	out	0x12, r24	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9a:	8a ef       	ldi	r24, 0xFA	; 250
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <sendcmd+0xc>
	_delay_ms(1);
	PORTD-=4;
  a2:	82 b3       	in	r24, 0x12	; 18
  a4:	84 50       	subi	r24, 0x04	; 4
  a6:	82 bb       	out	0x12, r24	; 18
}
  a8:	08 95       	ret

000000aa <divcmd>:
	divcmd(0x28);//4 bit mode
	divcmd(0x06);//Increment Mode
	divcmd(0x0c);//Display on cursor off
}
void divcmd(int b)
{
  aa:	0f 93       	push	r16
  ac:	1f 93       	push	r17
  ae:	8c 01       	movw	r16, r24
	sendcmd(b&0xF0);//First 4 bits
  b0:	80 7f       	andi	r24, 0xF0	; 240
  b2:	90 70       	andi	r25, 0x00	; 0
  b4:	0e 94 49 00 	call	0x92	; 0x92 <sendcmd>
	sendcmd((b<<4)&0xF0);//Next 4
  b8:	84 e0       	ldi	r24, 0x04	; 4
  ba:	00 0f       	add	r16, r16
  bc:	11 1f       	adc	r17, r17
  be:	8a 95       	dec	r24
  c0:	e1 f7       	brne	.-8      	; 0xba <divcmd+0x10>
  c2:	c8 01       	movw	r24, r16
  c4:	90 70       	andi	r25, 0x00	; 0
  c6:	0e 94 49 00 	call	0x92	; 0x92 <sendcmd>
  ca:	8a ef       	ldi	r24, 0xFA	; 250
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <divcmd+0x24>
	_delay_ms(1);
}
  d2:	1f 91       	pop	r17
  d4:	0f 91       	pop	r16
  d6:	08 95       	ret

000000d8 <lcdstr>:
void lcdstr(void)
{
  d8:	82 e0       	ldi	r24, 0x02	; 2
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
	divcmd(0x02);//Home position Initialization with dividing function
	divcmd(0x28);//4 bit mode
  e0:	88 e2       	ldi	r24, 0x28	; 40
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
	divcmd(0x06);//Increment Mode
  e8:	86 e0       	ldi	r24, 0x06	; 6
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
	divcmd(0x0c);//Display on cursor off
  f0:	8c e0       	ldi	r24, 0x0C	; 12
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
}
  f8:	08 95       	ret

000000fa <senddata>:
	PORTD+=4;
	_delay_ms(1);
	PORTD-=4;
}
void senddata(int c)
{
  fa:	82 bb       	out	0x12, r24	; 18
	PORTD=c;
	PORTD+=5;
  fc:	82 b3       	in	r24, 0x12	; 18
  fe:	8b 5f       	subi	r24, 0xFB	; 251
 100:	82 bb       	out	0x12, r24	; 18
 102:	8a ef       	ldi	r24, 0xFA	; 250
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <senddata+0xc>
	_delay_ms(1);
	PORTD-=4;
 10a:	82 b3       	in	r24, 0x12	; 18
 10c:	84 50       	subi	r24, 0x04	; 4
 10e:	82 bb       	out	0x12, r24	; 18
}
 110:	08 95       	ret

00000112 <divdata>:
	sendcmd(b&0xF0);//First 4 bits
	sendcmd((b<<4)&0xF0);//Next 4
	_delay_ms(1);
}
void divdata(int b)
{
 112:	0f 93       	push	r16
 114:	1f 93       	push	r17
 116:	8c 01       	movw	r16, r24
	senddata(b&0xF0);//First 4 bits
 118:	80 7f       	andi	r24, 0xF0	; 240
 11a:	90 70       	andi	r25, 0x00	; 0
 11c:	0e 94 7d 00 	call	0xfa	; 0xfa <senddata>
	senddata((b<<4)&0xF0);//Next 4
 120:	94 e0       	ldi	r25, 0x04	; 4
 122:	00 0f       	add	r16, r16
 124:	11 1f       	adc	r17, r17
 126:	9a 95       	dec	r25
 128:	e1 f7       	brne	.-8      	; 0x122 <divdata+0x10>
 12a:	c8 01       	movw	r24, r16
 12c:	90 70       	andi	r25, 0x00	; 0
 12e:	0e 94 7d 00 	call	0xfa	; 0xfa <senddata>
 132:	8a ef       	ldi	r24, 0xFA	; 250
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <divdata+0x24>
	_delay_ms(1);
}
 13a:	1f 91       	pop	r17
 13c:	0f 91       	pop	r16
 13e:	08 95       	ret

00000140 <disp_string>:
	_delay_ms(1);
	PORTD-=4;
}

void disp_string(char *str, int pos)
{
 140:	0f 93       	push	r16
 142:	1f 93       	push	r17
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
 148:	18 2f       	mov	r17, r24
 14a:	09 2f       	mov	r16, r25
 14c:	cb 01       	movw	r24, r22
	int i=0;
	divcmd(pos);
 14e:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
 152:	21 2f       	mov	r18, r17
 154:	30 2f       	mov	r19, r16
 156:	c9 01       	movw	r24, r18
 158:	ec 01       	movw	r28, r24
 15a:	03 c0       	rjmp	.+6      	; 0x162 <disp_string+0x22>
	while(str[i]!='\0')
	{
		divdata(str[i]);
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	0e 94 89 00 	call	0x112	; 0x112 <divdata>

void disp_string(char *str, int pos)
{
	int i=0;
	divcmd(pos);
	while(str[i]!='\0')
 162:	89 91       	ld	r24, Y+
 164:	88 23       	and	r24, r24
 166:	d1 f7       	brne	.-12     	; 0x15c <disp_string+0x1c>
	{
		divdata(str[i]);
		i++;
	}

}
 168:	df 91       	pop	r29
 16a:	cf 91       	pop	r28
 16c:	1f 91       	pop	r17
 16e:	0f 91       	pop	r16
 170:	08 95       	ret

00000172 <main>:
#include<avr/io.h>
#include<util/delay.h>
#include<string.h>
#include<mars/lcd.h>
main()
{
 172:	2f 92       	push	r2
 174:	3f 92       	push	r3
 176:	4f 92       	push	r4
 178:	5f 92       	push	r5
 17a:	6f 92       	push	r6
 17c:	7f 92       	push	r7
 17e:	8f 92       	push	r8
 180:	9f 92       	push	r9
 182:	af 92       	push	r10
 184:	bf 92       	push	r11
 186:	cf 92       	push	r12
 188:	df 92       	push	r13
 18a:	ef 92       	push	r14
 18c:	ff 92       	push	r15
 18e:	0f 93       	push	r16
 190:	1f 93       	push	r17
 192:	cf 93       	push	r28
 194:	df 93       	push	r29
	DDRD=0xFF;
 196:	8f ef       	ldi	r24, 0xFF	; 255
 198:	81 bb       	out	0x11, r24	; 17
	lcdstr();
 19a:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcdstr>
	divcmd(0x01);
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
 1a6:	00 e0       	ldi	r16, 0x00	; 0
 1a8:	10 e0       	ldi	r17, 0x00	; 0
 1aa:	88 24       	eor	r8, r8
 1ac:	99 24       	eor	r9, r9
 1ae:	60 e8       	ldi	r22, 0x80	; 128
 1b0:	a6 2e       	mov	r10, r22
 1b2:	b1 2c       	mov	r11, r1
		}
		if(i>16-s&&i<=16)
		{
			divcmd(0x01);
			divcmd(0x80+i);
			for(j=0;j<(16-i);j++)
 1b4:	50 e1       	ldi	r21, 0x10	; 16
 1b6:	25 2e       	mov	r2, r21
 1b8:	31 2c       	mov	r3, r1
 1ba:	49 e1       	ldi	r20, 0x19	; 25
 1bc:	64 2e       	mov	r6, r20
 1be:	71 2c       	mov	r7, r1
		}
		if(k<s)
		{
			divcmd(0x01);
			divcmd(0xc0+i);
			for(j=s-k;j>0;j--)
 1c0:	37 e0       	ldi	r19, 0x07	; 7
 1c2:	43 2e       	mov	r4, r19
 1c4:	51 2c       	mov	r5, r1
 1c6:	03 c0       	rjmp	.+6      	; 0x1ce <main+0x5c>
#include<mars/lcd.h>
main()
{
	DDRD=0xFF;
	lcdstr();
	divcmd(0x01);
 1c8:	08 94       	sec
 1ca:	a1 1c       	adc	r10, r1
 1cc:	b1 1c       	adc	r11, r1
	char *str="Mansoor";
	int s=strlen(str),i=0,j,k=0;
	while(1)
	{
		if(i<=16-s)
 1ce:	0a 30       	cpi	r16, 0x0A	; 10
 1d0:	11 05       	cpc	r17, r1
 1d2:	8c f4       	brge	.+34     	; 0x1f6 <main+0x84>
		{
			divcmd(0x01);
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
			disp_string(str,0x80+i);
 1dc:	b5 01       	movw	r22, r10
 1de:	80 e6       	ldi	r24, 0x60	; 96
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	0e 94 a0 00 	call	0x140	; 0x140 <disp_string>
 1e6:	80 e1       	ldi	r24, 0x10	; 16
 1e8:	97 e2       	ldi	r25, 0x27	; 39
 1ea:	f3 01       	movw	r30, r6
 1ec:	31 97       	sbiw	r30, 0x01	; 1
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <main+0x7a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1f0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1f2:	d9 f7       	brne	.-10     	; 0x1ea <main+0x78>
 1f4:	25 c0       	rjmp	.+74     	; 0x240 <main+0xce>
			_delay_ms(1000);
		}
		if(i>16-s&&i<=16)
 1f6:	01 31       	cpi	r16, 0x11	; 17
 1f8:	11 05       	cpc	r17, r1
 1fa:	14 f5       	brge	.+68     	; 0x240 <main+0xce>
		{
			divcmd(0x01);
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
			divcmd(0x80+i);
 204:	c5 01       	movw	r24, r10
 206:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
 20a:	20 e6       	ldi	r18, 0x60	; 96
 20c:	e2 2e       	mov	r14, r18
 20e:	20 e0       	ldi	r18, 0x00	; 0
 210:	f2 2e       	mov	r15, r18
 212:	c0 e0       	ldi	r28, 0x00	; 0
 214:	d0 e0       	ldi	r29, 0x00	; 0
			for(j=0;j<(16-i);j++)
 216:	61 01       	movw	r12, r2
 218:	c0 1a       	sub	r12, r16
 21a:	d1 0a       	sbc	r13, r17
 21c:	07 c0       	rjmp	.+14     	; 0x22c <main+0xba>
			{
				divdata(str[j]);
 21e:	f7 01       	movw	r30, r14
 220:	81 91       	ld	r24, Z+
 222:	7f 01       	movw	r14, r30
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	0e 94 89 00 	call	0x112	; 0x112 <divdata>
		}
		if(i>16-s&&i<=16)
		{
			divcmd(0x01);
			divcmd(0x80+i);
			for(j=0;j<(16-i);j++)
 22a:	21 96       	adiw	r28, 0x01	; 1
 22c:	cc 15       	cp	r28, r12
 22e:	dd 05       	cpc	r29, r13
 230:	b4 f3       	brlt	.-20     	; 0x21e <main+0xac>
 232:	80 e1       	ldi	r24, 0x10	; 16
 234:	97 e2       	ldi	r25, 0x27	; 39
 236:	f3 01       	movw	r30, r6
 238:	31 97       	sbiw	r30, 0x01	; 1
 23a:	f1 f7       	brne	.-4      	; 0x238 <main+0xc6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 23c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 23e:	d9 f7       	brne	.-10     	; 0x236 <main+0xc4>
			{
				divdata(str[j]);
			}
			_delay_ms(1000);
		}
		i++;
 240:	0f 5f       	subi	r16, 0xFF	; 255
 242:	1f 4f       	sbci	r17, 0xFF	; 255
		if(i>16)
 244:	01 31       	cpi	r16, 0x11	; 17
 246:	11 05       	cpc	r17, r1
 248:	0c f4       	brge	.+2      	; 0x24c <main+0xda>
 24a:	be cf       	rjmp	.-132    	; 0x1c8 <main+0x56>
		{
			if(k>=s)
 24c:	f7 e0       	ldi	r31, 0x07	; 7
 24e:	8f 16       	cp	r8, r31
 250:	91 04       	cpc	r9, r1
 252:	9c f0       	brlt	.+38     	; 0x27a <main+0x108>
		{
			divcmd(0x01);
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
			disp_string(str,0x80+i);
 25c:	b8 01       	movw	r22, r16
 25e:	60 58       	subi	r22, 0x80	; 128
 260:	7f 4f       	sbci	r23, 0xFF	; 255
 262:	80 e6       	ldi	r24, 0x60	; 96
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	0e 94 a0 00 	call	0x140	; 0x140 <disp_string>
 26a:	80 e1       	ldi	r24, 0x10	; 16
 26c:	97 e2       	ldi	r25, 0x27	; 39
 26e:	f3 01       	movw	r30, r6
 270:	31 97       	sbiw	r30, 0x01	; 1
 272:	f1 f7       	brne	.-4      	; 0x270 <main+0xfe>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 274:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 276:	d9 f7       	brne	.-10     	; 0x26e <main+0xfc>
 278:	1e c0       	rjmp	.+60     	; 0x2b6 <main+0x144>
			_delay_ms(1000);
		}
		if(k<s)
		{
			divcmd(0x01);
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
			divcmd(0xc0+i);
 282:	c8 01       	movw	r24, r16
 284:	80 54       	subi	r24, 0x40	; 64
 286:	9f 4f       	sbci	r25, 0xFF	; 255
 288:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
			for(j=s-k;j>0;j--)
 28c:	e2 01       	movw	r28, r4
 28e:	c8 19       	sub	r28, r8
 290:	d9 09       	sbc	r29, r9
			{
				divdata(str[j]);
 292:	fe 01       	movw	r30, r28
 294:	e0 5a       	subi	r30, 0xA0	; 160
 296:	ff 4f       	sbci	r31, 0xFF	; 255
 298:	80 81       	ld	r24, Z
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	0e 94 89 00 	call	0x112	; 0x112 <divdata>
		}
		if(k<s)
		{
			divcmd(0x01);
			divcmd(0xc0+i);
			for(j=s-k;j>0;j--)
 2a0:	21 97       	sbiw	r28, 0x01	; 1
 2a2:	1c 16       	cp	r1, r28
 2a4:	1d 06       	cpc	r1, r29
 2a6:	ac f3       	brlt	.-22     	; 0x292 <main+0x120>
 2a8:	80 e1       	ldi	r24, 0x10	; 16
 2aa:	97 e2       	ldi	r25, 0x27	; 39
 2ac:	f3 01       	movw	r30, r6
 2ae:	31 97       	sbiw	r30, 0x01	; 1
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <main+0x13c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2b2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2b4:	d9 f7       	brne	.-10     	; 0x2ac <main+0x13a>
			{
				divdata(str[j]);
			}
			_delay_ms(1000);
		}
		k++;
 2b6:	08 94       	sec
 2b8:	81 1c       	adc	r8, r1
 2ba:	91 1c       	adc	r9, r1
 2bc:	85 cf       	rjmp	.-246    	; 0x1c8 <main+0x56>

000002be <_exit>:
 2be:	f8 94       	cli

000002c0 <__stop_program>:
 2c0:	ff cf       	rjmp	.-2      	; 0x2c0 <__stop_program>
