
Touch_Screen_Controlled_Robot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002d4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000008d  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000003a2  00000000  00000000  000003d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000161  00000000  00000000  00000777  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000441  00000000  00000000  000008d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  000000b0  00000000  00000000  00000d1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000015e  00000000  00000000  00000dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000001c8  00000000  00000000  00000f2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000078  00000000  00000000  000010f2  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ed       	ldi	r30, 0xD4	; 212
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ee 00 	call	0x1dc	; 0x1dc <main>
  8a:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <sendcmd>:
	senddata(b&0xF0);//First 4 bits
	senddata((b<<4)&0xF0);//Next 4
	_delay_ms(1);
}
void sendcmd(int c)
{
  92:	85 bb       	out	0x15, r24	; 21
	PORTC=c;
	PORTC+=4;
  94:	85 b3       	in	r24, 0x15	; 21
  96:	8c 5f       	subi	r24, 0xFC	; 252
  98:	85 bb       	out	0x15, r24	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9a:	8a ef       	ldi	r24, 0xFA	; 250
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <sendcmd+0xc>
	_delay_ms(1);
	PORTC-=4;
  a2:	85 b3       	in	r24, 0x15	; 21
  a4:	84 50       	subi	r24, 0x04	; 4
  a6:	85 bb       	out	0x15, r24	; 21
}
  a8:	08 95       	ret

000000aa <divcmd>:
	divcmd(0x28);//4 bit mode
	divcmd(0x06);//Increment Mode
	divcmd(0x0c);//Display on cursor off
}
void divcmd(int b)
{
  aa:	0f 93       	push	r16
  ac:	1f 93       	push	r17
  ae:	8c 01       	movw	r16, r24
	sendcmd(b&0xF0);//First 4 bits
  b0:	80 7f       	andi	r24, 0xF0	; 240
  b2:	90 70       	andi	r25, 0x00	; 0
  b4:	0e 94 49 00 	call	0x92	; 0x92 <sendcmd>
	sendcmd((b<<4)&0xF0);//Next 4
  b8:	84 e0       	ldi	r24, 0x04	; 4
  ba:	00 0f       	add	r16, r16
  bc:	11 1f       	adc	r17, r17
  be:	8a 95       	dec	r24
  c0:	e1 f7       	brne	.-8      	; 0xba <divcmd+0x10>
  c2:	c8 01       	movw	r24, r16
  c4:	90 70       	andi	r25, 0x00	; 0
  c6:	0e 94 49 00 	call	0x92	; 0x92 <sendcmd>
  ca:	8a ef       	ldi	r24, 0xFA	; 250
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <divcmd+0x24>
	_delay_ms(1);
}
  d2:	1f 91       	pop	r17
  d4:	0f 91       	pop	r16
  d6:	08 95       	ret

000000d8 <lcdstr>:
void lcdstr(void)
{
  d8:	82 e0       	ldi	r24, 0x02	; 2
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
	divcmd(0x02);//Home position Initialization with dividing function
	divcmd(0x28);//4 bit mode
  e0:	88 e2       	ldi	r24, 0x28	; 40
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
	divcmd(0x06);//Increment Mode
  e8:	86 e0       	ldi	r24, 0x06	; 6
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
	divcmd(0x0c);//Display on cursor off
  f0:	8c e0       	ldi	r24, 0x0C	; 12
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
}
  f8:	08 95       	ret

000000fa <senddata>:
	PORTC+=4;
	_delay_ms(1);
	PORTC-=4;
}
void senddata(int c)
{
  fa:	85 bb       	out	0x15, r24	; 21
	PORTC=c;
	PORTC+=5;
  fc:	85 b3       	in	r24, 0x15	; 21
  fe:	8b 5f       	subi	r24, 0xFB	; 251
 100:	85 bb       	out	0x15, r24	; 21
 102:	8a ef       	ldi	r24, 0xFA	; 250
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <senddata+0xc>
	_delay_ms(1);
	PORTC-=4;
 10a:	85 b3       	in	r24, 0x15	; 21
 10c:	84 50       	subi	r24, 0x04	; 4
 10e:	85 bb       	out	0x15, r24	; 21
}
 110:	08 95       	ret

00000112 <divdata>:
	sendcmd(b&0xF0);//First 4 bits
	sendcmd((b<<4)&0xF0);//Next 4
	_delay_ms(1);
}
void divdata(int b)
{
 112:	0f 93       	push	r16
 114:	1f 93       	push	r17
 116:	8c 01       	movw	r16, r24
	senddata(b&0xF0);//First 4 bits
 118:	80 7f       	andi	r24, 0xF0	; 240
 11a:	90 70       	andi	r25, 0x00	; 0
 11c:	0e 94 7d 00 	call	0xfa	; 0xfa <senddata>
	senddata((b<<4)&0xF0);//Next 4
 120:	94 e0       	ldi	r25, 0x04	; 4
 122:	00 0f       	add	r16, r16
 124:	11 1f       	adc	r17, r17
 126:	9a 95       	dec	r25
 128:	e1 f7       	brne	.-8      	; 0x122 <divdata+0x10>
 12a:	c8 01       	movw	r24, r16
 12c:	90 70       	andi	r25, 0x00	; 0
 12e:	0e 94 7d 00 	call	0xfa	; 0xfa <senddata>
 132:	8a ef       	ldi	r24, 0xFA	; 250
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <divdata+0x24>
	_delay_ms(1);
}
 13a:	1f 91       	pop	r17
 13c:	0f 91       	pop	r16
 13e:	08 95       	ret

00000140 <disp_string>:
	_delay_ms(1);
	PORTC-=4;
}

void disp_string(char *str, int pos)
{
 140:	0f 93       	push	r16
 142:	1f 93       	push	r17
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
 148:	18 2f       	mov	r17, r24
 14a:	09 2f       	mov	r16, r25
 14c:	cb 01       	movw	r24, r22
	int i=0;
	divcmd(pos);
 14e:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
 152:	21 2f       	mov	r18, r17
 154:	30 2f       	mov	r19, r16
 156:	c9 01       	movw	r24, r18
 158:	ec 01       	movw	r28, r24
 15a:	03 c0       	rjmp	.+6      	; 0x162 <disp_string+0x22>
	while(str[i]!='\0')
	{
		divdata(str[i]);
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	0e 94 89 00 	call	0x112	; 0x112 <divdata>

void disp_string(char *str, int pos)
{
	int i=0;
	divcmd(pos);
	while(str[i]!='\0')
 162:	89 91       	ld	r24, Y+
 164:	88 23       	and	r24, r24
 166:	d1 f7       	brne	.-12     	; 0x15c <disp_string+0x1c>
	{
		divdata(str[i]);
		i++;
	}

}
 168:	df 91       	pop	r29
 16a:	cf 91       	pop	r28
 16c:	1f 91       	pop	r17
 16e:	0f 91       	pop	r16
 170:	08 95       	ret

00000172 <disp_number>:

void disp_number(unsigned int x,int y)
{
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
 176:	ec 01       	movw	r28, r24
 178:	cb 01       	movw	r24, r22
	unsigned int i;
	i=x;
	divcmd(y);
 17a:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
	if(i<0)
	{
           i=i*-1;
           }
           
	if(i==0)
 17e:	20 97       	sbiw	r28, 0x00	; 0
 180:	c9 f4       	brne	.+50     	; 0x1b4 <disp_number+0x42>
	{
		divdata(48);
 182:	80 e3       	ldi	r24, 0x30	; 48
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	0e 94 89 00 	call	0x112	; 0x112 <divdata>
 18a:	c0 e0       	ldi	r28, 0x00	; 0
 18c:	d0 e0       	ldi	r29, 0x00	; 0
 18e:	12 c0       	rjmp	.+36     	; 0x1b4 <disp_number+0x42>
	}
	while(i>0)
	{
		divcmd(0x04);
 190:	84 e0       	ldi	r24, 0x04	; 4
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
		divdata((i%10)+48);
 198:	ce 01       	movw	r24, r28
 19a:	6a e0       	ldi	r22, 0x0A	; 10
 19c:	70 e0       	ldi	r23, 0x00	; 0
 19e:	0e 94 54 01 	call	0x2a8	; 0x2a8 <__udivmodhi4>
 1a2:	c0 96       	adiw	r24, 0x30	; 48
 1a4:	0e 94 89 00 	call	0x112	; 0x112 <divdata>
		i=i/10;
 1a8:	ce 01       	movw	r24, r28
 1aa:	6a e0       	ldi	r22, 0x0A	; 10
 1ac:	70 e0       	ldi	r23, 0x00	; 0
 1ae:	0e 94 54 01 	call	0x2a8	; 0x2a8 <__udivmodhi4>
 1b2:	eb 01       	movw	r28, r22
           
	if(i==0)
	{
		divdata(48);
	}
	while(i>0)
 1b4:	20 97       	sbiw	r28, 0x00	; 0
 1b6:	61 f7       	brne	.-40     	; 0x190 <disp_number+0x1e>
	{
		divcmd(0x04);
		divdata((i%10)+48);
		i=i/10;
	}
}
 1b8:	df 91       	pop	r29
 1ba:	cf 91       	pop	r28
 1bc:	08 95       	ret

000001be <clear>:
void clear(void)
{
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
     divcmd(0x01);
}
 1c6:	08 95       	ret

000001c8 <ADC_read>:
#include<avr/io.h>
#include<util/delay.h>
#include<mars/lcdd.h>
#include<string.h>
int ADC_read(int chn)
{
 1c8:	80 64       	ori	r24, 0x40	; 64
 1ca:	87 b9       	out	0x07, r24	; 7
	ADMUX=chn|0x40;//(1<<REFSO)|(0<<REFS1)
	ADCSRA=0xd7;
 1cc:	87 ed       	ldi	r24, 0xD7	; 215
 1ce:	86 b9       	out	0x06, r24	; 6
	while((ADCSRA&0x10)==0);
 1d0:	34 9b       	sbis	0x06, 4	; 6
 1d2:	fe cf       	rjmp	.-4      	; 0x1d0 <ADC_read+0x8>
	return ADC;
 1d4:	24 b1       	in	r18, 0x04	; 4
 1d6:	35 b1       	in	r19, 0x05	; 5

}
 1d8:	c9 01       	movw	r24, r18
 1da:	08 95       	ret

000001dc <main>:

main()
{
 1dc:	5f 92       	push	r5
 1de:	6f 92       	push	r6
 1e0:	7f 92       	push	r7
 1e2:	8f 92       	push	r8
 1e4:	9f 92       	push	r9
 1e6:	af 92       	push	r10
 1e8:	bf 92       	push	r11
 1ea:	cf 92       	push	r12
 1ec:	df 92       	push	r13
 1ee:	ef 92       	push	r14
 1f0:	ff 92       	push	r15
 1f2:	0f 93       	push	r16
 1f4:	1f 93       	push	r17
 1f6:	cf 93       	push	r28
 1f8:	df 93       	push	r29
	DDRC=0xFF;
 1fa:	8f ef       	ldi	r24, 0xFF	; 255
 1fc:	84 bb       	out	0x14, r24	; 20
	DDRB=0xFF;
 1fe:	87 bb       	out	0x17, r24	; 23
	lcdstr();
 200:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcdstr>
	divcmd(0x01);
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
	int x=0,y=0,u=1,v=1;
	while(1)
	{
		DDRA=0b11111010;
 20c:	1a ef       	ldi	r17, 0xFA	; 250
 20e:	51 2e       	mov	r5, r17
		PORTA=0b11111000;
 210:	b8 ef       	ldi	r27, 0xF8	; 248
 212:	6b 2e       	mov	r6, r27
#include<util/delay.h>
#include<mars/lcdd.h>
#include<string.h>
int ADC_read(int chn)
{
	ADMUX=chn|0x40;//(1<<REFSO)|(0<<REFS1)
 214:	a2 e4       	ldi	r26, 0x42	; 66
 216:	7a 2e       	mov	r7, r26
	ADCSRA=0xd7;
 218:	f7 ed       	ldi	r31, 0xD7	; 215
 21a:	ff 2e       	mov	r15, r31
	while(1)
	{
		DDRA=0b11111010;
		PORTA=0b11111000;
		x=ADC_read(2);
		DDRA=0b11110101;
 21c:	e5 ef       	ldi	r30, 0xF5	; 245
 21e:	8e 2e       	mov	r8, r30
		PORTA=0b11110100;
 220:	74 ef       	ldi	r23, 0xF4	; 244
 222:	97 2e       	mov	r9, r23
#include<util/delay.h>
#include<mars/lcdd.h>
#include<string.h>
int ADC_read(int chn)
{
	ADMUX=chn|0x40;//(1<<REFSO)|(0<<REFS1)
 224:	63 e4       	ldi	r22, 0x43	; 67
 226:	a6 2e       	mov	r10, r22
		{
			PORTB=5;
		}
		if(x>500&&y>500)
		{
			PORTB=8;
 228:	58 e0       	ldi	r21, 0x08	; 8
 22a:	b5 2e       	mov	r11, r21
		}
		if(x>500&&y>500)
		{
			PORTB=2;
 22c:	42 e0       	ldi	r20, 0x02	; 2
 22e:	c4 2e       	mov	r12, r20
		{
			PORTB=10;
		}
		if(x>500&&y<500)
		{
			PORTB=5;
 230:	35 e0       	ldi	r19, 0x05	; 5
 232:	d3 2e       	mov	r13, r19
		DDRA=0b11110101;
		PORTA=0b11110100;
		y=ADC_read(3);
		if(x<500&&y<500)
		{
			PORTB=10;
 234:	2a e0       	ldi	r18, 0x0A	; 10
 236:	e2 2e       	mov	r14, r18
 238:	08 ea       	ldi	r16, 0xA8	; 168
 23a:	11 e6       	ldi	r17, 0x61	; 97
	lcdstr();
	divcmd(0x01);
	int x=0,y=0,u=1,v=1;
	while(1)
	{
		DDRA=0b11111010;
 23c:	5a ba       	out	0x1a, r5	; 26
		PORTA=0b11111000;
 23e:	6b ba       	out	0x1b, r6	; 27
#include<util/delay.h>
#include<mars/lcdd.h>
#include<string.h>
int ADC_read(int chn)
{
	ADMUX=chn|0x40;//(1<<REFSO)|(0<<REFS1)
 240:	77 b8       	out	0x07, r7	; 7
	ADCSRA=0xd7;
 242:	f6 b8       	out	0x06, r15	; 6
	while((ADCSRA&0x10)==0);
 244:	34 9b       	sbis	0x06, 4	; 6
 246:	fe cf       	rjmp	.-4      	; 0x244 <main+0x68>
	return ADC;
 248:	84 b1       	in	r24, 0x04	; 4
 24a:	95 b1       	in	r25, 0x05	; 5
	while(1)
	{
		DDRA=0b11111010;
		PORTA=0b11111000;
		x=ADC_read(2);
		DDRA=0b11110101;
 24c:	8a ba       	out	0x1a, r8	; 26
		PORTA=0b11110100;
 24e:	9b ba       	out	0x1b, r9	; 27
#include<util/delay.h>
#include<mars/lcdd.h>
#include<string.h>
int ADC_read(int chn)
{
	ADMUX=chn|0x40;//(1<<REFSO)|(0<<REFS1)
 250:	a7 b8       	out	0x07, r10	; 7
	ADCSRA=0xd7;
 252:	f6 b8       	out	0x06, r15	; 6
	while((ADCSRA&0x10)==0);
 254:	34 9b       	sbis	0x06, 4	; 6
 256:	fe cf       	rjmp	.-4      	; 0x254 <main+0x78>
	return ADC;
 258:	c4 b1       	in	r28, 0x04	; 4
 25a:	d5 b1       	in	r29, 0x05	; 5
		PORTA=0b11111000;
		x=ADC_read(2);
		DDRA=0b11110101;
		PORTA=0b11110100;
		y=ADC_read(3);
		if(x<500&&y<500)
 25c:	21 e0       	ldi	r18, 0x01	; 1
 25e:	84 3f       	cpi	r24, 0xF4	; 244
 260:	92 07       	cpc	r25, r18
 262:	34 f4       	brge	.+12     	; 0x270 <main+0x94>
 264:	21 e0       	ldi	r18, 0x01	; 1
 266:	c4 3f       	cpi	r28, 0xF4	; 244
 268:	d2 07       	cpc	r29, r18
 26a:	8c f4       	brge	.+34     	; 0x28e <main+0xb2>
		{
			PORTB=10;
 26c:	e8 ba       	out	0x18, r14	; 24
 26e:	0f c0       	rjmp	.+30     	; 0x28e <main+0xb2>
		}
		if(x>500&&y<500)
 270:	21 e0       	ldi	r18, 0x01	; 1
 272:	84 3f       	cpi	r24, 0xF4	; 244
 274:	92 07       	cpc	r25, r18
 276:	59 f0       	breq	.+22     	; 0x28e <main+0xb2>
 278:	21 e0       	ldi	r18, 0x01	; 1
 27a:	c4 3f       	cpi	r28, 0xF4	; 244
 27c:	d2 07       	cpc	r29, r18
 27e:	0c f4       	brge	.+2      	; 0x282 <main+0xa6>
		{
			PORTB=5;
 280:	d8 ba       	out	0x18, r13	; 24
		}
		if(x>500&&y>500)
 282:	21 e0       	ldi	r18, 0x01	; 1
 284:	c5 3f       	cpi	r28, 0xF5	; 245
 286:	d2 07       	cpc	r29, r18
 288:	14 f0       	brlt	.+4      	; 0x28e <main+0xb2>
		{
			PORTB=8;
 28a:	b8 ba       	out	0x18, r11	; 24
		}
		if(x>500&&y>500)
		{
			PORTB=2;
 28c:	c8 ba       	out	0x18, r12	; 24
		}
		disp_number(x,0x8f);
 28e:	6f e8       	ldi	r22, 0x8F	; 143
 290:	70 e0       	ldi	r23, 0x00	; 0
 292:	0e 94 b9 00 	call	0x172	; 0x172 <disp_number>
		disp_number(y,0xcf);
 296:	6f ec       	ldi	r22, 0xCF	; 207
 298:	70 e0       	ldi	r23, 0x00	; 0
 29a:	ce 01       	movw	r24, r28
 29c:	0e 94 b9 00 	call	0x172	; 0x172 <disp_number>
 2a0:	c8 01       	movw	r24, r16
 2a2:	01 97       	sbiw	r24, 0x01	; 1
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <main+0xc6>
 2a6:	ca cf       	rjmp	.-108    	; 0x23c <main+0x60>

000002a8 <__udivmodhi4>:
 2a8:	aa 1b       	sub	r26, r26
 2aa:	bb 1b       	sub	r27, r27
 2ac:	51 e1       	ldi	r21, 0x11	; 17
 2ae:	07 c0       	rjmp	.+14     	; 0x2be <__udivmodhi4_ep>

000002b0 <__udivmodhi4_loop>:
 2b0:	aa 1f       	adc	r26, r26
 2b2:	bb 1f       	adc	r27, r27
 2b4:	a6 17       	cp	r26, r22
 2b6:	b7 07       	cpc	r27, r23
 2b8:	10 f0       	brcs	.+4      	; 0x2be <__udivmodhi4_ep>
 2ba:	a6 1b       	sub	r26, r22
 2bc:	b7 0b       	sbc	r27, r23

000002be <__udivmodhi4_ep>:
 2be:	88 1f       	adc	r24, r24
 2c0:	99 1f       	adc	r25, r25
 2c2:	5a 95       	dec	r21
 2c4:	a9 f7       	brne	.-22     	; 0x2b0 <__udivmodhi4_loop>
 2c6:	80 95       	com	r24
 2c8:	90 95       	com	r25
 2ca:	bc 01       	movw	r22, r24
 2cc:	cd 01       	movw	r24, r26
 2ce:	08 95       	ret

000002d0 <_exit>:
 2d0:	f8 94       	cli

000002d2 <__stop_program>:
 2d2:	ff cf       	rjmp	.-2      	; 0x2d2 <__stop_program>
