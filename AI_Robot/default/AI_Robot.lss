
AI_Robot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ee  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000142  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  00000162  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000140  00000000  00000000  0000017d  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000cf  00000000  00000000  000002bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001a2  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000530  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000e1  00000000  00000000  00000550  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000030  00000000  00000000  00000631  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00000661  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ee       	ldi	r30, 0xEE	; 238
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 75 00 	jmp	0xea	; 0xea <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <main>:
#include<avr/io.h>
#include<util/delay.h>
main()
{
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	87 bb       	out	0x17, r24	; 23
	DDRB=0xFF;
	DDRA=0xFC;
  96:	8c ef       	ldi	r24, 0xFC	; 252
  98:	8a bb       	out	0x1a, r24	; 26
  9a:	22 e0       	ldi	r18, 0x02	; 2
  9c:	30 e0       	ldi	r19, 0x00	; 0
	int k=2;
	while(1)
	{
		if((PINA==1)&&((k%2)==0))
		{
			PORTB=0x0A;
  9e:	7a e0       	ldi	r23, 0x0A	; 10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  a0:	40 e5       	ldi	r20, 0x50	; 80
  a2:	53 ec       	ldi	r21, 0xC3	; 195
			k++;
			_delay_ms(200);	
		}
		if((PINA==2)&&((k%2)!=0))
		{
			PORTB=5;
  a4:	65 e0       	ldi	r22, 0x05	; 5
			k++;
			_delay_ms(200);	
		}
		if(PINA==3)
		{
			PORTB=4;
  a6:	e4 e0       	ldi	r30, 0x04	; 4
	DDRB=0xFF;
	DDRA=0xFC;
	int k=2;
	while(1)
	{
		if((PINA==1)&&((k%2)==0))
  a8:	89 b3       	in	r24, 0x19	; 25
  aa:	81 30       	cpi	r24, 0x01	; 1
  ac:	41 f4       	brne	.+16     	; 0xbe <main+0x2c>
  ae:	20 fd       	sbrc	r18, 0
  b0:	06 c0       	rjmp	.+12     	; 0xbe <main+0x2c>
		{
			PORTB=0x0A;
  b2:	78 bb       	out	0x18, r23	; 24
			k++;
  b4:	2f 5f       	subi	r18, 0xFF	; 255
  b6:	3f 4f       	sbci	r19, 0xFF	; 255
  b8:	ca 01       	movw	r24, r20
  ba:	01 97       	sbiw	r24, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <main+0x28>
			_delay_ms(200);	
		}
		if((PINA==2)&&((k%2)!=0))
  be:	89 b3       	in	r24, 0x19	; 25
  c0:	82 30       	cpi	r24, 0x02	; 2
  c2:	41 f4       	brne	.+16     	; 0xd4 <main+0x42>
  c4:	20 ff       	sbrs	r18, 0
  c6:	06 c0       	rjmp	.+12     	; 0xd4 <main+0x42>
		{
			PORTB=5;
  c8:	68 bb       	out	0x18, r22	; 24
			k++;
  ca:	2f 5f       	subi	r18, 0xFF	; 255
  cc:	3f 4f       	sbci	r19, 0xFF	; 255
  ce:	ca 01       	movw	r24, r20
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <main+0x3e>
			_delay_ms(200);	
		}
		if(PINA==3)
  d4:	89 b3       	in	r24, 0x19	; 25
  d6:	83 30       	cpi	r24, 0x03	; 3
  d8:	11 f4       	brne	.+4      	; 0xde <main+0x4c>
		{
			PORTB=4;
  da:	e8 bb       	out	0x18, r30	; 24
  dc:	e5 cf       	rjmp	.-54     	; 0xa8 <main+0x16>
			continue;
		}
		if((k%2)==0)
  de:	20 ff       	sbrs	r18, 0
		{
			PORTB=5;
  e0:	68 bb       	out	0x18, r22	; 24
		}
		if((k%2)!=0)
  e2:	20 ff       	sbrs	r18, 0
  e4:	e1 cf       	rjmp	.-62     	; 0xa8 <main+0x16>
		{
			PORTB=0x0A;
  e6:	78 bb       	out	0x18, r23	; 24
  e8:	df cf       	rjmp	.-66     	; 0xa8 <main+0x16>

000000ea <_exit>:
  ea:	f8 94       	cli

000000ec <__stop_program>:
  ec:	ff cf       	rjmp	.-2      	; 0xec <__stop_program>
