
Motor_int.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000180  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000057  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000369  00000000  00000000  0000024b  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000152  00000000  00000000  000005b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000026c  00000000  00000000  00000706  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000070  00000000  00000000  00000974  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000101  00000000  00000000  000009e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000c0  00000000  00000000  00000ae5  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e8       	ldi	r30, 0x80	; 128
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a4 00 	call	0x148	; 0x148 <main>
  8a:	0c 94 be 00 	jmp	0x17c	; 0x17c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <div_cmd4>:
	div_cmd4(0x0c);
	div_cmd4(0x06);
}

void div_cmd4(int a)
{
  92:	9c 01       	movw	r18, r24
  94:	30 70       	andi	r19, 0x00	; 0
  96:	28 bb       	out	0x18, r18	; 24
}

void sendcmd(int b)
{
	PORTB=b;
	PORTB+=4;
  98:	28 b3       	in	r18, 0x18	; 24
  9a:	2c 5f       	subi	r18, 0xFC	; 252
  9c:	28 bb       	out	0x18, r18	; 24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9e:	4a ef       	ldi	r20, 0xFA	; 250
  a0:	50 e0       	ldi	r21, 0x00	; 0
  a2:	fa 01       	movw	r30, r20
  a4:	31 97       	sbiw	r30, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <div_cmd4+0x12>
	_delay_ms(1);
	PORTB-=4;
  a8:	28 b3       	in	r18, 0x18	; 24
  aa:	24 50       	subi	r18, 0x04	; 4
  ac:	28 bb       	out	0x18, r18	; 24
	sendcmd((a<<4)&0xff);
}

void sendcmd(int b)
{
	PORTB=b;
  ae:	24 e0       	ldi	r18, 0x04	; 4
  b0:	88 0f       	add	r24, r24
  b2:	99 1f       	adc	r25, r25
  b4:	2a 95       	dec	r18
  b6:	e1 f7       	brne	.-8      	; 0xb0 <div_cmd4+0x1e>
  b8:	90 70       	andi	r25, 0x00	; 0
  ba:	88 bb       	out	0x18, r24	; 24
	PORTB+=4;
  bc:	88 b3       	in	r24, 0x18	; 24
  be:	8c 5f       	subi	r24, 0xFC	; 252
  c0:	88 bb       	out	0x18, r24	; 24
  c2:	ca 01       	movw	r24, r20
  c4:	01 97       	sbiw	r24, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <div_cmd4+0x32>
	_delay_ms(1);
	PORTB-=4;
  c8:	88 b3       	in	r24, 0x18	; 24
  ca:	84 50       	subi	r24, 0x04	; 4
  cc:	88 bb       	out	0x18, r24	; 24

void div_cmd4(int a)
{
	sendcmd(a&0xff);
	sendcmd((a<<4)&0xff);
}
  ce:	08 95       	ret

000000d0 <lcd>:
PORTB=0X05;
}
}

void lcd(void)
{
  d0:	82 e0       	ldi	r24, 0x02	; 2
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	0e 94 49 00 	call	0x92	; 0x92 <div_cmd4>
	div_cmd4(0x02);
	div_cmd4(0x28);
  d8:	88 e2       	ldi	r24, 0x28	; 40
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 49 00 	call	0x92	; 0x92 <div_cmd4>
	div_cmd4(0x0c);
  e0:	8c e0       	ldi	r24, 0x0C	; 12
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 49 00 	call	0x92	; 0x92 <div_cmd4>
	div_cmd4(0x06);
  e8:	86 e0       	ldi	r24, 0x06	; 6
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 49 00 	call	0x92	; 0x92 <div_cmd4>
}
  f0:	08 95       	ret

000000f2 <sendcmd>:
	sendcmd(a&0xff);
	sendcmd((a<<4)&0xff);
}

void sendcmd(int b)
{
  f2:	88 bb       	out	0x18, r24	; 24
	PORTB=b;
	PORTB+=4;
  f4:	88 b3       	in	r24, 0x18	; 24
  f6:	8c 5f       	subi	r24, 0xFC	; 252
  f8:	88 bb       	out	0x18, r24	; 24
  fa:	8a ef       	ldi	r24, 0xFA	; 250
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <sendcmd+0xc>
	_delay_ms(1);
	PORTB-=4;
 102:	88 b3       	in	r24, 0x18	; 24
 104:	84 50       	subi	r24, 0x04	; 4
 106:	88 bb       	out	0x18, r24	; 24
}
 108:	08 95       	ret

0000010a <div_data4>:

void div_data4(int c)
{
 10a:	9c 01       	movw	r18, r24
 10c:	30 70       	andi	r19, 0x00	; 0
 10e:	28 bb       	out	0x18, r18	; 24
}

void senddata(int d)
{
	PORTB=d;
	PORTB+=5;
 110:	28 b3       	in	r18, 0x18	; 24
 112:	2b 5f       	subi	r18, 0xFB	; 251
 114:	28 bb       	out	0x18, r18	; 24
 116:	4a ef       	ldi	r20, 0xFA	; 250
 118:	50 e0       	ldi	r21, 0x00	; 0
 11a:	fa 01       	movw	r30, r20
 11c:	31 97       	sbiw	r30, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <div_data4+0x12>
	_delay_ms(1);
	PORTB-=4;
 120:	28 b3       	in	r18, 0x18	; 24
 122:	24 50       	subi	r18, 0x04	; 4
 124:	28 bb       	out	0x18, r18	; 24
	senddata((c<<4)&0xff);
}

void senddata(int d)
{
	PORTB=d;
 126:	34 e0       	ldi	r19, 0x04	; 4
 128:	88 0f       	add	r24, r24
 12a:	99 1f       	adc	r25, r25
 12c:	3a 95       	dec	r19
 12e:	e1 f7       	brne	.-8      	; 0x128 <div_data4+0x1e>
 130:	90 70       	andi	r25, 0x00	; 0
 132:	88 bb       	out	0x18, r24	; 24
	PORTB+=5;
 134:	88 b3       	in	r24, 0x18	; 24
 136:	8b 5f       	subi	r24, 0xFB	; 251
 138:	88 bb       	out	0x18, r24	; 24
 13a:	ca 01       	movw	r24, r20
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <div_data4+0x32>
	_delay_ms(1);
	PORTB-=4;
 140:	88 b3       	in	r24, 0x18	; 24
 142:	84 50       	subi	r24, 0x04	; 4
 144:	88 bb       	out	0x18, r24	; 24

void div_data4(int c)
{
	senddata(c&0xff);
	senddata((c<<4)&0xff);
}
 146:	08 95       	ret

00000148 <main>:
void div_cmd4(int);
void div_data4(int);
void sendcmd(int);
void senddata(int);
main()
{
 148:	8f ef       	ldi	r24, 0xFF	; 255
 14a:	87 bb       	out	0x17, r24	; 23
DDRB=0xFF;
DDRD=0xFF;
 14c:	81 bb       	out	0x11, r24	; 17
char *str="Front";
while(1)
{
int i=0;
PORTB=0x0A;
 14e:	8a e0       	ldi	r24, 0x0A	; 10
 150:	88 bb       	out	0x18, r24	; 24
div_cmd4(0x80);
 152:	80 e8       	ldi	r24, 0x80	; 128
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	0e 94 49 00 	call	0x92	; 0x92 <div_cmd4>
while(str[i]!='/0')
{
	div_data4(str[i]);
 15a:	86 e4       	ldi	r24, 0x46	; 70
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	0e 94 85 00 	call	0x10a	; 0x10a <div_data4>
 162:	fb cf       	rjmp	.-10     	; 0x15a <main+0x12>

00000164 <senddata>:
	senddata(c&0xff);
	senddata((c<<4)&0xff);
}

void senddata(int d)
{
 164:	88 bb       	out	0x18, r24	; 24
	PORTB=d;
	PORTB+=5;
 166:	88 b3       	in	r24, 0x18	; 24
 168:	8b 5f       	subi	r24, 0xFB	; 251
 16a:	88 bb       	out	0x18, r24	; 24
 16c:	8a ef       	ldi	r24, 0xFA	; 250
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	01 97       	sbiw	r24, 0x01	; 1
 172:	f1 f7       	brne	.-4      	; 0x170 <senddata+0xc>
	_delay_ms(1);
	PORTB-=4;
 174:	88 b3       	in	r24, 0x18	; 24
 176:	84 50       	subi	r24, 0x04	; 4
 178:	88 bb       	out	0x18, r24	; 24
}
 17a:	08 95       	ret

0000017c <_exit>:
 17c:	f8 94       	cli

0000017e <__stop_program>:
 17e:	ff cf       	rjmp	.-2      	; 0x17e <__stop_program>
