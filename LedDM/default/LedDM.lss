
LedDM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001d4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000207  00000000  00000000  00000263  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000ed  00000000  00000000  0000046a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000020c  00000000  00000000  00000557  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000764  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000cc  00000000  00000000  00000784  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000d0  00000000  00000000  00000850  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000060  00000000  00000000  00000920  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ed       	ldi	r30, 0xD4	; 212
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 e8 00 	jmp	0x1d0	; 0x1d0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include<avr/io.h>
#include<util/delay.h>
main()
{
  92:	af 92       	push	r10
  94:	bf 92       	push	r11
  96:	cf 92       	push	r12
  98:	df 92       	push	r13
  9a:	ef 92       	push	r14
  9c:	ff 92       	push	r15
  9e:	0f 93       	push	r16
  a0:	1f 93       	push	r17
  a2:	cf 93       	push	r28
  a4:	df 93       	push	r29
DDRB=0xFF;
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	87 bb       	out	0x17, r24	; 23
DDRD=0xFF;
  aa:	81 bb       	out	0x11, r24	; 17
while(1)
{
int x=0x01,y=0x80,u=128,v=1,t=50;
PORTB=x;
  ac:	41 e0       	ldi	r20, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ae:	e4 ed       	ldi	r30, 0xD4	; 212
  b0:	ae 2e       	mov	r10, r30
  b2:	e0 e3       	ldi	r30, 0x30	; 48
  b4:	be 2e       	mov	r11, r30
  b6:	48 bb       	out	0x18, r20	; 24
  b8:	c0 e8       	ldi	r28, 0x80	; 128
  ba:	d0 e0       	ldi	r29, 0x00	; 0
  bc:	e1 e0       	ldi	r30, 0x01	; 1
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	00 e8       	ldi	r16, 0x80	; 128
  c2:	10 e0       	ldi	r17, 0x00	; 0
  c4:	71 e0       	ldi	r23, 0x01	; 1
  c6:	e7 2e       	mov	r14, r23
  c8:	f1 2c       	mov	r15, r1
  ca:	cc 24       	eor	r12, r12
  cc:	dd 24       	eor	r13, r13
  ce:	0b c0       	rjmp	.+22     	; 0xe6 <main+0x54>
for(int z=0;z<=3;z++)
{
while(y>=v)
{
	PORTD=~y;
  d0:	9e 01       	movw	r18, r28
  d2:	20 95       	com	r18
  d4:	22 bb       	out	0x12, r18	; 18
  d6:	c5 01       	movw	r24, r10
  d8:	01 97       	sbiw	r24, 0x01	; 1
  da:	f1 f7       	brne	.-4      	; 0xd8 <main+0x46>
	_delay_ms(t);
	if(y!=v)
  dc:	ce 15       	cp	r28, r14
  de:	df 05       	cpc	r29, r15
  e0:	29 f0       	breq	.+10     	; 0xec <main+0x5a>
	{
		y>>=1;
  e2:	d5 95       	asr	r29
  e4:	c7 95       	ror	r28
{
int x=0x01,y=0x80,u=128,v=1,t=50;
PORTB=x;
for(int z=0;z<=3;z++)
{
while(y>=v)
  e6:	ce 15       	cp	r28, r14
  e8:	df 05       	cpc	r29, r15
  ea:	94 f7       	brge	.-28     	; 0xd0 <main+0x3e>
		y>>=1;
	}
	else
		break;
}
if (z==0) x=x*2;
  ec:	c1 14       	cp	r12, r1
  ee:	d1 04       	cpc	r13, r1
  f0:	51 f4       	brne	.+20     	; 0x106 <main+0x74>
  f2:	07 c0       	rjmp	.+14     	; 0x102 <main+0x70>
while(x<=u)
{
	PORTB=x;
  f4:	e8 bb       	out	0x18, r30	; 24
  f6:	c5 01       	movw	r24, r10
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <main+0x66>
	_delay_ms(t);
	if(x!=u)
  fc:	e0 17       	cp	r30, r16
  fe:	f1 07       	cpc	r31, r17
 100:	79 f0       	breq	.+30     	; 0x120 <main+0x8e>
	x<<=1;
 102:	ee 0f       	add	r30, r30
 104:	ff 1f       	adc	r31, r31
	}
	else
		break;
}
if (z==0) x=x*2;
while(x<=u)
 106:	0e 17       	cp	r16, r30
 108:	1f 07       	cpc	r17, r31
 10a:	a4 f7       	brge	.-24     	; 0xf4 <main+0x62>
 10c:	09 c0       	rjmp	.+18     	; 0x120 <main+0x8e>
	
}
y=y*2;
while(y<=u)
{
	PORTD=~y;
 10e:	9e 01       	movw	r18, r28
 110:	20 95       	com	r18
 112:	22 bb       	out	0x12, r18	; 18
 114:	c5 01       	movw	r24, r10
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <main+0x84>
	_delay_ms(t);
	if (y!=u)
 11a:	c0 17       	cp	r28, r16
 11c:	d1 07       	cpc	r29, r17
 11e:	29 f0       	breq	.+10     	; 0x12a <main+0x98>
	y<<=1;
 120:	cc 0f       	add	r28, r28
 122:	dd 1f       	adc	r29, r29
	else
	break;
	
}
y=y*2;
while(y<=u)
 124:	0c 17       	cp	r16, r28
 126:	1d 07       	cpc	r17, r29
 128:	94 f7       	brge	.-28     	; 0x10e <main+0x7c>
	y<<=1;
	else
	break;
	
}
x=x/2;
 12a:	cf 01       	movw	r24, r30
 12c:	62 e0       	ldi	r22, 0x02	; 2
 12e:	70 e0       	ldi	r23, 0x00	; 0
 130:	0e 94 c1 00 	call	0x182	; 0x182 <__divmodhi4>
 134:	fb 01       	movw	r30, r22
v=v*2;
 136:	ee 0c       	add	r14, r14
 138:	ff 1c       	adc	r15, r15
 13a:	09 c0       	rjmp	.+18     	; 0x14e <main+0xbc>
while(x>=v)
{
	PORTB=x;
 13c:	e8 bb       	out	0x18, r30	; 24
 13e:	c5 01       	movw	r24, r10
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <main+0xae>
	_delay_ms(t);
	if(x!=v)
 144:	ee 15       	cp	r30, r14
 146:	ff 05       	cpc	r31, r15
 148:	29 f0       	breq	.+10     	; 0x154 <main+0xc2>
	x>>=1;
 14a:	f5 95       	asr	r31
 14c:	e7 95       	ror	r30
	break;
	
}
x=x/2;
v=v*2;
while(x>=v)
 14e:	ee 15       	cp	r30, r14
 150:	ff 05       	cpc	r31, r15
 152:	a4 f7       	brge	.-24     	; 0x13c <main+0xaa>
DDRD=0xFF;
while(1)
{
int x=0x01,y=0x80,u=128,v=1,t=50;
PORTB=x;
for(int z=0;z<=3;z++)
 154:	08 94       	sec
 156:	c1 1c       	adc	r12, r1
 158:	d1 1c       	adc	r13, r1
 15a:	34 e0       	ldi	r19, 0x04	; 4
 15c:	c3 16       	cp	r12, r19
 15e:	d1 04       	cpc	r13, r1
 160:	09 f4       	brne	.+2      	; 0x164 <main+0xd2>
 162:	a9 cf       	rjmp	.-174    	; 0xb6 <main+0x24>
	if(x!=v)
	x>>=1;
	else
	break;
}
y=y/2;
 164:	ce 01       	movw	r24, r28
 166:	62 e0       	ldi	r22, 0x02	; 2
 168:	70 e0       	ldi	r23, 0x00	; 0
 16a:	0e 94 c1 00 	call	0x182	; 0x182 <__divmodhi4>
 16e:	eb 01       	movw	r28, r22
x=x*2;
 170:	ee 0f       	add	r30, r30
 172:	ff 1f       	adc	r31, r31
u=u/2;	
 174:	c8 01       	movw	r24, r16
 176:	62 e0       	ldi	r22, 0x02	; 2
 178:	70 e0       	ldi	r23, 0x00	; 0
 17a:	0e 94 c1 00 	call	0x182	; 0x182 <__divmodhi4>
 17e:	8b 01       	movw	r16, r22
 180:	b2 cf       	rjmp	.-156    	; 0xe6 <main+0x54>

00000182 <__divmodhi4>:
 182:	97 fb       	bst	r25, 7
 184:	09 2e       	mov	r0, r25
 186:	07 26       	eor	r0, r23
 188:	0a d0       	rcall	.+20     	; 0x19e <__divmodhi4_neg1>
 18a:	77 fd       	sbrc	r23, 7
 18c:	04 d0       	rcall	.+8      	; 0x196 <__divmodhi4_neg2>
 18e:	0c d0       	rcall	.+24     	; 0x1a8 <__udivmodhi4>
 190:	06 d0       	rcall	.+12     	; 0x19e <__divmodhi4_neg1>
 192:	00 20       	and	r0, r0
 194:	1a f4       	brpl	.+6      	; 0x19c <__divmodhi4_exit>

00000196 <__divmodhi4_neg2>:
 196:	70 95       	com	r23
 198:	61 95       	neg	r22
 19a:	7f 4f       	sbci	r23, 0xFF	; 255

0000019c <__divmodhi4_exit>:
 19c:	08 95       	ret

0000019e <__divmodhi4_neg1>:
 19e:	f6 f7       	brtc	.-4      	; 0x19c <__divmodhi4_exit>
 1a0:	90 95       	com	r25
 1a2:	81 95       	neg	r24
 1a4:	9f 4f       	sbci	r25, 0xFF	; 255
 1a6:	08 95       	ret

000001a8 <__udivmodhi4>:
 1a8:	aa 1b       	sub	r26, r26
 1aa:	bb 1b       	sub	r27, r27
 1ac:	51 e1       	ldi	r21, 0x11	; 17
 1ae:	07 c0       	rjmp	.+14     	; 0x1be <__udivmodhi4_ep>

000001b0 <__udivmodhi4_loop>:
 1b0:	aa 1f       	adc	r26, r26
 1b2:	bb 1f       	adc	r27, r27
 1b4:	a6 17       	cp	r26, r22
 1b6:	b7 07       	cpc	r27, r23
 1b8:	10 f0       	brcs	.+4      	; 0x1be <__udivmodhi4_ep>
 1ba:	a6 1b       	sub	r26, r22
 1bc:	b7 0b       	sbc	r27, r23

000001be <__udivmodhi4_ep>:
 1be:	88 1f       	adc	r24, r24
 1c0:	99 1f       	adc	r25, r25
 1c2:	5a 95       	dec	r21
 1c4:	a9 f7       	brne	.-22     	; 0x1b0 <__udivmodhi4_loop>
 1c6:	80 95       	com	r24
 1c8:	90 95       	com	r25
 1ca:	bc 01       	movw	r22, r24
 1cc:	cd 01       	movw	r24, r26
 1ce:	08 95       	ret

000001d0 <_exit>:
 1d0:	f8 94       	cli

000001d2 <__stop_program>:
 1d2:	ff cf       	rjmp	.-2      	; 0x1d2 <__stop_program>
