
Temp_Sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002d6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  000002d6  0000034a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  0000035e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000083  00000000  00000000  0000037e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000003b4  00000000  00000000  00000401  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000171  00000000  00000000  000007b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000003c2  00000000  00000000  00000926  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000a0  00000000  00000000  00000ce8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000133  00000000  00000000  00000d88  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000240  00000000  00000000  00000ebb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000a8  00000000  00000000  000010fb  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ed       	ldi	r30, 0xD6	; 214
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a4 e7       	ldi	r26, 0x74	; 116
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 37       	cpi	r26, 0x74	; 116
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <main>
  8a:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <sendcmd>:
	senddata(b&0xF0);//First 4 bits
	senddata((b<<4)&0xF0);//Next 4
	_delay_ms(1);
}
void sendcmd(int c)
{
  92:	85 bb       	out	0x15, r24	; 21
	PORTC=c;
	PORTC+=4;
  94:	85 b3       	in	r24, 0x15	; 21
  96:	8c 5f       	subi	r24, 0xFC	; 252
  98:	85 bb       	out	0x15, r24	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9a:	8a ef       	ldi	r24, 0xFA	; 250
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <sendcmd+0xc>
	_delay_ms(1);
	PORTC-=4;
  a2:	85 b3       	in	r24, 0x15	; 21
  a4:	84 50       	subi	r24, 0x04	; 4
  a6:	85 bb       	out	0x15, r24	; 21
}
  a8:	08 95       	ret

000000aa <divcmd>:
	divcmd(0x28);//4 bit mode
	divcmd(0x06);//Increment Mode
	divcmd(0x0c);//Display on cursor off
}
void divcmd(int b)
{
  aa:	0f 93       	push	r16
  ac:	1f 93       	push	r17
  ae:	8c 01       	movw	r16, r24
	sendcmd(b&0xF0);//First 4 bits
  b0:	80 7f       	andi	r24, 0xF0	; 240
  b2:	90 70       	andi	r25, 0x00	; 0
  b4:	0e 94 49 00 	call	0x92	; 0x92 <sendcmd>
	sendcmd((b<<4)&0xF0);//Next 4
  b8:	84 e0       	ldi	r24, 0x04	; 4
  ba:	00 0f       	add	r16, r16
  bc:	11 1f       	adc	r17, r17
  be:	8a 95       	dec	r24
  c0:	e1 f7       	brne	.-8      	; 0xba <divcmd+0x10>
  c2:	c8 01       	movw	r24, r16
  c4:	90 70       	andi	r25, 0x00	; 0
  c6:	0e 94 49 00 	call	0x92	; 0x92 <sendcmd>
  ca:	8a ef       	ldi	r24, 0xFA	; 250
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <divcmd+0x24>
	_delay_ms(1);
}
  d2:	1f 91       	pop	r17
  d4:	0f 91       	pop	r16
  d6:	08 95       	ret

000000d8 <lcdstr>:
void lcdstr(void)
{
  d8:	82 e0       	ldi	r24, 0x02	; 2
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
	divcmd(0x02);//Home position Initialization with dividing function
	divcmd(0x28);//4 bit mode
  e0:	88 e2       	ldi	r24, 0x28	; 40
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
	divcmd(0x06);//Increment Mode
  e8:	86 e0       	ldi	r24, 0x06	; 6
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
	divcmd(0x0c);//Display on cursor off
  f0:	8c e0       	ldi	r24, 0x0C	; 12
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
}
  f8:	08 95       	ret

000000fa <senddata>:
	PORTC+=4;
	_delay_ms(1);
	PORTC-=4;
}
void senddata(int c)
{
  fa:	85 bb       	out	0x15, r24	; 21
	PORTC=c;
	PORTC+=5;
  fc:	85 b3       	in	r24, 0x15	; 21
  fe:	8b 5f       	subi	r24, 0xFB	; 251
 100:	85 bb       	out	0x15, r24	; 21
 102:	8a ef       	ldi	r24, 0xFA	; 250
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <senddata+0xc>
	_delay_ms(1);
	PORTC-=4;
 10a:	85 b3       	in	r24, 0x15	; 21
 10c:	84 50       	subi	r24, 0x04	; 4
 10e:	85 bb       	out	0x15, r24	; 21
}
 110:	08 95       	ret

00000112 <divdata>:
	sendcmd(b&0xF0);//First 4 bits
	sendcmd((b<<4)&0xF0);//Next 4
	_delay_ms(1);
}
void divdata(int b)
{
 112:	0f 93       	push	r16
 114:	1f 93       	push	r17
 116:	8c 01       	movw	r16, r24
	senddata(b&0xF0);//First 4 bits
 118:	80 7f       	andi	r24, 0xF0	; 240
 11a:	90 70       	andi	r25, 0x00	; 0
 11c:	0e 94 7d 00 	call	0xfa	; 0xfa <senddata>
	senddata((b<<4)&0xF0);//Next 4
 120:	94 e0       	ldi	r25, 0x04	; 4
 122:	00 0f       	add	r16, r16
 124:	11 1f       	adc	r17, r17
 126:	9a 95       	dec	r25
 128:	e1 f7       	brne	.-8      	; 0x122 <divdata+0x10>
 12a:	c8 01       	movw	r24, r16
 12c:	90 70       	andi	r25, 0x00	; 0
 12e:	0e 94 7d 00 	call	0xfa	; 0xfa <senddata>
 132:	8a ef       	ldi	r24, 0xFA	; 250
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <divdata+0x24>
	_delay_ms(1);
}
 13a:	1f 91       	pop	r17
 13c:	0f 91       	pop	r16
 13e:	08 95       	ret

00000140 <disp_string>:
	_delay_ms(1);
	PORTC-=4;
}

void disp_string(char *str, int pos)
{
 140:	0f 93       	push	r16
 142:	1f 93       	push	r17
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
 148:	18 2f       	mov	r17, r24
 14a:	09 2f       	mov	r16, r25
 14c:	cb 01       	movw	r24, r22
	int i=0;
	divcmd(pos);
 14e:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
 152:	21 2f       	mov	r18, r17
 154:	30 2f       	mov	r19, r16
 156:	c9 01       	movw	r24, r18
 158:	ec 01       	movw	r28, r24
 15a:	03 c0       	rjmp	.+6      	; 0x162 <disp_string+0x22>
	while(str[i]!='\0')
	{
		divdata(str[i]);
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	0e 94 89 00 	call	0x112	; 0x112 <divdata>

void disp_string(char *str, int pos)
{
	int i=0;
	divcmd(pos);
	while(str[i]!='\0')
 162:	89 91       	ld	r24, Y+
 164:	88 23       	and	r24, r24
 166:	d1 f7       	brne	.-12     	; 0x15c <disp_string+0x1c>
	{
		divdata(str[i]);
		i++;
	}

}
 168:	df 91       	pop	r29
 16a:	cf 91       	pop	r28
 16c:	1f 91       	pop	r17
 16e:	0f 91       	pop	r16
 170:	08 95       	ret

00000172 <disp_number>:

void disp_number(unsigned int x,int y)
{
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
 176:	ec 01       	movw	r28, r24
 178:	cb 01       	movw	r24, r22
	unsigned int i;
	i=x;
	divcmd(y);
 17a:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
	if(i<0)
	{
           i=i*-1;
           }
           
	if(i==0)
 17e:	20 97       	sbiw	r28, 0x00	; 0
 180:	c9 f4       	brne	.+50     	; 0x1b4 <disp_number+0x42>
	{
		divdata(48);
 182:	80 e3       	ldi	r24, 0x30	; 48
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	0e 94 89 00 	call	0x112	; 0x112 <divdata>
 18a:	c0 e0       	ldi	r28, 0x00	; 0
 18c:	d0 e0       	ldi	r29, 0x00	; 0
 18e:	12 c0       	rjmp	.+36     	; 0x1b4 <disp_number+0x42>
	}
	while(i>0)
	{
		divcmd(0x04);
 190:	84 e0       	ldi	r24, 0x04	; 4
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
		divdata((i%10)+48);
 198:	ce 01       	movw	r24, r28
 19a:	6a e0       	ldi	r22, 0x0A	; 10
 19c:	70 e0       	ldi	r23, 0x00	; 0
 19e:	0e 94 42 01 	call	0x284	; 0x284 <__udivmodhi4>
 1a2:	c0 96       	adiw	r24, 0x30	; 48
 1a4:	0e 94 89 00 	call	0x112	; 0x112 <divdata>
		i=i/10;
 1a8:	ce 01       	movw	r24, r28
 1aa:	6a e0       	ldi	r22, 0x0A	; 10
 1ac:	70 e0       	ldi	r23, 0x00	; 0
 1ae:	0e 94 42 01 	call	0x284	; 0x284 <__udivmodhi4>
 1b2:	eb 01       	movw	r28, r22
           
	if(i==0)
	{
		divdata(48);
	}
	while(i>0)
 1b4:	20 97       	sbiw	r28, 0x00	; 0
 1b6:	61 f7       	brne	.-40     	; 0x190 <disp_number+0x1e>
	{
		divcmd(0x04);
		divdata((i%10)+48);
		i=i/10;
	}
}
 1b8:	df 91       	pop	r29
 1ba:	cf 91       	pop	r28
 1bc:	08 95       	ret

000001be <ADC_read>:
#include<avr/io.h>
#include<util/delay.h>
#include<string.h>
#include<mars/lcdd.h>
int ADC_read(int chn)
{
 1be:	80 64       	ori	r24, 0x40	; 64
 1c0:	87 b9       	out	0x07, r24	; 7
	ADMUX=chn|0x40;//(1<<REFSO)|(0<<REFS1)
	ADCSRA=0xd7;
 1c2:	87 ed       	ldi	r24, 0xD7	; 215
 1c4:	86 b9       	out	0x06, r24	; 6
	while((ADCSRA&0x10)==0);
 1c6:	34 9b       	sbis	0x06, 4	; 6
 1c8:	fe cf       	rjmp	.-4      	; 0x1c6 <ADC_read+0x8>
	return ADC;
 1ca:	24 b1       	in	r18, 0x04	; 4
 1cc:	35 b1       	in	r19, 0x05	; 5

}
 1ce:	c9 01       	movw	r24, r18
 1d0:	08 95       	ret

000001d2 <main>:
main()
{
 1d2:	bf 92       	push	r11
 1d4:	cf 92       	push	r12
 1d6:	df 92       	push	r13
 1d8:	ef 92       	push	r14
 1da:	ff 92       	push	r15
 1dc:	0f 93       	push	r16
 1de:	1f 93       	push	r17
 1e0:	cf 93       	push	r28
 1e2:	df 93       	push	r29
	DDRC=0xFF;
 1e4:	8f ef       	ldi	r24, 0xFF	; 255
 1e6:	84 bb       	out	0x14, r24	; 20
	DDRA=0xFE;
 1e8:	8e ef       	ldi	r24, 0xFE	; 254
 1ea:	8a bb       	out	0x1a, r24	; 26
	lcdstr();
 1ec:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcdstr>
	divcmd(0x01);
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
#include<util/delay.h>
#include<string.h>
#include<mars/lcdd.h>
int ADC_read(int chn)
{
	ADMUX=chn|0x40;//(1<<REFSO)|(0<<REFS1)
 1f8:	50 e4       	ldi	r21, 0x40	; 64
 1fa:	b5 2e       	mov	r11, r21
	ADCSRA=0xd7;
 1fc:	47 ed       	ldi	r20, 0xD7	; 215
 1fe:	c4 2e       	mov	r12, r20
 200:	39 e1       	ldi	r19, 0x19	; 25
 202:	e3 2e       	mov	r14, r19
 204:	f1 2c       	mov	r15, r1
		disp_number(z,0xc5);
		disp_number(x,0xc7);
		_delay_ms(500);
		if(z>=40)
		{
			PORTC=0x08;
 206:	28 e0       	ldi	r18, 0x08	; 8
 208:	d2 2e       	mov	r13, r18
 20a:	00 e5       	ldi	r16, 0x50	; 80
 20c:	13 ec       	ldi	r17, 0xC3	; 195
	lcdstr();
	divcmd(0x01);
	int chn=0,z,x;
	while(1)
	{
		divcmd(0x01);
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
#include<util/delay.h>
#include<string.h>
#include<mars/lcdd.h>
int ADC_read(int chn)
{
	ADMUX=chn|0x40;//(1<<REFSO)|(0<<REFS1)
 216:	b7 b8       	out	0x07, r11	; 7
	ADCSRA=0xd7;
 218:	c6 b8       	out	0x06, r12	; 6
	while((ADCSRA&0x10)==0);
 21a:	34 9b       	sbis	0x06, 4	; 6
 21c:	fe cf       	rjmp	.-4      	; 0x21a <main+0x48>
	return ADC;
 21e:	24 b1       	in	r18, 0x04	; 4
 220:	35 b1       	in	r19, 0x05	; 5
	int chn=0,z,x;
	while(1)
	{
		divcmd(0x01);
		z=ADC_read(chn);
		z=z/2;
 222:	c9 01       	movw	r24, r18
 224:	62 e0       	ldi	r22, 0x02	; 2
 226:	70 e0       	ldi	r23, 0x00	; 0
 228:	0e 94 56 01 	call	0x2ac	; 0x2ac <__divmodhi4>
 22c:	eb 01       	movw	r28, r22
		x=z%2;
		if(x!=0);
		{
			x=5;
		}
		disp_string("Digital_Thermo",0x80);
 22e:	60 e8       	ldi	r22, 0x80	; 128
 230:	70 e0       	ldi	r23, 0x00	; 0
 232:	80 e6       	ldi	r24, 0x60	; 96
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	0e 94 a0 00 	call	0x140	; 0x140 <disp_string>
		disp_string(".",0xc6);
 23a:	66 ec       	ldi	r22, 0xC6	; 198
 23c:	70 e0       	ldi	r23, 0x00	; 0
 23e:	8f e6       	ldi	r24, 0x6F	; 111
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	0e 94 a0 00 	call	0x140	; 0x140 <disp_string>
		disp_string("'C",0xc9);
 246:	69 ec       	ldi	r22, 0xC9	; 201
 248:	70 e0       	ldi	r23, 0x00	; 0
 24a:	81 e7       	ldi	r24, 0x71	; 113
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	0e 94 a0 00 	call	0x140	; 0x140 <disp_string>
		disp_number(z,0xc5);
 252:	65 ec       	ldi	r22, 0xC5	; 197
 254:	70 e0       	ldi	r23, 0x00	; 0
 256:	ce 01       	movw	r24, r28
 258:	0e 94 b9 00 	call	0x172	; 0x172 <disp_number>
		disp_number(x,0xc7);
 25c:	67 ec       	ldi	r22, 0xC7	; 199
 25e:	70 e0       	ldi	r23, 0x00	; 0
 260:	85 e0       	ldi	r24, 0x05	; 5
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	0e 94 b9 00 	call	0x172	; 0x172 <disp_number>
 268:	88 e8       	ldi	r24, 0x88	; 136
 26a:	93 e1       	ldi	r25, 0x13	; 19
 26c:	f7 01       	movw	r30, r14
 26e:	31 97       	sbiw	r30, 0x01	; 1
 270:	f1 f7       	brne	.-4      	; 0x26e <main+0x9c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 272:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 274:	d9 f7       	brne	.-10     	; 0x26c <main+0x9a>
		_delay_ms(500);
		if(z>=40)
 276:	a8 97       	sbiw	r28, 0x28	; 40
 278:	54 f2       	brlt	.-108    	; 0x20e <main+0x3c>
		{
			PORTC=0x08;
 27a:	d5 ba       	out	0x15, r13	; 21
 27c:	c8 01       	movw	r24, r16
 27e:	01 97       	sbiw	r24, 0x01	; 1
 280:	f1 f7       	brne	.-4      	; 0x27e <main+0xac>
 282:	c5 cf       	rjmp	.-118    	; 0x20e <main+0x3c>

00000284 <__udivmodhi4>:
 284:	aa 1b       	sub	r26, r26
 286:	bb 1b       	sub	r27, r27
 288:	51 e1       	ldi	r21, 0x11	; 17
 28a:	07 c0       	rjmp	.+14     	; 0x29a <__udivmodhi4_ep>

0000028c <__udivmodhi4_loop>:
 28c:	aa 1f       	adc	r26, r26
 28e:	bb 1f       	adc	r27, r27
 290:	a6 17       	cp	r26, r22
 292:	b7 07       	cpc	r27, r23
 294:	10 f0       	brcs	.+4      	; 0x29a <__udivmodhi4_ep>
 296:	a6 1b       	sub	r26, r22
 298:	b7 0b       	sbc	r27, r23

0000029a <__udivmodhi4_ep>:
 29a:	88 1f       	adc	r24, r24
 29c:	99 1f       	adc	r25, r25
 29e:	5a 95       	dec	r21
 2a0:	a9 f7       	brne	.-22     	; 0x28c <__udivmodhi4_loop>
 2a2:	80 95       	com	r24
 2a4:	90 95       	com	r25
 2a6:	bc 01       	movw	r22, r24
 2a8:	cd 01       	movw	r24, r26
 2aa:	08 95       	ret

000002ac <__divmodhi4>:
 2ac:	97 fb       	bst	r25, 7
 2ae:	09 2e       	mov	r0, r25
 2b0:	07 26       	eor	r0, r23
 2b2:	0a d0       	rcall	.+20     	; 0x2c8 <__divmodhi4_neg1>
 2b4:	77 fd       	sbrc	r23, 7
 2b6:	04 d0       	rcall	.+8      	; 0x2c0 <__divmodhi4_neg2>
 2b8:	e5 df       	rcall	.-54     	; 0x284 <__udivmodhi4>
 2ba:	06 d0       	rcall	.+12     	; 0x2c8 <__divmodhi4_neg1>
 2bc:	00 20       	and	r0, r0
 2be:	1a f4       	brpl	.+6      	; 0x2c6 <__divmodhi4_exit>

000002c0 <__divmodhi4_neg2>:
 2c0:	70 95       	com	r23
 2c2:	61 95       	neg	r22
 2c4:	7f 4f       	sbci	r23, 0xFF	; 255

000002c6 <__divmodhi4_exit>:
 2c6:	08 95       	ret

000002c8 <__divmodhi4_neg1>:
 2c8:	f6 f7       	brtc	.-4      	; 0x2c6 <__divmodhi4_exit>
 2ca:	90 95       	com	r25
 2cc:	81 95       	neg	r24
 2ce:	9f 4f       	sbci	r25, 0xFF	; 255
 2d0:	08 95       	ret

000002d2 <_exit>:
 2d2:	f8 94       	cli

000002d4 <__stop_program>:
 2d4:	ff cf       	rjmp	.-2      	; 0x2d4 <__stop_program>
