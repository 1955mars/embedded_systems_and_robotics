
Wall_Foll+Tacho.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000314  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000314  00000388  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  0000038e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000080  00000000  00000000  000003ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000003b2  00000000  00000000  0000042e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000015c  00000000  00000000  000007e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000003f0  00000000  00000000  0000093c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000a0  00000000  00000000  00000d2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000142  00000000  00000000  00000dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000001c8  00000000  00000000  00000f0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000030  00000000  00000000  000010d6  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e1       	ldi	r30, 0x14	; 20
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a6 e6       	ldi	r26, 0x66	; 102
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 36       	cpi	r26, 0x66	; 102
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <main>
  8a:	0c 94 88 01 	jmp	0x310	; 0x310 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <sendcmd>:
	senddata(b&0xF0);//First 4 bits
	senddata((b<<4)&0xF0);//Next 4
	_delay_ms(1);
}
void sendcmd(int c)
{
  92:	85 bb       	out	0x15, r24	; 21
	PORTC=c;
	PORTC+=4;
  94:	85 b3       	in	r24, 0x15	; 21
  96:	8c 5f       	subi	r24, 0xFC	; 252
  98:	85 bb       	out	0x15, r24	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9a:	8a ef       	ldi	r24, 0xFA	; 250
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <sendcmd+0xc>
	_delay_ms(1);
	PORTC-=4;
  a2:	85 b3       	in	r24, 0x15	; 21
  a4:	84 50       	subi	r24, 0x04	; 4
  a6:	85 bb       	out	0x15, r24	; 21
}
  a8:	08 95       	ret

000000aa <divcmd>:
	divcmd(0x28);//4 bit mode
	divcmd(0x06);//Increment Mode
	divcmd(0x0c);//Display on cursor off
}
void divcmd(int b)
{
  aa:	0f 93       	push	r16
  ac:	1f 93       	push	r17
  ae:	8c 01       	movw	r16, r24
	sendcmd(b&0xF0);//First 4 bits
  b0:	80 7f       	andi	r24, 0xF0	; 240
  b2:	90 70       	andi	r25, 0x00	; 0
  b4:	0e 94 49 00 	call	0x92	; 0x92 <sendcmd>
	sendcmd((b<<4)&0xF0);//Next 4
  b8:	84 e0       	ldi	r24, 0x04	; 4
  ba:	00 0f       	add	r16, r16
  bc:	11 1f       	adc	r17, r17
  be:	8a 95       	dec	r24
  c0:	e1 f7       	brne	.-8      	; 0xba <divcmd+0x10>
  c2:	c8 01       	movw	r24, r16
  c4:	90 70       	andi	r25, 0x00	; 0
  c6:	0e 94 49 00 	call	0x92	; 0x92 <sendcmd>
  ca:	8a ef       	ldi	r24, 0xFA	; 250
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <divcmd+0x24>
	_delay_ms(1);
}
  d2:	1f 91       	pop	r17
  d4:	0f 91       	pop	r16
  d6:	08 95       	ret

000000d8 <lcdstr>:
void lcdstr(void)
{
  d8:	82 e0       	ldi	r24, 0x02	; 2
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
	divcmd(0x02);//Home position Initialization with dividing function
	divcmd(0x28);//4 bit mode
  e0:	88 e2       	ldi	r24, 0x28	; 40
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
	divcmd(0x06);//Increment Mode
  e8:	86 e0       	ldi	r24, 0x06	; 6
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
	divcmd(0x0c);//Display on cursor off
  f0:	8c e0       	ldi	r24, 0x0C	; 12
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
}
  f8:	08 95       	ret

000000fa <senddata>:
	PORTC+=4;
	_delay_ms(1);
	PORTC-=4;
}
void senddata(int c)
{
  fa:	85 bb       	out	0x15, r24	; 21
	PORTC=c;
	PORTC+=5;
  fc:	85 b3       	in	r24, 0x15	; 21
  fe:	8b 5f       	subi	r24, 0xFB	; 251
 100:	85 bb       	out	0x15, r24	; 21
 102:	8a ef       	ldi	r24, 0xFA	; 250
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <senddata+0xc>
	_delay_ms(1);
	PORTC-=4;
 10a:	85 b3       	in	r24, 0x15	; 21
 10c:	84 50       	subi	r24, 0x04	; 4
 10e:	85 bb       	out	0x15, r24	; 21
}
 110:	08 95       	ret

00000112 <divdata>:
	sendcmd(b&0xF0);//First 4 bits
	sendcmd((b<<4)&0xF0);//Next 4
	_delay_ms(1);
}
void divdata(int b)
{
 112:	0f 93       	push	r16
 114:	1f 93       	push	r17
 116:	8c 01       	movw	r16, r24
	senddata(b&0xF0);//First 4 bits
 118:	80 7f       	andi	r24, 0xF0	; 240
 11a:	90 70       	andi	r25, 0x00	; 0
 11c:	0e 94 7d 00 	call	0xfa	; 0xfa <senddata>
	senddata((b<<4)&0xF0);//Next 4
 120:	94 e0       	ldi	r25, 0x04	; 4
 122:	00 0f       	add	r16, r16
 124:	11 1f       	adc	r17, r17
 126:	9a 95       	dec	r25
 128:	e1 f7       	brne	.-8      	; 0x122 <divdata+0x10>
 12a:	c8 01       	movw	r24, r16
 12c:	90 70       	andi	r25, 0x00	; 0
 12e:	0e 94 7d 00 	call	0xfa	; 0xfa <senddata>
 132:	8a ef       	ldi	r24, 0xFA	; 250
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <divdata+0x24>
	_delay_ms(1);
}
 13a:	1f 91       	pop	r17
 13c:	0f 91       	pop	r16
 13e:	08 95       	ret

00000140 <disp_string>:
	_delay_ms(1);
	PORTC-=4;
}

void disp_string(char *str, int pos)
{
 140:	0f 93       	push	r16
 142:	1f 93       	push	r17
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
 148:	18 2f       	mov	r17, r24
 14a:	09 2f       	mov	r16, r25
 14c:	cb 01       	movw	r24, r22
	int i=0;
	divcmd(pos);
 14e:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
 152:	21 2f       	mov	r18, r17
 154:	30 2f       	mov	r19, r16
 156:	c9 01       	movw	r24, r18
 158:	ec 01       	movw	r28, r24
 15a:	03 c0       	rjmp	.+6      	; 0x162 <disp_string+0x22>
	while(str[i]!='\0')
	{
		divdata(str[i]);
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	0e 94 89 00 	call	0x112	; 0x112 <divdata>

void disp_string(char *str, int pos)
{
	int i=0;
	divcmd(pos);
	while(str[i]!='\0')
 162:	89 91       	ld	r24, Y+
 164:	88 23       	and	r24, r24
 166:	d1 f7       	brne	.-12     	; 0x15c <disp_string+0x1c>
	{
		divdata(str[i]);
		i++;
	}

}
 168:	df 91       	pop	r29
 16a:	cf 91       	pop	r28
 16c:	1f 91       	pop	r17
 16e:	0f 91       	pop	r16
 170:	08 95       	ret

00000172 <disp_number>:

void disp_number(unsigned int x,int y)
{
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
 176:	ec 01       	movw	r28, r24
 178:	cb 01       	movw	r24, r22
	unsigned int i;
	i=x;
	divcmd(y);
 17a:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
	if(i<0)
	{
           i=i*-1;
           }
           
	if(i==0)
 17e:	20 97       	sbiw	r28, 0x00	; 0
 180:	c9 f4       	brne	.+50     	; 0x1b4 <disp_number+0x42>
	{
		divdata(48);
 182:	80 e3       	ldi	r24, 0x30	; 48
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	0e 94 89 00 	call	0x112	; 0x112 <divdata>
 18a:	c0 e0       	ldi	r28, 0x00	; 0
 18c:	d0 e0       	ldi	r29, 0x00	; 0
 18e:	12 c0       	rjmp	.+36     	; 0x1b4 <disp_number+0x42>
	}
	while(i>0)
	{
		divcmd(0x04);
 190:	84 e0       	ldi	r24, 0x04	; 4
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
		divdata((i%10)+48);
 198:	ce 01       	movw	r24, r28
 19a:	6a e0       	ldi	r22, 0x0A	; 10
 19c:	70 e0       	ldi	r23, 0x00	; 0
 19e:	0e 94 74 01 	call	0x2e8	; 0x2e8 <__udivmodhi4>
 1a2:	c0 96       	adiw	r24, 0x30	; 48
 1a4:	0e 94 89 00 	call	0x112	; 0x112 <divdata>
		i=i/10;
 1a8:	ce 01       	movw	r24, r28
 1aa:	6a e0       	ldi	r22, 0x0A	; 10
 1ac:	70 e0       	ldi	r23, 0x00	; 0
 1ae:	0e 94 74 01 	call	0x2e8	; 0x2e8 <__udivmodhi4>
 1b2:	eb 01       	movw	r28, r22
           
	if(i==0)
	{
		divdata(48);
	}
	while(i>0)
 1b4:	20 97       	sbiw	r28, 0x00	; 0
 1b6:	61 f7       	brne	.-40     	; 0x190 <disp_number+0x1e>
	{
		divcmd(0x04);
		divdata((i%10)+48);
		i=i/10;
	}
}
 1b8:	df 91       	pop	r29
 1ba:	cf 91       	pop	r28
 1bc:	08 95       	ret

000001be <clear>:
void clear(void)
{
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
     divcmd(0x01);
}
 1c6:	08 95       	ret

000001c8 <main>:
#include<avr/io.h>
#include<util/delay.h>
#include<mars/lcdd.h>
#include<string.h>
main()
{
 1c8:	6f 92       	push	r6
 1ca:	7f 92       	push	r7
 1cc:	8f 92       	push	r8
 1ce:	9f 92       	push	r9
 1d0:	af 92       	push	r10
 1d2:	bf 92       	push	r11
 1d4:	cf 92       	push	r12
 1d6:	df 92       	push	r13
 1d8:	ef 92       	push	r14
 1da:	ff 92       	push	r15
 1dc:	0f 93       	push	r16
 1de:	1f 93       	push	r17
 1e0:	df 93       	push	r29
 1e2:	cf 93       	push	r28
 1e4:	cd b7       	in	r28, 0x3d	; 61
 1e6:	de b7       	in	r29, 0x3e	; 62
 1e8:	64 97       	sbiw	r28, 0x14	; 20
 1ea:	0f b6       	in	r0, 0x3f	; 63
 1ec:	f8 94       	cli
 1ee:	de bf       	out	0x3e, r29	; 62
 1f0:	0f be       	out	0x3f, r0	; 63
 1f2:	cd bf       	out	0x3d, r28	; 61
	DDRB=0xFF;
 1f4:	8f ef       	ldi	r24, 0xFF	; 255
 1f6:	87 bb       	out	0x17, r24	; 23
	DDRA=0xFC;
 1f8:	9c ef       	ldi	r25, 0xFC	; 252
 1fa:	9a bb       	out	0x1a, r25	; 26
	DDRC=0xFF;
 1fc:	84 bb       	out	0x14, r24	; 20
	lcdstr();
 1fe:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcdstr>
	clear();
 202:	0e 94 df 00 	call	0x1be	; 0x1be <clear>
	PORTB=10;
 206:	8a e0       	ldi	r24, 0x0A	; 10
 208:	88 bb       	out	0x18, r24	; 24
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	fe 01       	movw	r30, r28
 210:	31 96       	adiw	r30, 0x01	; 1
 212:	03 c0       	rjmp	.+6      	; 0x21a <main+0x52>
	int rot=0,area[10],z=0,dist=0,total,h=0,f3=0;
	for(int i ;i<10;i++)
	{	area[i]=0;	}
 214:	11 92       	st	Z+, r1
 216:	11 92       	st	Z+, r1
	DDRC=0xFF;
	lcdstr();
	clear();
	PORTB=10;
	int rot=0,area[10],z=0,dist=0,total,h=0,f3=0;
	for(int i ;i<10;i++)
 218:	01 96       	adiw	r24, 0x01	; 1
 21a:	8a 30       	cpi	r24, 0x0A	; 10
 21c:	91 05       	cpc	r25, r1
 21e:	d4 f3       	brlt	.-12     	; 0x214 <main+0x4c>
			{
				disp_number(h,0x8B);
			}
			for(int j=0,h=4;j<=z;j++)
			{
				disp_number(area[j],0xc0+h);
 220:	a9 80       	ldd	r10, Y+1	; 0x01
 222:	ba 80       	ldd	r11, Y+2	; 0x02
 224:	00 e0       	ldi	r16, 0x00	; 0
 226:	10 e0       	ldi	r17, 0x00	; 0
 228:	cc 24       	eor	r12, r12
 22a:	dd 24       	eor	r13, r13
 22c:	ee 24       	eor	r14, r14
 22e:	ff 24       	eor	r15, r15
			}
	
		}
		if(PINA==2||PINA==3)
		{
			PORTB=6;
 230:	56 e0       	ldi	r21, 0x06	; 6
 232:	65 2e       	mov	r6, r21
			DDRA=0xFE;
 234:	4e ef       	ldi	r20, 0xFE	; 254
 236:	74 2e       	mov	r7, r20
				{
					while(PINA==1);
					k=k+1;
				}
			}
			DDRA=0xFC;
 238:	3c ef       	ldi	r19, 0xFC	; 252
 23a:	83 2e       	mov	r8, r19
			PORTB=10;
 23c:	2a e0       	ldi	r18, 0x0A	; 10
 23e:	92 2e       	mov	r9, r18
	int rot=0,area[10],z=0,dist=0,total,h=0,f3=0;
	for(int i ;i<10;i++)
	{	area[i]=0;	}
	while(1)
	{
		if(PINA==1)
 240:	89 b3       	in	r24, 0x19	; 25
 242:	81 30       	cpi	r24, 0x01	; 1
 244:	69 f5       	brne	.+90     	; 0x2a0 <main+0xd8>
		{
			while(PINA==1);
 246:	89 b3       	in	r24, 0x19	; 25
 248:	81 30       	cpi	r24, 0x01	; 1
 24a:	e9 f3       	breq	.-6      	; 0x246 <main+0x7e>
			rot++;
 24c:	0f 5f       	subi	r16, 0xFF	; 255
 24e:	1f 4f       	sbci	r17, 0xFF	; 255
			f3++;
			total=rot;
			dist=rot;
			divcmd(0x01);
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
			disp_string("Dist",0x80);
 258:	60 e8       	ldi	r22, 0x80	; 128
 25a:	70 e0       	ldi	r23, 0x00	; 0
 25c:	80 e6       	ldi	r24, 0x60	; 96
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	0e 94 a0 00 	call	0x140	; 0x140 <disp_string>
			disp_number(total,0x8f);
 264:	6f e8       	ldi	r22, 0x8F	; 143
 266:	70 e0       	ldi	r23, 0x00	; 0
 268:	c8 01       	movw	r24, r16
 26a:	0e 94 b9 00 	call	0x172	; 0x172 <disp_number>
			if(h>0)
 26e:	c1 14       	cp	r12, r1
 270:	d1 04       	cpc	r13, r1
 272:	89 f1       	breq	.+98     	; 0x2d6 <main+0x10e>
			{
				disp_number(h,0x8B);
 274:	6b e8       	ldi	r22, 0x8B	; 139
 276:	70 e0       	ldi	r23, 0x00	; 0
 278:	c6 01       	movw	r24, r12
 27a:	0e 94 b9 00 	call	0x172	; 0x172 <disp_number>
 27e:	2b c0       	rjmp	.+86     	; 0x2d6 <main+0x10e>
			}
			if(total>=100)
			{
				total=0;
				rot=0;
				h++;
 280:	08 94       	sec
 282:	c1 1c       	adc	r12, r1
 284:	d1 1c       	adc	r13, r1
 286:	00 e0       	ldi	r16, 0x00	; 0
 288:	10 e0       	ldi	r17, 0x00	; 0
	{
		if(PINA==1)
		{
			while(PINA==1);
			rot++;
			f3++;
 28a:	08 94       	sec
 28c:	e1 1c       	adc	r14, r1
 28e:	f1 1c       	adc	r15, r1
			{
				total=0;
				rot=0;
				h++;
			}
			if(f3==3)
 290:	83 e0       	ldi	r24, 0x03	; 3
 292:	e8 16       	cp	r14, r24
 294:	f1 04       	cpc	r15, r1
 296:	21 f4       	brne	.+8      	; 0x2a0 <main+0xd8>
			{
				rot++;
 298:	0f 5f       	subi	r16, 0xFF	; 255
 29a:	1f 4f       	sbci	r17, 0xFF	; 255
 29c:	ee 24       	eor	r14, r14
 29e:	ff 24       	eor	r15, r15
				f3=0;
			}
	
		}
		if(PINA==2||PINA==3)
 2a0:	89 b3       	in	r24, 0x19	; 25
 2a2:	82 30       	cpi	r24, 0x02	; 2
 2a4:	19 f0       	breq	.+6      	; 0x2ac <main+0xe4>
 2a6:	89 b3       	in	r24, 0x19	; 25
 2a8:	83 30       	cpi	r24, 0x03	; 3
 2aa:	51 f6       	brne	.-108    	; 0x240 <main+0x78>
		{
			PORTB=6;
 2ac:	68 ba       	out	0x18, r6	; 24
			DDRA=0xFE;
 2ae:	7a ba       	out	0x1a, r7	; 26
			int k=0;
			while(PINA==1);
 2b0:	89 b3       	in	r24, 0x19	; 25
 2b2:	81 30       	cpi	r24, 0x01	; 1
 2b4:	e9 f3       	breq	.-6      	; 0x2b0 <main+0xe8>
 2b6:	20 e0       	ldi	r18, 0x00	; 0
 2b8:	30 e0       	ldi	r19, 0x00	; 0
			while(k<=7)
			{
				if(PINA==1)
 2ba:	89 b3       	in	r24, 0x19	; 25
 2bc:	81 30       	cpi	r24, 0x01	; 1
 2be:	e9 f7       	brne	.-6      	; 0x2ba <main+0xf2>
				{
					while(PINA==1);
 2c0:	89 b3       	in	r24, 0x19	; 25
 2c2:	81 30       	cpi	r24, 0x01	; 1
 2c4:	e9 f3       	breq	.-6      	; 0x2c0 <main+0xf8>
					k=k+1;
 2c6:	2f 5f       	subi	r18, 0xFF	; 255
 2c8:	3f 4f       	sbci	r19, 0xFF	; 255
		{
			PORTB=6;
			DDRA=0xFE;
			int k=0;
			while(PINA==1);
			while(k<=7)
 2ca:	28 30       	cpi	r18, 0x08	; 8
 2cc:	31 05       	cpc	r19, r1
 2ce:	ac f3       	brlt	.-22     	; 0x2ba <main+0xf2>
				{
					while(PINA==1);
					k=k+1;
				}
			}
			DDRA=0xFC;
 2d0:	8a ba       	out	0x1a, r8	; 26
			PORTB=10;
 2d2:	98 ba       	out	0x18, r9	; 24
 2d4:	b5 cf       	rjmp	.-150    	; 0x240 <main+0x78>
			{
				disp_number(h,0x8B);
			}
			for(int j=0,h=4;j<=z;j++)
			{
				disp_number(area[j],0xc0+h);
 2d6:	64 ec       	ldi	r22, 0xC4	; 196
 2d8:	70 e0       	ldi	r23, 0x00	; 0
 2da:	c5 01       	movw	r24, r10
 2dc:	0e 94 b9 00 	call	0x172	; 0x172 <disp_number>
				h+=2;
			}
			if(total>=100)
 2e0:	04 36       	cpi	r16, 0x64	; 100
 2e2:	11 05       	cpc	r17, r1
 2e4:	6c f6       	brge	.-102    	; 0x280 <main+0xb8>
 2e6:	d1 cf       	rjmp	.-94     	; 0x28a <main+0xc2>

000002e8 <__udivmodhi4>:
 2e8:	aa 1b       	sub	r26, r26
 2ea:	bb 1b       	sub	r27, r27
 2ec:	51 e1       	ldi	r21, 0x11	; 17
 2ee:	07 c0       	rjmp	.+14     	; 0x2fe <__udivmodhi4_ep>

000002f0 <__udivmodhi4_loop>:
 2f0:	aa 1f       	adc	r26, r26
 2f2:	bb 1f       	adc	r27, r27
 2f4:	a6 17       	cp	r26, r22
 2f6:	b7 07       	cpc	r27, r23
 2f8:	10 f0       	brcs	.+4      	; 0x2fe <__udivmodhi4_ep>
 2fa:	a6 1b       	sub	r26, r22
 2fc:	b7 0b       	sbc	r27, r23

000002fe <__udivmodhi4_ep>:
 2fe:	88 1f       	adc	r24, r24
 300:	99 1f       	adc	r25, r25
 302:	5a 95       	dec	r21
 304:	a9 f7       	brne	.-22     	; 0x2f0 <__udivmodhi4_loop>
 306:	80 95       	com	r24
 308:	90 95       	com	r25
 30a:	bc 01       	movw	r22, r24
 30c:	cd 01       	movw	r24, r26
 30e:	08 95       	ret

00000310 <_exit>:
 310:	f8 94       	cli

00000312 <__stop_program>:
 312:	ff cf       	rjmp	.-2      	; 0x312 <__stop_program>
