
Stop_watch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000400  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000400  00000474  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  00000480  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000086  00000000  00000000  000004a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000043e  00000000  00000000  00000526  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000016b  00000000  00000000  00000964  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000465  00000000  00000000  00000acf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000c0  00000000  00000000  00000f34  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000011b  00000000  00000000  00000ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000001d0  00000000  00000000  0000110f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000060  00000000  00000000  000012df  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e0       	ldi	r30, 0x00	; 0
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 36       	cpi	r26, 0x6C	; 108
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 1d 01 	call	0x23a	; 0x23a <main>
  8a:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <sendcmd>:
	senddata(b&0xF0);//First 4 bits
	senddata((b<<4)&0xF0);//Next 4
	_delay_ms(1);
}
void sendcmd(int c)
{
  92:	82 bb       	out	0x12, r24	; 18
	PORTD=c;
	PORTD+=4;
  94:	82 b3       	in	r24, 0x12	; 18
  96:	8c 5f       	subi	r24, 0xFC	; 252
  98:	82 bb       	out	0x12, r24	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9a:	8a ef       	ldi	r24, 0xFA	; 250
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <sendcmd+0xc>
	_delay_ms(1);
	PORTD-=4;
  a2:	82 b3       	in	r24, 0x12	; 18
  a4:	84 50       	subi	r24, 0x04	; 4
  a6:	82 bb       	out	0x12, r24	; 18
}
  a8:	08 95       	ret

000000aa <divcmd>:
	divcmd(0x28);//4 bit mode
	divcmd(0x06);//Increment Mode
	divcmd(0x0c);//Display on cursor off
}
void divcmd(int b)
{
  aa:	0f 93       	push	r16
  ac:	1f 93       	push	r17
  ae:	8c 01       	movw	r16, r24
	sendcmd(b&0xF0);//First 4 bits
  b0:	80 7f       	andi	r24, 0xF0	; 240
  b2:	90 70       	andi	r25, 0x00	; 0
  b4:	0e 94 49 00 	call	0x92	; 0x92 <sendcmd>
	sendcmd((b<<4)&0xF0);//Next 4
  b8:	84 e0       	ldi	r24, 0x04	; 4
  ba:	00 0f       	add	r16, r16
  bc:	11 1f       	adc	r17, r17
  be:	8a 95       	dec	r24
  c0:	e1 f7       	brne	.-8      	; 0xba <divcmd+0x10>
  c2:	c8 01       	movw	r24, r16
  c4:	90 70       	andi	r25, 0x00	; 0
  c6:	0e 94 49 00 	call	0x92	; 0x92 <sendcmd>
  ca:	8a ef       	ldi	r24, 0xFA	; 250
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <divcmd+0x24>
	_delay_ms(1);
}
  d2:	1f 91       	pop	r17
  d4:	0f 91       	pop	r16
  d6:	08 95       	ret

000000d8 <lcdstr>:
void lcdstr(void)
{
  d8:	82 e0       	ldi	r24, 0x02	; 2
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
	divcmd(0x02);//Home position Initialization with dividing function
	divcmd(0x28);//4 bit mode
  e0:	88 e2       	ldi	r24, 0x28	; 40
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
	divcmd(0x06);//Increment Mode
  e8:	86 e0       	ldi	r24, 0x06	; 6
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
	divcmd(0x0c);//Display on cursor off
  f0:	8c e0       	ldi	r24, 0x0C	; 12
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
}
  f8:	08 95       	ret

000000fa <senddata>:
	PORTD+=4;
	_delay_ms(1);
	PORTD-=4;
}
void senddata(int c)
{
  fa:	82 bb       	out	0x12, r24	; 18
	PORTD=c;
	PORTD+=5;
  fc:	82 b3       	in	r24, 0x12	; 18
  fe:	8b 5f       	subi	r24, 0xFB	; 251
 100:	82 bb       	out	0x12, r24	; 18
 102:	8a ef       	ldi	r24, 0xFA	; 250
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <senddata+0xc>
	_delay_ms(1);
	PORTD-=4;
 10a:	82 b3       	in	r24, 0x12	; 18
 10c:	84 50       	subi	r24, 0x04	; 4
 10e:	82 bb       	out	0x12, r24	; 18
}
 110:	08 95       	ret

00000112 <divdata>:
	sendcmd(b&0xF0);//First 4 bits
	sendcmd((b<<4)&0xF0);//Next 4
	_delay_ms(1);
}
void divdata(int b)
{
 112:	0f 93       	push	r16
 114:	1f 93       	push	r17
 116:	8c 01       	movw	r16, r24
	senddata(b&0xF0);//First 4 bits
 118:	80 7f       	andi	r24, 0xF0	; 240
 11a:	90 70       	andi	r25, 0x00	; 0
 11c:	0e 94 7d 00 	call	0xfa	; 0xfa <senddata>
	senddata((b<<4)&0xF0);//Next 4
 120:	94 e0       	ldi	r25, 0x04	; 4
 122:	00 0f       	add	r16, r16
 124:	11 1f       	adc	r17, r17
 126:	9a 95       	dec	r25
 128:	e1 f7       	brne	.-8      	; 0x122 <divdata+0x10>
 12a:	c8 01       	movw	r24, r16
 12c:	90 70       	andi	r25, 0x00	; 0
 12e:	0e 94 7d 00 	call	0xfa	; 0xfa <senddata>
 132:	8a ef       	ldi	r24, 0xFA	; 250
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <divdata+0x24>
	_delay_ms(1);
}
 13a:	1f 91       	pop	r17
 13c:	0f 91       	pop	r16
 13e:	08 95       	ret

00000140 <disp_string>:
	_delay_ms(1);
	PORTD-=4;
}

void disp_string(char *str, int pos)
{
 140:	0f 93       	push	r16
 142:	1f 93       	push	r17
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
 148:	18 2f       	mov	r17, r24
 14a:	09 2f       	mov	r16, r25
 14c:	cb 01       	movw	r24, r22
	int i=0;
	divcmd(pos);
 14e:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
 152:	21 2f       	mov	r18, r17
 154:	30 2f       	mov	r19, r16
 156:	c9 01       	movw	r24, r18
 158:	ec 01       	movw	r28, r24
 15a:	03 c0       	rjmp	.+6      	; 0x162 <disp_string+0x22>
	while(str[i]!='\0')
	{
		divdata(str[i]);
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	0e 94 89 00 	call	0x112	; 0x112 <divdata>

void disp_string(char *str, int pos)
{
	int i=0;
	divcmd(pos);
	while(str[i]!='\0')
 162:	89 91       	ld	r24, Y+
 164:	88 23       	and	r24, r24
 166:	d1 f7       	brne	.-12     	; 0x15c <disp_string+0x1c>
	{
		divdata(str[i]);
		i++;
	}

}
 168:	df 91       	pop	r29
 16a:	cf 91       	pop	r28
 16c:	1f 91       	pop	r17
 16e:	0f 91       	pop	r16
 170:	08 95       	ret

00000172 <min>:
void divcmd4(int);
void sendcmd(int);
void senddata(int);
void divdata4(int);
void min(int u)
{
 172:	0f 93       	push	r16
 174:	1f 93       	push	r17
 176:	8c 01       	movw	r16, r24

	
		divcmd(0xc7);
 178:	87 ec       	ldi	r24, 0xC7	; 199
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
		divdata((u/10)+48);
 180:	c8 01       	movw	r24, r16
 182:	6a e0       	ldi	r22, 0x0A	; 10
 184:	70 e0       	ldi	r23, 0x00	; 0
 186:	0e 94 d7 01 	call	0x3ae	; 0x3ae <__divmodhi4>
 18a:	cb 01       	movw	r24, r22
 18c:	c0 96       	adiw	r24, 0x30	; 48
 18e:	0e 94 89 00 	call	0x112	; 0x112 <divdata>
		divdata((u%10)+48);
 192:	c8 01       	movw	r24, r16
 194:	6a e0       	ldi	r22, 0x0A	; 10
 196:	70 e0       	ldi	r23, 0x00	; 0
 198:	0e 94 d7 01 	call	0x3ae	; 0x3ae <__divmodhi4>
 19c:	c0 96       	adiw	r24, 0x30	; 48
 19e:	0e 94 89 00 	call	0x112	; 0x112 <divdata>
		divdata(':');
 1a2:	8a e3       	ldi	r24, 0x3A	; 58
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	0e 94 89 00 	call	0x112	; 0x112 <divdata>

}
 1aa:	1f 91       	pop	r17
 1ac:	0f 91       	pop	r16
 1ae:	08 95       	ret

000001b0 <sec>:
void sec(int u)
{
 1b0:	0f 93       	push	r16
 1b2:	1f 93       	push	r17
 1b4:	8c 01       	movw	r16, r24

	
		divcmd(0xcA);
 1b6:	8a ec       	ldi	r24, 0xCA	; 202
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
		divdata((u/10)+48);
 1be:	c8 01       	movw	r24, r16
 1c0:	6a e0       	ldi	r22, 0x0A	; 10
 1c2:	70 e0       	ldi	r23, 0x00	; 0
 1c4:	0e 94 d7 01 	call	0x3ae	; 0x3ae <__divmodhi4>
 1c8:	cb 01       	movw	r24, r22
 1ca:	c0 96       	adiw	r24, 0x30	; 48
 1cc:	0e 94 89 00 	call	0x112	; 0x112 <divdata>
		divdata((u%10)+48);
 1d0:	c8 01       	movw	r24, r16
 1d2:	6a e0       	ldi	r22, 0x0A	; 10
 1d4:	70 e0       	ldi	r23, 0x00	; 0
 1d6:	0e 94 d7 01 	call	0x3ae	; 0x3ae <__divmodhi4>
 1da:	c0 96       	adiw	r24, 0x30	; 48
 1dc:	0e 94 89 00 	call	0x112	; 0x112 <divdata>
		divdata(':');
 1e0:	8a e3       	ldi	r24, 0x3A	; 58
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	0e 94 89 00 	call	0x112	; 0x112 <divdata>

}
 1e8:	1f 91       	pop	r17
 1ea:	0f 91       	pop	r16
 1ec:	08 95       	ret

000001ee <hour>:
void hour(int j)
{
 1ee:	0f 93       	push	r16
 1f0:	1f 93       	push	r17
 1f2:	8c 01       	movw	r16, r24
	divcmd(0xc4);
 1f4:	84 ec       	ldi	r24, 0xC4	; 196
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
	divdata((j/10)+48);
 1fc:	c8 01       	movw	r24, r16
 1fe:	6a e0       	ldi	r22, 0x0A	; 10
 200:	70 e0       	ldi	r23, 0x00	; 0
 202:	0e 94 d7 01 	call	0x3ae	; 0x3ae <__divmodhi4>
 206:	cb 01       	movw	r24, r22
 208:	c0 96       	adiw	r24, 0x30	; 48
 20a:	0e 94 89 00 	call	0x112	; 0x112 <divdata>
	divdata((j%10)+48);
 20e:	c8 01       	movw	r24, r16
 210:	6a e0       	ldi	r22, 0x0A	; 10
 212:	70 e0       	ldi	r23, 0x00	; 0
 214:	0e 94 d7 01 	call	0x3ae	; 0x3ae <__divmodhi4>
 218:	c0 96       	adiw	r24, 0x30	; 48
 21a:	0e 94 89 00 	call	0x112	; 0x112 <divdata>
	divdata(':');
 21e:	8a e3       	ldi	r24, 0x3A	; 58
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	0e 94 89 00 	call	0x112	; 0x112 <divdata>
}
 226:	1f 91       	pop	r17
 228:	0f 91       	pop	r16
 22a:	08 95       	ret

0000022c <sw>:

void sw(void)
{
 22c:	63 e8       	ldi	r22, 0x83	; 131
 22e:	70 e0       	ldi	r23, 0x00	; 0
 230:	80 e6       	ldi	r24, 0x60	; 96
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	0e 94 a0 00 	call	0x140	; 0x140 <disp_string>
	disp_string("STOP-WATCH",0x83);
}
 238:	08 95       	ret

0000023a <main>:
main()
{
 23a:	af 92       	push	r10
 23c:	bf 92       	push	r11
 23e:	cf 92       	push	r12
 240:	df 92       	push	r13
 242:	ef 92       	push	r14
 244:	ff 92       	push	r15
 246:	0f 93       	push	r16
 248:	1f 93       	push	r17
 24a:	cf 93       	push	r28
 24c:	df 93       	push	r29
DDRD=0xFF;
 24e:	8f ef       	ldi	r24, 0xFF	; 255
 250:	81 bb       	out	0x11, r24	; 17
DDRC=0xF0;
 252:	80 ef       	ldi	r24, 0xF0	; 240
 254:	84 bb       	out	0x14, r24	; 20
DDRA=0xF0;
 256:	8a bb       	out	0x1a, r24	; 26
PORTA=0x0F;
 258:	8f e0       	ldi	r24, 0x0F	; 15
 25a:	8b bb       	out	0x1b, r24	; 27
PORTC=0xE0;
 25c:	80 ee       	ldi	r24, 0xE0	; 224
 25e:	85 bb       	out	0x15, r24	; 21
lcdstr();
 260:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcdstr>
divcmd(0x01);
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
 26c:	cc 24       	eor	r12, r12
 26e:	dd 24       	eor	r13, r13
 270:	ee 24       	eor	r14, r14
 272:	ff 24       	eor	r15, r15
 274:	00 e0       	ldi	r16, 0x00	; 0
 276:	10 e0       	ldi	r17, 0x00	; 0
 278:	c0 e0       	ldi	r28, 0x00	; 0
 27a:	d0 e0       	ldi	r29, 0x00	; 0
 27c:	28 e8       	ldi	r18, 0x88	; 136
 27e:	a2 2e       	mov	r10, r18
 280:	23 e1       	ldi	r18, 0x13	; 19
 282:	b2 2e       	mov	r11, r18
 284:	74 c0       	rjmp	.+232    	; 0x36e <main+0x134>
while(1)
{	
	for(int i=0;i<=10;i++)
	{
		
		if(PINA==0x0E)
 286:	89 b3       	in	r24, 0x19	; 25
 288:	8e 30       	cpi	r24, 0x0E	; 14
 28a:	51 f4       	brne	.+20     	; 0x2a0 <main+0x66>
 28c:	c5 01       	movw	r24, r10
 28e:	01 97       	sbiw	r24, 0x01	; 1
 290:	f1 f7       	brne	.-4      	; 0x28e <main+0x54>
		{
			_delay_ms(20);
			while(PINA==0x0E||PINA==0x0F);
 292:	89 b3       	in	r24, 0x19	; 25
 294:	8e 30       	cpi	r24, 0x0E	; 14
 296:	e9 f3       	breq	.-6      	; 0x292 <main+0x58>
 298:	89 b3       	in	r24, 0x19	; 25
 29a:	8f 30       	cpi	r24, 0x0F	; 15
 29c:	d1 f3       	breq	.-12     	; 0x292 <main+0x58>
 29e:	66 c0       	rjmp	.+204    	; 0x36c <main+0x132>
			
		}

		else if(PINA==11)
 2a0:	89 b3       	in	r24, 0x19	; 25
 2a2:	8b 30       	cpi	r24, 0x0B	; 11
 2a4:	a9 f5       	brne	.+106    	; 0x310 <main+0xd6>
 2a6:	c5 01       	movw	r24, r10
 2a8:	01 97       	sbiw	r24, 0x01	; 1
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <main+0x6e>
 2ac:	22 c0       	rjmp	.+68     	; 0x2f2 <main+0xb8>
			_delay_ms(20);
			s=0;y=0;z=0;i=0;
			while(PINA==11||PINA==0x0F)
			{
			int k;
			sw();
 2ae:	0e 94 16 01 	call	0x22c	; 0x22c <sw>
			hour(y);
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	0e 94 f7 00 	call	0x1ee	; 0x1ee <hour>
			min(s);
 2ba:	80 e0       	ldi	r24, 0x00	; 0
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	0e 94 b9 00 	call	0x172	; 0x172 <min>
			sec(z);
 2c2:	80 e0       	ldi	r24, 0x00	; 0
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <sec>
			divcmd(0xcd);
 2ca:	8d ec       	ldi	r24, 0xCD	; 205
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
			k=i%10;
			divdata((i/100)+48);
 2d2:	80 e3       	ldi	r24, 0x30	; 48
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	0e 94 89 00 	call	0x112	; 0x112 <divdata>
			divdata((i/10)+48);
 2da:	80 e3       	ldi	r24, 0x30	; 48
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	0e 94 89 00 	call	0x112	; 0x112 <divdata>
			divdata(k+48);
 2e2:	80 e3       	ldi	r24, 0x30	; 48
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	0e 94 89 00 	call	0x112	; 0x112 <divdata>
			divdata(':');
 2ea:	8a e3       	ldi	r24, 0x3A	; 58
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	0e 94 89 00 	call	0x112	; 0x112 <divdata>

		else if(PINA==11)
		{
			_delay_ms(20);
			s=0;y=0;z=0;i=0;
			while(PINA==11||PINA==0x0F)
 2f2:	89 b3       	in	r24, 0x19	; 25
 2f4:	8b 30       	cpi	r24, 0x0B	; 11
 2f6:	d9 f2       	breq	.-74     	; 0x2ae <main+0x74>
 2f8:	89 b3       	in	r24, 0x19	; 25
 2fa:	8f 30       	cpi	r24, 0x0F	; 15
 2fc:	c1 f2       	breq	.-80     	; 0x2ae <main+0x74>
 2fe:	cc 24       	eor	r12, r12
 300:	dd 24       	eor	r13, r13
 302:	ee 24       	eor	r14, r14
 304:	ff 24       	eor	r15, r15
 306:	00 e0       	ldi	r16, 0x00	; 0
 308:	10 e0       	ldi	r17, 0x00	; 0
 30a:	c0 e0       	ldi	r28, 0x00	; 0
 30c:	d0 e0       	ldi	r29, 0x00	; 0
 30e:	2e c0       	rjmp	.+92     	; 0x36c <main+0x132>
			divdata((i/10)+48);
			divdata(k+48);
			divdata(':');
			}
		}
		else if(PINA==7)
 310:	89 b3       	in	r24, 0x19	; 25
 312:	87 30       	cpi	r24, 0x07	; 7
 314:	19 f4       	brne	.+6      	; 0x31c <main+0xe2>
 316:	c5 01       	movw	r24, r10
 318:	01 97       	sbiw	r24, 0x01	; 1
 31a:	f1 f7       	brne	.-4      	; 0x318 <main+0xde>
			divdata(':');
		}
		else
		{
			int k;
			sw();
 31c:	0e 94 16 01 	call	0x22c	; 0x22c <sw>
			hour(y);
 320:	c7 01       	movw	r24, r14
 322:	0e 94 f7 00 	call	0x1ee	; 0x1ee <hour>
			min(s);
 326:	c6 01       	movw	r24, r12
 328:	0e 94 b9 00 	call	0x172	; 0x172 <min>
			sec(z);
 32c:	c8 01       	movw	r24, r16
 32e:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <sec>
			divcmd(0xcd);
 332:	8d ec       	ldi	r24, 0xCD	; 205
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
			k=i%10;
			divdata((i/100)+48);
 33a:	80 e3       	ldi	r24, 0x30	; 48
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	0e 94 89 00 	call	0x112	; 0x112 <divdata>
			divdata((i/10)+48);
 342:	ce 01       	movw	r24, r28
 344:	6a e0       	ldi	r22, 0x0A	; 10
 346:	70 e0       	ldi	r23, 0x00	; 0
 348:	0e 94 d7 01 	call	0x3ae	; 0x3ae <__divmodhi4>
 34c:	cb 01       	movw	r24, r22
 34e:	c0 96       	adiw	r24, 0x30	; 48
 350:	0e 94 89 00 	call	0x112	; 0x112 <divdata>
			divdata(k+48);
 354:	ce 01       	movw	r24, r28
 356:	6a e0       	ldi	r22, 0x0A	; 10
 358:	70 e0       	ldi	r23, 0x00	; 0
 35a:	0e 94 d7 01 	call	0x3ae	; 0x3ae <__divmodhi4>
 35e:	c0 96       	adiw	r24, 0x30	; 48
 360:	0e 94 89 00 	call	0x112	; 0x112 <divdata>
			divdata(':');
 364:	8a e3       	ldi	r24, 0x3A	; 58
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	0e 94 89 00 	call	0x112	; 0x112 <divdata>
lcdstr();
divcmd(0x01);
int s=0,y=0,z=0;
while(1)
{	
	for(int i=0;i<=10;i++)
 36c:	21 96       	adiw	r28, 0x01	; 1
 36e:	cb 30       	cpi	r28, 0x0B	; 11
 370:	d1 05       	cpc	r29, r1
 372:	0c f4       	brge	.+2      	; 0x376 <main+0x13c>
 374:	88 cf       	rjmp	.-240    	; 0x286 <main+0x4c>
			divdata(k+48);
			divdata(':');
		}

	}
	z++;
 376:	0f 5f       	subi	r16, 0xFF	; 255
 378:	1f 4f       	sbci	r17, 0xFF	; 255
	if(z>59)
 37a:	0c 33       	cpi	r16, 0x3C	; 60
 37c:	11 05       	cpc	r17, r1
 37e:	2c f0       	brlt	.+10     	; 0x38a <main+0x150>
	{
		z=0;
		s++;
 380:	08 94       	sec
 382:	c1 1c       	adc	r12, r1
 384:	d1 1c       	adc	r13, r1
 386:	00 e0       	ldi	r16, 0x00	; 0
 388:	10 e0       	ldi	r17, 0x00	; 0
	}
	if(s>59)
 38a:	8c e3       	ldi	r24, 0x3C	; 60
 38c:	c8 16       	cp	r12, r24
 38e:	d1 04       	cpc	r13, r1
 390:	2c f0       	brlt	.+10     	; 0x39c <main+0x162>
	{
		s=0;
		y++;
 392:	08 94       	sec
 394:	e1 1c       	adc	r14, r1
 396:	f1 1c       	adc	r15, r1
 398:	cc 24       	eor	r12, r12
 39a:	dd 24       	eor	r13, r13
	}
	if(y>23)
 39c:	88 e1       	ldi	r24, 0x18	; 24
 39e:	e8 16       	cp	r14, r24
 3a0:	f1 04       	cpc	r15, r1
 3a2:	14 f0       	brlt	.+4      	; 0x3a8 <main+0x16e>
 3a4:	ee 24       	eor	r14, r14
 3a6:	ff 24       	eor	r15, r15
 3a8:	c0 e0       	ldi	r28, 0x00	; 0
 3aa:	d0 e0       	ldi	r29, 0x00	; 0
 3ac:	e0 cf       	rjmp	.-64     	; 0x36e <main+0x134>

000003ae <__divmodhi4>:
 3ae:	97 fb       	bst	r25, 7
 3b0:	09 2e       	mov	r0, r25
 3b2:	07 26       	eor	r0, r23
 3b4:	0a d0       	rcall	.+20     	; 0x3ca <__divmodhi4_neg1>
 3b6:	77 fd       	sbrc	r23, 7
 3b8:	04 d0       	rcall	.+8      	; 0x3c2 <__divmodhi4_neg2>
 3ba:	0c d0       	rcall	.+24     	; 0x3d4 <__udivmodhi4>
 3bc:	06 d0       	rcall	.+12     	; 0x3ca <__divmodhi4_neg1>
 3be:	00 20       	and	r0, r0
 3c0:	1a f4       	brpl	.+6      	; 0x3c8 <__divmodhi4_exit>

000003c2 <__divmodhi4_neg2>:
 3c2:	70 95       	com	r23
 3c4:	61 95       	neg	r22
 3c6:	7f 4f       	sbci	r23, 0xFF	; 255

000003c8 <__divmodhi4_exit>:
 3c8:	08 95       	ret

000003ca <__divmodhi4_neg1>:
 3ca:	f6 f7       	brtc	.-4      	; 0x3c8 <__divmodhi4_exit>
 3cc:	90 95       	com	r25
 3ce:	81 95       	neg	r24
 3d0:	9f 4f       	sbci	r25, 0xFF	; 255
 3d2:	08 95       	ret

000003d4 <__udivmodhi4>:
 3d4:	aa 1b       	sub	r26, r26
 3d6:	bb 1b       	sub	r27, r27
 3d8:	51 e1       	ldi	r21, 0x11	; 17
 3da:	07 c0       	rjmp	.+14     	; 0x3ea <__udivmodhi4_ep>

000003dc <__udivmodhi4_loop>:
 3dc:	aa 1f       	adc	r26, r26
 3de:	bb 1f       	adc	r27, r27
 3e0:	a6 17       	cp	r26, r22
 3e2:	b7 07       	cpc	r27, r23
 3e4:	10 f0       	brcs	.+4      	; 0x3ea <__udivmodhi4_ep>
 3e6:	a6 1b       	sub	r26, r22
 3e8:	b7 0b       	sbc	r27, r23

000003ea <__udivmodhi4_ep>:
 3ea:	88 1f       	adc	r24, r24
 3ec:	99 1f       	adc	r25, r25
 3ee:	5a 95       	dec	r21
 3f0:	a9 f7       	brne	.-22     	; 0x3dc <__udivmodhi4_loop>
 3f2:	80 95       	com	r24
 3f4:	90 95       	com	r25
 3f6:	bc 01       	movw	r22, r24
 3f8:	cd 01       	movw	r24, r26
 3fa:	08 95       	ret

000003fc <_exit>:
 3fc:	f8 94       	cli

000003fe <__stop_program>:
 3fe:	ff cf       	rjmp	.-2      	; 0x3fe <__stop_program>
