
LCDNum.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000258  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000058  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000004b1  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000176  00000000  00000000  000007d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000030c  00000000  00000000  0000094b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000070  00000000  00000000  00000c58  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000011c  00000000  00000000  00000cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000156  00000000  00000000  00000de4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000000a8  00000000  00000000  00000f3a  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e5       	ldi	r30, 0x58	; 88
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b8 00 	call	0x170	; 0x170 <main>
  8a:	0c 94 2a 01 	jmp	0x254	; 0x254 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <divcmd4>:
	divcmd4(0x28);//4 bit mode
	divcmd4(0x06);//Decrement Mode
	divcmd4(0x0c);//Display on cursor off
}
void divcmd4(int b)
{
  92:	9c 01       	movw	r18, r24
  94:	20 7f       	andi	r18, 0xF0	; 240
  96:	30 70       	andi	r19, 0x00	; 0
  98:	22 bb       	out	0x12, r18	; 18
	_delay_ms(1);
}
void sendcmd(int c)
{
	PORTD=c;
	PORTD+=4;
  9a:	22 b3       	in	r18, 0x12	; 18
  9c:	2c 5f       	subi	r18, 0xFC	; 252
  9e:	22 bb       	out	0x12, r18	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  a0:	4a ef       	ldi	r20, 0xFA	; 250
  a2:	50 e0       	ldi	r21, 0x00	; 0
  a4:	fa 01       	movw	r30, r20
  a6:	31 97       	sbiw	r30, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <divcmd4+0x14>
	_delay_ms(1);
	PORTD-=4;
  aa:	22 b3       	in	r18, 0x12	; 18
  ac:	24 50       	subi	r18, 0x04	; 4
  ae:	22 bb       	out	0x12, r18	; 18
	senddata((b<<4)&0xF0);//Next 4
	_delay_ms(1);
}
void sendcmd(int c)
{
	PORTD=c;
  b0:	24 e0       	ldi	r18, 0x04	; 4
  b2:	88 0f       	add	r24, r24
  b4:	99 1f       	adc	r25, r25
  b6:	2a 95       	dec	r18
  b8:	e1 f7       	brne	.-8      	; 0xb2 <divcmd4+0x20>
  ba:	90 70       	andi	r25, 0x00	; 0
  bc:	82 bb       	out	0x12, r24	; 18
	PORTD+=4;
  be:	82 b3       	in	r24, 0x12	; 18
  c0:	8c 5f       	subi	r24, 0xFC	; 252
  c2:	82 bb       	out	0x12, r24	; 18
  c4:	ca 01       	movw	r24, r20
  c6:	01 97       	sbiw	r24, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <divcmd4+0x34>
	_delay_ms(1);
	PORTD-=4;
  ca:	82 b3       	in	r24, 0x12	; 18
  cc:	84 50       	subi	r24, 0x04	; 4
  ce:	82 bb       	out	0x12, r24	; 18
  d0:	ca 01       	movw	r24, r20
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <divcmd4+0x40>
void divcmd4(int b)
{
	sendcmd(b&0xF0);//First 4 bits
	sendcmd((b<<4)&0xF0);//Next 4
	_delay_ms(1);
}
  d6:	08 95       	ret

000000d8 <lcdstr>:
void divcmd4(int);
void sendcmd(int);
void senddata(int);
void divdata4(int);
void lcdstr(void)
{
  d8:	82 e0       	ldi	r24, 0x02	; 2
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 49 00 	call	0x92	; 0x92 <divcmd4>
	divcmd4(0x02);//Home position Initialization with dividing function
	divcmd4(0x28);//4 bit mode
  e0:	88 e2       	ldi	r24, 0x28	; 40
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 49 00 	call	0x92	; 0x92 <divcmd4>
	divcmd4(0x06);//Decrement Mode
  e8:	86 e0       	ldi	r24, 0x06	; 6
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 49 00 	call	0x92	; 0x92 <divcmd4>
	divcmd4(0x0c);//Display on cursor off
  f0:	8c e0       	ldi	r24, 0x0C	; 12
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0e 94 49 00 	call	0x92	; 0x92 <divcmd4>
}
  f8:	08 95       	ret

000000fa <divdata4>:
	sendcmd(b&0xF0);//First 4 bits
	sendcmd((b<<4)&0xF0);//Next 4
	_delay_ms(1);
}
void divdata4(int b)
{
  fa:	9c 01       	movw	r18, r24
  fc:	20 7f       	andi	r18, 0xF0	; 240
  fe:	30 70       	andi	r19, 0x00	; 0
 100:	22 bb       	out	0x12, r18	; 18
	PORTD-=4;
}
void senddata(int c)
{
	PORTD=c;
	PORTD+=5;
 102:	22 b3       	in	r18, 0x12	; 18
 104:	2b 5f       	subi	r18, 0xFB	; 251
 106:	22 bb       	out	0x12, r18	; 18
 108:	4a ef       	ldi	r20, 0xFA	; 250
 10a:	50 e0       	ldi	r21, 0x00	; 0
 10c:	fa 01       	movw	r30, r20
 10e:	31 97       	sbiw	r30, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <divdata4+0x14>
	_delay_ms(1);
	PORTD-=4;
 112:	22 b3       	in	r18, 0x12	; 18
 114:	24 50       	subi	r18, 0x04	; 4
 116:	22 bb       	out	0x12, r18	; 18
	_delay_ms(1);
	PORTD-=4;
}
void senddata(int c)
{
	PORTD=c;
 118:	34 e0       	ldi	r19, 0x04	; 4
 11a:	88 0f       	add	r24, r24
 11c:	99 1f       	adc	r25, r25
 11e:	3a 95       	dec	r19
 120:	e1 f7       	brne	.-8      	; 0x11a <divdata4+0x20>
 122:	90 70       	andi	r25, 0x00	; 0
 124:	82 bb       	out	0x12, r24	; 18
	PORTD+=5;
 126:	82 b3       	in	r24, 0x12	; 18
 128:	8b 5f       	subi	r24, 0xFB	; 251
 12a:	82 bb       	out	0x12, r24	; 18
 12c:	ca 01       	movw	r24, r20
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <divdata4+0x34>
	_delay_ms(1);
	PORTD-=4;
 132:	82 b3       	in	r24, 0x12	; 18
 134:	84 50       	subi	r24, 0x04	; 4
 136:	82 bb       	out	0x12, r24	; 18
 138:	ca 01       	movw	r24, r20
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <divdata4+0x40>
void divdata4(int b)
{
	senddata(b&0xF0);//First 4 bits
	senddata((b<<4)&0xF0);//Next 4
	_delay_ms(1);
}
 13e:	08 95       	ret

00000140 <sendcmd>:
void sendcmd(int c)
{
 140:	82 bb       	out	0x12, r24	; 18
	PORTD=c;
	PORTD+=4;
 142:	82 b3       	in	r24, 0x12	; 18
 144:	8c 5f       	subi	r24, 0xFC	; 252
 146:	82 bb       	out	0x12, r24	; 18
 148:	8a ef       	ldi	r24, 0xFA	; 250
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <sendcmd+0xc>
	_delay_ms(1);
	PORTD-=4;
 150:	82 b3       	in	r24, 0x12	; 18
 152:	84 50       	subi	r24, 0x04	; 4
 154:	82 bb       	out	0x12, r24	; 18
}
 156:	08 95       	ret

00000158 <senddata>:
void senddata(int c)
{
 158:	82 bb       	out	0x12, r24	; 18
	PORTD=c;
	PORTD+=5;
 15a:	82 b3       	in	r24, 0x12	; 18
 15c:	8b 5f       	subi	r24, 0xFB	; 251
 15e:	82 bb       	out	0x12, r24	; 18
 160:	8a ef       	ldi	r24, 0xFA	; 250
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	01 97       	sbiw	r24, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <senddata+0xc>
	_delay_ms(1);
	PORTD-=4;
 168:	82 b3       	in	r24, 0x12	; 18
 16a:	84 50       	subi	r24, 0x04	; 4
 16c:	82 bb       	out	0x12, r24	; 18
}
 16e:	08 95       	ret

00000170 <main>:
main()
{
 170:	df 92       	push	r13
 172:	ef 92       	push	r14
 174:	ff 92       	push	r15
 176:	0f 93       	push	r16
 178:	1f 93       	push	r17
 17a:	cf 93       	push	r28
 17c:	df 93       	push	r29
DDRD=0xFF;
 17e:	8f ef       	ldi	r24, 0xFF	; 255
 180:	81 bb       	out	0x11, r24	; 17
int k;
lcdstr();
 182:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcdstr>
divcmd4(0x01);
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	0e 94 49 00 	call	0x92	; 0x92 <divcmd4>
 18e:	0b e7       	ldi	r16, 0x7B	; 123
 190:	10 e0       	ldi	r17, 0x00	; 0
 192:	59 e1       	ldi	r21, 0x19	; 25
 194:	e5 2e       	mov	r14, r21
 196:	f1 2c       	mov	r15, r1
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 198:	43 e0       	ldi	r20, 0x03	; 3
 19a:	d4 2e       	mov	r13, r20
int i=123;
while(i<=200)
{
divcmd4(0x83);
 19c:	83 e8       	ldi	r24, 0x83	; 131
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	0e 94 49 00 	call	0x92	; 0x92 <divcmd4>
 1a4:	80 e1       	ldi	r24, 0x10	; 16
 1a6:	97 e2       	ldi	r25, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1a8:	f7 01       	movw	r30, r14
 1aa:	31 97       	sbiw	r30, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <main+0x3a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1ae:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1b0:	d9 f7       	brne	.-10     	; 0x1a8 <main+0x38>
 1b2:	e8 01       	movw	r28, r16
_delay_ms(1000);
k=i;
while(k>0)
{
divcmd4(0x04);
 1b4:	84 e0       	ldi	r24, 0x04	; 4
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	0e 94 49 00 	call	0x92	; 0x92 <divcmd4>
int j;
j=k%10;
 1bc:	ce 01       	movw	r24, r28
 1be:	6a e0       	ldi	r22, 0x0A	; 10
 1c0:	70 e0       	ldi	r23, 0x00	; 0
 1c2:	0e 94 03 01 	call	0x206	; 0x206 <__divmodhi4>
 1c6:	9c 01       	movw	r18, r24
k=k/10;
 1c8:	ce 01       	movw	r24, r28
 1ca:	6a e0       	ldi	r22, 0x0A	; 10
 1cc:	70 e0       	ldi	r23, 0x00	; 0
 1ce:	0e 94 03 01 	call	0x206	; 0x206 <__divmodhi4>
 1d2:	eb 01       	movw	r28, r22
divdata4(j+48);
 1d4:	c9 01       	movw	r24, r18
 1d6:	c0 96       	adiw	r24, 0x30	; 48
 1d8:	0e 94 7d 00 	call	0xfa	; 0xfa <divdata4>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 1dc:	8d 2d       	mov	r24, r13
 1de:	8a 95       	dec	r24
 1e0:	f1 f7       	brne	.-4      	; 0x1de <main+0x6e>
while(i<=200)
{
divcmd4(0x83);
_delay_ms(1000);
k=i;
while(k>0)
 1e2:	1c 16       	cp	r1, r28
 1e4:	1d 06       	cpc	r1, r29
 1e6:	34 f3       	brlt	.-52     	; 0x1b4 <main+0x44>
j=k%10;
k=k/10;
divdata4(j+48);
_delay_us(10);
}
i++;
 1e8:	0f 5f       	subi	r16, 0xFF	; 255
 1ea:	1f 4f       	sbci	r17, 0xFF	; 255
DDRD=0xFF;
int k;
lcdstr();
divcmd4(0x01);
int i=123;
while(i<=200)
 1ec:	09 3c       	cpi	r16, 0xC9	; 201
 1ee:	11 05       	cpc	r17, r1
 1f0:	a9 f6       	brne	.-86     	; 0x19c <main+0x2c>
divdata4(j+48);
_delay_us(10);
}
i++;
}
}
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	df 91       	pop	r29
 1f8:	cf 91       	pop	r28
 1fa:	1f 91       	pop	r17
 1fc:	0f 91       	pop	r16
 1fe:	ff 90       	pop	r15
 200:	ef 90       	pop	r14
 202:	df 90       	pop	r13
 204:	08 95       	ret

00000206 <__divmodhi4>:
 206:	97 fb       	bst	r25, 7
 208:	09 2e       	mov	r0, r25
 20a:	07 26       	eor	r0, r23
 20c:	0a d0       	rcall	.+20     	; 0x222 <__divmodhi4_neg1>
 20e:	77 fd       	sbrc	r23, 7
 210:	04 d0       	rcall	.+8      	; 0x21a <__divmodhi4_neg2>
 212:	0c d0       	rcall	.+24     	; 0x22c <__udivmodhi4>
 214:	06 d0       	rcall	.+12     	; 0x222 <__divmodhi4_neg1>
 216:	00 20       	and	r0, r0
 218:	1a f4       	brpl	.+6      	; 0x220 <__divmodhi4_exit>

0000021a <__divmodhi4_neg2>:
 21a:	70 95       	com	r23
 21c:	61 95       	neg	r22
 21e:	7f 4f       	sbci	r23, 0xFF	; 255

00000220 <__divmodhi4_exit>:
 220:	08 95       	ret

00000222 <__divmodhi4_neg1>:
 222:	f6 f7       	brtc	.-4      	; 0x220 <__divmodhi4_exit>
 224:	90 95       	com	r25
 226:	81 95       	neg	r24
 228:	9f 4f       	sbci	r25, 0xFF	; 255
 22a:	08 95       	ret

0000022c <__udivmodhi4>:
 22c:	aa 1b       	sub	r26, r26
 22e:	bb 1b       	sub	r27, r27
 230:	51 e1       	ldi	r21, 0x11	; 17
 232:	07 c0       	rjmp	.+14     	; 0x242 <__udivmodhi4_ep>

00000234 <__udivmodhi4_loop>:
 234:	aa 1f       	adc	r26, r26
 236:	bb 1f       	adc	r27, r27
 238:	a6 17       	cp	r26, r22
 23a:	b7 07       	cpc	r27, r23
 23c:	10 f0       	brcs	.+4      	; 0x242 <__udivmodhi4_ep>
 23e:	a6 1b       	sub	r26, r22
 240:	b7 0b       	sbc	r27, r23

00000242 <__udivmodhi4_ep>:
 242:	88 1f       	adc	r24, r24
 244:	99 1f       	adc	r25, r25
 246:	5a 95       	dec	r21
 248:	a9 f7       	brne	.-22     	; 0x234 <__udivmodhi4_loop>
 24a:	80 95       	com	r24
 24c:	90 95       	com	r25
 24e:	bc 01       	movw	r22, r24
 250:	cd 01       	movw	r24, r26
 252:	08 95       	ret

00000254 <_exit>:
 254:	f8 94       	cli

00000256 <__stop_program>:
 256:	ff cf       	rjmp	.-2      	; 0x256 <__stop_program>
