
Sandwatch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000013c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000137  00000000  00000000  000001cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000c0  00000000  00000000  00000302  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000013a  00000000  00000000  000003c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  000004fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000de  00000000  00000000  0000051c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000098  00000000  00000000  000005fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00000692  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e3       	ldi	r30, 0x3C	; 60
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 9c 00 	jmp	0x138	; 0x138 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include<avr/io.h>
#include<util/delay.h>
main()
{
  92:	0f 93       	push	r16
  94:	1f 93       	push	r17
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
DDRB=0xFF;
  9a:	8f ef       	ldi	r24, 0xFF	; 255
  9c:	87 bb       	out	0x17, r24	; 23
  9e:	c0 e0       	ldi	r28, 0x00	; 0
  a0:	d0 e0       	ldi	r29, 0x00	; 0
  a2:	e0 e8       	ldi	r30, 0x80	; 128
  a4:	f0 e0       	ldi	r31, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  a6:	08 ea       	ldi	r16, 0xA8	; 168
  a8:	11 e6       	ldi	r17, 0x61	; 97
  aa:	1c c0       	rjmp	.+56     	; 0xe4 <main+0x52>
int k=0,j=128;
while(j>0)
{
for(int i=1;i<=j;i=i*2)
{
	PORTB=i+k;
  ac:	82 2f       	mov	r24, r18
  ae:	8c 0f       	add	r24, r28
  b0:	88 bb       	out	0x18, r24	; 24
  b2:	c8 01       	movw	r24, r16
  b4:	01 97       	sbiw	r24, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <main+0x22>
while(1)
{
int k=0,j=128;
while(j>0)
{
for(int i=1;i<=j;i=i*2)
  b8:	22 0f       	add	r18, r18
  ba:	33 1f       	adc	r19, r19
  bc:	e2 17       	cp	r30, r18
  be:	f3 07       	cpc	r31, r19
  c0:	ac f7       	brge	.-22     	; 0xac <main+0x1a>
{
	PORTB=i+k;
	_delay_ms(100);
}
k=k+j;
j=j/2;
  c2:	cf 01       	movw	r24, r30
  c4:	62 e0       	ldi	r22, 0x02	; 2
  c6:	70 e0       	ldi	r23, 0x00	; 0
  c8:	0e 94 75 00 	call	0xea	; 0xea <__divmodhi4>
  cc:	cb 01       	movw	r24, r22
{
DDRB=0xFF;
while(1)
{
int k=0,j=128;
while(j>0)
  ce:	16 16       	cp	r1, r22
  d0:	17 06       	cpc	r1, r23
  d2:	2c f0       	brlt	.+10     	; 0xde <main+0x4c>
  d4:	c0 e0       	ldi	r28, 0x00	; 0
  d6:	d0 e0       	ldi	r29, 0x00	; 0
  d8:	80 e8       	ldi	r24, 0x80	; 128
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <main+0x50>
for(int i=1;i<=j;i=i*2)
{
	PORTB=i+k;
	_delay_ms(100);
}
k=k+j;
  de:	ce 0f       	add	r28, r30
  e0:	df 1f       	adc	r29, r31
  e2:	fc 01       	movw	r30, r24
  e4:	21 e0       	ldi	r18, 0x01	; 1
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	e9 cf       	rjmp	.-46     	; 0xbc <main+0x2a>

000000ea <__divmodhi4>:
  ea:	97 fb       	bst	r25, 7
  ec:	09 2e       	mov	r0, r25
  ee:	07 26       	eor	r0, r23
  f0:	0a d0       	rcall	.+20     	; 0x106 <__divmodhi4_neg1>
  f2:	77 fd       	sbrc	r23, 7
  f4:	04 d0       	rcall	.+8      	; 0xfe <__divmodhi4_neg2>
  f6:	0c d0       	rcall	.+24     	; 0x110 <__udivmodhi4>
  f8:	06 d0       	rcall	.+12     	; 0x106 <__divmodhi4_neg1>
  fa:	00 20       	and	r0, r0
  fc:	1a f4       	brpl	.+6      	; 0x104 <__divmodhi4_exit>

000000fe <__divmodhi4_neg2>:
  fe:	70 95       	com	r23
 100:	61 95       	neg	r22
 102:	7f 4f       	sbci	r23, 0xFF	; 255

00000104 <__divmodhi4_exit>:
 104:	08 95       	ret

00000106 <__divmodhi4_neg1>:
 106:	f6 f7       	brtc	.-4      	; 0x104 <__divmodhi4_exit>
 108:	90 95       	com	r25
 10a:	81 95       	neg	r24
 10c:	9f 4f       	sbci	r25, 0xFF	; 255
 10e:	08 95       	ret

00000110 <__udivmodhi4>:
 110:	aa 1b       	sub	r26, r26
 112:	bb 1b       	sub	r27, r27
 114:	51 e1       	ldi	r21, 0x11	; 17
 116:	07 c0       	rjmp	.+14     	; 0x126 <__udivmodhi4_ep>

00000118 <__udivmodhi4_loop>:
 118:	aa 1f       	adc	r26, r26
 11a:	bb 1f       	adc	r27, r27
 11c:	a6 17       	cp	r26, r22
 11e:	b7 07       	cpc	r27, r23
 120:	10 f0       	brcs	.+4      	; 0x126 <__udivmodhi4_ep>
 122:	a6 1b       	sub	r26, r22
 124:	b7 0b       	sbc	r27, r23

00000126 <__udivmodhi4_ep>:
 126:	88 1f       	adc	r24, r24
 128:	99 1f       	adc	r25, r25
 12a:	5a 95       	dec	r21
 12c:	a9 f7       	brne	.-22     	; 0x118 <__udivmodhi4_loop>
 12e:	80 95       	com	r24
 130:	90 95       	com	r25
 132:	bc 01       	movw	r22, r24
 134:	cd 01       	movw	r24, r26
 136:	08 95       	ret

00000138 <_exit>:
 138:	f8 94       	cli

0000013a <__stop_program>:
 13a:	ff cf       	rjmp	.-2      	; 0x13a <__stop_program>
