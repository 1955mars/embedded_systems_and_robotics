
LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000144  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000012b  00000000  00000000  000001d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000cc  00000000  00000000  000002fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000156  00000000  00000000  000003ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000520  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000c0  00000000  00000000  00000540  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000028  00000000  00000000  00000600  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00000628  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e4       	ldi	r30, 0x44	; 68
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 a0 00 	jmp	0x140	; 0x140 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include<avr/io.h>
#include<util/delay.h>
void main()
{
  92:	ef 92       	push	r14
  94:	ff 92       	push	r15
  96:	0f 93       	push	r16
  98:	1f 93       	push	r17
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29
	int x=128,y=1;
	DDRB=0xFF;
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	87 bb       	out	0x17, r24	; 23
	PORTB=0x00;
  a2:	18 ba       	out	0x18, r1	; 24
  a4:	40 e8       	ldi	r20, 0x80	; 128
  a6:	50 e0       	ldi	r21, 0x00	; 0
  a8:	01 e0       	ldi	r16, 0x01	; 1
  aa:	10 e0       	ldi	r17, 0x00	; 0
  ac:	c0 e1       	ldi	r28, 0x10	; 16
  ae:	d0 e0       	ldi	r29, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  b0:	99 e1       	ldi	r25, 0x19	; 25
  b2:	e9 2e       	mov	r14, r25
  b4:	f1 2c       	mov	r15, r1
  b6:	02 c0       	rjmp	.+4      	; 0xbc <main+0x2a>
  b8:	21 97       	sbiw	r28, 0x01	; 1
	while(1)
	{
	 if (x!=y)
  ba:	a1 f0       	breq	.+40     	; 0xe4 <main+0x52>
	 {
	 	PORTB=x+y;
  bc:	80 2f       	mov	r24, r16
  be:	84 0f       	add	r24, r20
  c0:	88 bb       	out	0x18, r24	; 24
	 	y=y*2;
  c2:	00 0f       	add	r16, r16
  c4:	11 1f       	adc	r17, r17
		x=x/2;
  c6:	ca 01       	movw	r24, r20
  c8:	62 e0       	ldi	r22, 0x02	; 2
  ca:	70 e0       	ldi	r23, 0x00	; 0
  cc:	0e 94 79 00 	call	0xf2	; 0xf2 <__divmodhi4>
  d0:	ab 01       	movw	r20, r22
  d2:	20 e1       	ldi	r18, 0x10	; 16
  d4:	37 e2       	ldi	r19, 0x27	; 39
  d6:	f7 01       	movw	r30, r14
  d8:	31 97       	sbiw	r30, 0x01	; 1
  da:	f1 f7       	brne	.-4      	; 0xd8 <main+0x46>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  dc:	21 50       	subi	r18, 0x01	; 1
  de:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  e0:	d1 f7       	brne	.-12     	; 0xd6 <main+0x44>
  e2:	ea cf       	rjmp	.-44     	; 0xb8 <main+0x26>
	  break;
	_delay_ms(1000);
}


}
  e4:	df 91       	pop	r29
  e6:	cf 91       	pop	r28
  e8:	1f 91       	pop	r17
  ea:	0f 91       	pop	r16
  ec:	ff 90       	pop	r15
  ee:	ef 90       	pop	r14
  f0:	08 95       	ret

000000f2 <__divmodhi4>:
  f2:	97 fb       	bst	r25, 7
  f4:	09 2e       	mov	r0, r25
  f6:	07 26       	eor	r0, r23
  f8:	0a d0       	rcall	.+20     	; 0x10e <__divmodhi4_neg1>
  fa:	77 fd       	sbrc	r23, 7
  fc:	04 d0       	rcall	.+8      	; 0x106 <__divmodhi4_neg2>
  fe:	0c d0       	rcall	.+24     	; 0x118 <__udivmodhi4>
 100:	06 d0       	rcall	.+12     	; 0x10e <__divmodhi4_neg1>
 102:	00 20       	and	r0, r0
 104:	1a f4       	brpl	.+6      	; 0x10c <__divmodhi4_exit>

00000106 <__divmodhi4_neg2>:
 106:	70 95       	com	r23
 108:	61 95       	neg	r22
 10a:	7f 4f       	sbci	r23, 0xFF	; 255

0000010c <__divmodhi4_exit>:
 10c:	08 95       	ret

0000010e <__divmodhi4_neg1>:
 10e:	f6 f7       	brtc	.-4      	; 0x10c <__divmodhi4_exit>
 110:	90 95       	com	r25
 112:	81 95       	neg	r24
 114:	9f 4f       	sbci	r25, 0xFF	; 255
 116:	08 95       	ret

00000118 <__udivmodhi4>:
 118:	aa 1b       	sub	r26, r26
 11a:	bb 1b       	sub	r27, r27
 11c:	51 e1       	ldi	r21, 0x11	; 17
 11e:	07 c0       	rjmp	.+14     	; 0x12e <__udivmodhi4_ep>

00000120 <__udivmodhi4_loop>:
 120:	aa 1f       	adc	r26, r26
 122:	bb 1f       	adc	r27, r27
 124:	a6 17       	cp	r26, r22
 126:	b7 07       	cpc	r27, r23
 128:	10 f0       	brcs	.+4      	; 0x12e <__udivmodhi4_ep>
 12a:	a6 1b       	sub	r26, r22
 12c:	b7 0b       	sbc	r27, r23

0000012e <__udivmodhi4_ep>:
 12e:	88 1f       	adc	r24, r24
 130:	99 1f       	adc	r25, r25
 132:	5a 95       	dec	r21
 134:	a9 f7       	brne	.-22     	; 0x120 <__udivmodhi4_loop>
 136:	80 95       	com	r24
 138:	90 95       	com	r25
 13a:	bc 01       	movw	r22, r24
 13c:	cd 01       	movw	r24, r26
 13e:	08 95       	ret

00000140 <_exit>:
 140:	f8 94       	cli

00000142 <__stop_program>:
 142:	ff cf       	rjmp	.-2      	; 0x142 <__stop_program>
