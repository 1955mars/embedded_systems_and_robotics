
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001e6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  000001e6  0000025a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  0000025e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000058  00000000  00000000  0000027e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000004d9  00000000  00000000  000002d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000019d  00000000  00000000  000007af  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002f7  00000000  00000000  0000094c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000070  00000000  00000000  00000c44  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000116  00000000  00000000  00000cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000016b  00000000  00000000  00000dca  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000090  00000000  00000000  00000f35  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ee       	ldi	r30, 0xE6	; 230
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 36       	cpi	r26, 0x64	; 100
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b8 00 	call	0x170	; 0x170 <main>
  8a:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <divcmd4>:
	divcmd4(0x28);//4 bit mode
	divcmd4(0x06);//Increment Mode
	divcmd4(0x0c);//Display on cursor off
}
void divcmd4(int b)
{
  92:	9c 01       	movw	r18, r24
  94:	20 7f       	andi	r18, 0xF0	; 240
  96:	30 70       	andi	r19, 0x00	; 0
  98:	22 bb       	out	0x12, r18	; 18
	_delay_ms(1);
}
void sendcmd(int c)
{
	PORTD=c;
	PORTD+=4;
  9a:	22 b3       	in	r18, 0x12	; 18
  9c:	2c 5f       	subi	r18, 0xFC	; 252
  9e:	22 bb       	out	0x12, r18	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  a0:	4a ef       	ldi	r20, 0xFA	; 250
  a2:	50 e0       	ldi	r21, 0x00	; 0
  a4:	fa 01       	movw	r30, r20
  a6:	31 97       	sbiw	r30, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <divcmd4+0x14>
	_delay_ms(1);
	PORTD-=4;
  aa:	22 b3       	in	r18, 0x12	; 18
  ac:	24 50       	subi	r18, 0x04	; 4
  ae:	22 bb       	out	0x12, r18	; 18
	senddata((b<<4)&0xF0);//Next 4
	_delay_ms(1);
}
void sendcmd(int c)
{
	PORTD=c;
  b0:	24 e0       	ldi	r18, 0x04	; 4
  b2:	88 0f       	add	r24, r24
  b4:	99 1f       	adc	r25, r25
  b6:	2a 95       	dec	r18
  b8:	e1 f7       	brne	.-8      	; 0xb2 <divcmd4+0x20>
  ba:	90 70       	andi	r25, 0x00	; 0
  bc:	82 bb       	out	0x12, r24	; 18
	PORTD+=4;
  be:	82 b3       	in	r24, 0x12	; 18
  c0:	8c 5f       	subi	r24, 0xFC	; 252
  c2:	82 bb       	out	0x12, r24	; 18
  c4:	ca 01       	movw	r24, r20
  c6:	01 97       	sbiw	r24, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <divcmd4+0x34>
	_delay_ms(1);
	PORTD-=4;
  ca:	82 b3       	in	r24, 0x12	; 18
  cc:	84 50       	subi	r24, 0x04	; 4
  ce:	82 bb       	out	0x12, r24	; 18
  d0:	ca 01       	movw	r24, r20
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <divcmd4+0x40>
void divcmd4(int b)
{
	sendcmd(b&0xF0);//First 4 bits
	sendcmd((b<<4)&0xF0);//Next 4
	_delay_ms(1);
}
  d6:	08 95       	ret

000000d8 <lcdstr>:
void divcmd4(int);
void sendcmd(int);
void senddata(int);
void divdata4(int);
void lcdstr(void)
{
  d8:	82 e0       	ldi	r24, 0x02	; 2
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 49 00 	call	0x92	; 0x92 <divcmd4>
	divcmd4(0x02);//Home position Initialization with dividing function
	divcmd4(0x28);//4 bit mode
  e0:	88 e2       	ldi	r24, 0x28	; 40
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 49 00 	call	0x92	; 0x92 <divcmd4>
	divcmd4(0x06);//Increment Mode
  e8:	86 e0       	ldi	r24, 0x06	; 6
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 49 00 	call	0x92	; 0x92 <divcmd4>
	divcmd4(0x0c);//Display on cursor off
  f0:	8c e0       	ldi	r24, 0x0C	; 12
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0e 94 49 00 	call	0x92	; 0x92 <divcmd4>
}
  f8:	08 95       	ret

000000fa <divdata4>:
	sendcmd(b&0xF0);//First 4 bits
	sendcmd((b<<4)&0xF0);//Next 4
	_delay_ms(1);
}
void divdata4(int b)
{
  fa:	9c 01       	movw	r18, r24
  fc:	20 7f       	andi	r18, 0xF0	; 240
  fe:	30 70       	andi	r19, 0x00	; 0
 100:	22 bb       	out	0x12, r18	; 18
	PORTD-=4;
}
void senddata(int c)
{
	PORTD=c;
	PORTD+=5;
 102:	22 b3       	in	r18, 0x12	; 18
 104:	2b 5f       	subi	r18, 0xFB	; 251
 106:	22 bb       	out	0x12, r18	; 18
 108:	4a ef       	ldi	r20, 0xFA	; 250
 10a:	50 e0       	ldi	r21, 0x00	; 0
 10c:	fa 01       	movw	r30, r20
 10e:	31 97       	sbiw	r30, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <divdata4+0x14>
	_delay_ms(1);
	PORTD-=4;
 112:	22 b3       	in	r18, 0x12	; 18
 114:	24 50       	subi	r18, 0x04	; 4
 116:	22 bb       	out	0x12, r18	; 18
	_delay_ms(1);
	PORTD-=4;
}
void senddata(int c)
{
	PORTD=c;
 118:	34 e0       	ldi	r19, 0x04	; 4
 11a:	88 0f       	add	r24, r24
 11c:	99 1f       	adc	r25, r25
 11e:	3a 95       	dec	r19
 120:	e1 f7       	brne	.-8      	; 0x11a <divdata4+0x20>
 122:	90 70       	andi	r25, 0x00	; 0
 124:	82 bb       	out	0x12, r24	; 18
	PORTD+=5;
 126:	82 b3       	in	r24, 0x12	; 18
 128:	8b 5f       	subi	r24, 0xFB	; 251
 12a:	82 bb       	out	0x12, r24	; 18
 12c:	ca 01       	movw	r24, r20
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <divdata4+0x34>
	_delay_ms(1);
	PORTD-=4;
 132:	82 b3       	in	r24, 0x12	; 18
 134:	84 50       	subi	r24, 0x04	; 4
 136:	82 bb       	out	0x12, r24	; 18
 138:	ca 01       	movw	r24, r20
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <divdata4+0x40>
void divdata4(int b)
{
	senddata(b&0xF0);//First 4 bits
	senddata((b<<4)&0xF0);//Next 4
	_delay_ms(1);
}
 13e:	08 95       	ret

00000140 <sendcmd>:
void sendcmd(int c)
{
 140:	82 bb       	out	0x12, r24	; 18
	PORTD=c;
	PORTD+=4;
 142:	82 b3       	in	r24, 0x12	; 18
 144:	8c 5f       	subi	r24, 0xFC	; 252
 146:	82 bb       	out	0x12, r24	; 18
 148:	8a ef       	ldi	r24, 0xFA	; 250
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <sendcmd+0xc>
	_delay_ms(1);
	PORTD-=4;
 150:	82 b3       	in	r24, 0x12	; 18
 152:	84 50       	subi	r24, 0x04	; 4
 154:	82 bb       	out	0x12, r24	; 18
}
 156:	08 95       	ret

00000158 <senddata>:
void senddata(int c)
{
 158:	82 bb       	out	0x12, r24	; 18
	PORTD=c;
	PORTD+=5;
 15a:	82 b3       	in	r24, 0x12	; 18
 15c:	8b 5f       	subi	r24, 0xFB	; 251
 15e:	82 bb       	out	0x12, r24	; 18
 160:	8a ef       	ldi	r24, 0xFA	; 250
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	01 97       	sbiw	r24, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <senddata+0xc>
	_delay_ms(1);
	PORTD-=4;
 168:	82 b3       	in	r24, 0x12	; 18
 16a:	84 50       	subi	r24, 0x04	; 4
 16c:	82 bb       	out	0x12, r24	; 18
}
 16e:	08 95       	ret

00000170 <main>:
main()
{
 170:	df 92       	push	r13
 172:	ef 92       	push	r14
 174:	ff 92       	push	r15
 176:	0f 93       	push	r16
 178:	1f 93       	push	r17
 17a:	cf 93       	push	r28
 17c:	df 93       	push	r29
DDRD=0xFF;
 17e:	8f ef       	ldi	r24, 0xFF	; 255
 180:	81 bb       	out	0x11, r24	; 17
char *str="ABC";
int k=strlen(str),z=0;
lcdstr();
 182:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcdstr>
divcmd4(0x01);
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	0e 94 49 00 	call	0x92	; 0x92 <divcmd4>
 18e:	00 e0       	ldi	r16, 0x00	; 0
 190:	10 e0       	ldi	r17, 0x00	; 0
 192:	59 e1       	ldi	r21, 0x19	; 25
 194:	e5 2e       	mov	r14, r21
 196:	f1 2c       	mov	r15, r1
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 198:	41 e2       	ldi	r20, 0x21	; 33
 19a:	d4 2e       	mov	r13, r20
while(1)
{
divcmd4(0x80);
 19c:	80 e8       	ldi	r24, 0x80	; 128
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	0e 94 49 00 	call	0x92	; 0x92 <divcmd4>
 1a4:	80 e1       	ldi	r24, 0x10	; 16
 1a6:	97 e2       	ldi	r25, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1a8:	f7 01       	movw	r30, r14
 1aa:	31 97       	sbiw	r30, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <main+0x3a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1ae:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1b0:	d9 f7       	brne	.-10     	; 0x1a8 <main+0x38>
 1b2:	e8 01       	movw	r28, r16
 1b4:	05 c0       	rjmp	.+10     	; 0x1c0 <main+0x50>
_delay_ms(1000);
int i=0;
int s=z;
while(s>0)
{
	divdata4(' ');
 1b6:	80 e2       	ldi	r24, 0x20	; 32
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	0e 94 7d 00 	call	0xfa	; 0xfa <divdata4>
	s--;
 1be:	21 97       	sbiw	r28, 0x01	; 1
{
divcmd4(0x80);
_delay_ms(1000);
int i=0;
int s=z;
while(s>0)
 1c0:	20 97       	sbiw	r28, 0x00	; 0
 1c2:	c9 f7       	brne	.-14     	; 0x1b6 <main+0x46>
 1c4:	c0 e6       	ldi	r28, 0x60	; 96
 1c6:	d0 e0       	ldi	r29, 0x00	; 0
 1c8:	06 c0       	rjmp	.+12     	; 0x1d6 <main+0x66>
	divdata4(' ');
	s--;
}
while(str[i]!='\0')
{
divdata4(str[i]);
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	0e 94 7d 00 	call	0xfa	; 0xfa <divdata4>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 1d0:	8d 2d       	mov	r24, r13
 1d2:	8a 95       	dec	r24
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <main+0x62>
while(s>0)
{
	divdata4(' ');
	s--;
}
while(str[i]!='\0')
 1d6:	89 91       	ld	r24, Y+
 1d8:	88 23       	and	r24, r24
 1da:	b9 f7       	brne	.-18     	; 0x1ca <main+0x5a>
{
divdata4(str[i]);
_delay_us(100);
i++;
}
z++;
 1dc:	0f 5f       	subi	r16, 0xFF	; 255
 1de:	1f 4f       	sbci	r17, 0xFF	; 255
 1e0:	dd cf       	rjmp	.-70     	; 0x19c <main+0x2c>

000001e2 <_exit>:
 1e2:	f8 94       	cli

000001e4 <__stop_program>:
 1e4:	ff cf       	rjmp	.-2      	; 0x1e4 <__stop_program>
