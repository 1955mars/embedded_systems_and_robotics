
Maze_Solver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000130  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000021a  00000000  00000000  000001bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000e8  00000000  00000000  000003d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000022b  00000000  00000000  000004c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  000006ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000df  00000000  00000000  0000070c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000f0  00000000  00000000  000007eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000000d8  00000000  00000000  000008db  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e3       	ldi	r30, 0x30	; 48
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 96 00 	jmp	0x12c	; 0x12c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <main>:
#include<avr/io.h>
#include<util/delay.h>
main()
{
  92:	1f 93       	push	r17
	DDRA=0xF8;
  94:	88 ef       	ldi	r24, 0xF8	; 248
  96:	8a bb       	out	0x1a, r24	; 26
	DDRB=0xFF;
  98:	8f ef       	ldi	r24, 0xFF	; 255
  9a:	87 bb       	out	0x17, r24	; 23
	
	while(1)
	{
		if(PINA==0b00000110)
		{
			PORTB=5;
  9c:	25 e0       	ldi	r18, 0x05	; 5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9e:	aa ef       	ldi	r26, 0xFA	; 250
  a0:	b0 e0       	ldi	r27, 0x00	; 0
			PORTB=5;
			while(PINA!=5)
			{
				_delay_ms(1);
			}
			PORTB=4;
  a2:	14 e0       	ldi	r17, 0x04	; 4
  a4:	69 e1       	ldi	r22, 0x19	; 25
  a6:	70 e0       	ldi	r23, 0x00	; 0
			PORTB=5;
			while(PINA!=3)
			{
				_delay_ms(10);
			}
			PORTB=1;
  a8:	44 ec       	ldi	r20, 0xC4	; 196
  aa:	59 e0       	ldi	r21, 0x09	; 9
  ac:	31 e0       	ldi	r19, 0x01	; 1
	DDRA=0xF8;
	DDRB=0xFF;
	
	while(1)
	{
		if(PINA==0b00000110)
  ae:	89 b3       	in	r24, 0x19	; 25
  b0:	86 30       	cpi	r24, 0x06	; 6
  b2:	21 f4       	brne	.+8      	; 0xbc <main+0x2a>
		{
			PORTB=5;
  b4:	28 bb       	out	0x18, r18	; 24
			while(PINA==6)
  b6:	89 b3       	in	r24, 0x19	; 25
  b8:	86 30       	cpi	r24, 0x06	; 6
  ba:	e9 f3       	breq	.-6      	; 0xb6 <main+0x24>
			{
			}
		}
		if(PINA==0b00000100)
  bc:	89 b3       	in	r24, 0x19	; 25
  be:	84 30       	cpi	r24, 0x04	; 4
  c0:	c1 f4       	brne	.+48     	; 0xf2 <main+0x60>
		{
			PORTB=5;
  c2:	28 bb       	out	0x18, r18	; 24
  c4:	03 c0       	rjmp	.+6      	; 0xcc <main+0x3a>
  c6:	cd 01       	movw	r24, r26
  c8:	01 97       	sbiw	r24, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <main+0x36>
			while(PINA!=5)
  cc:	89 b3       	in	r24, 0x19	; 25
  ce:	85 30       	cpi	r24, 0x05	; 5
  d0:	d1 f7       	brne	.-12     	; 0xc6 <main+0x34>
			{
				_delay_ms(1);
			}
			PORTB=4;
  d2:	18 bb       	out	0x18, r17	; 24
  d4:	80 ef       	ldi	r24, 0xF0	; 240
  d6:	95 e5       	ldi	r25, 0x55	; 85
  d8:	fb 01       	movw	r30, r22
  da:	31 97       	sbiw	r30, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <main+0x48>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  de:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  e0:	d9 f7       	brne	.-10     	; 0xd8 <main+0x46>
			_delay_ms(2200);
			PORTB=5;
  e2:	28 bb       	out	0x18, r18	; 24
  e4:	03 c0       	rjmp	.+6      	; 0xec <main+0x5a>
  e6:	ca 01       	movw	r24, r20
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <main+0x56>
			while(PINA!=6)
  ec:	89 b3       	in	r24, 0x19	; 25
  ee:	86 30       	cpi	r24, 0x06	; 6
  f0:	d1 f7       	brne	.-12     	; 0xe6 <main+0x54>
			{
			_delay_ms(10);
			}
		}

		if(PINA==0b00000010)
  f2:	89 b3       	in	r24, 0x19	; 25
  f4:	82 30       	cpi	r24, 0x02	; 2
  f6:	d9 f6       	brne	.-74     	; 0xae <main+0x1c>
		{
			PORTB=5;
  f8:	28 bb       	out	0x18, r18	; 24
  fa:	03 c0       	rjmp	.+6      	; 0x102 <main+0x70>
  fc:	ca 01       	movw	r24, r20
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <main+0x6c>
			while(PINA!=3)
 102:	89 b3       	in	r24, 0x19	; 25
 104:	83 30       	cpi	r24, 0x03	; 3
 106:	d1 f7       	brne	.-12     	; 0xfc <main+0x6a>
			{
				_delay_ms(10);
			}
			PORTB=1;
 108:	38 bb       	out	0x18, r19	; 24
 10a:	80 ef       	ldi	r24, 0xF0	; 240
 10c:	95 e5       	ldi	r25, 0x55	; 85
 10e:	fb 01       	movw	r30, r22
 110:	31 97       	sbiw	r30, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <main+0x7e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 114:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 116:	d9 f7       	brne	.-10     	; 0x10e <main+0x7c>
			_delay_ms(2200);
			PORTB=5;
 118:	28 bb       	out	0x18, r18	; 24
 11a:	03 c0       	rjmp	.+6      	; 0x122 <main+0x90>
 11c:	cd 01       	movw	r24, r26
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <main+0x8c>
			while(PINA!=6)
 122:	89 b3       	in	r24, 0x19	; 25
 124:	86 30       	cpi	r24, 0x06	; 6
 126:	09 f4       	brne	.+2      	; 0x12a <main+0x98>
 128:	c2 cf       	rjmp	.-124    	; 0xae <main+0x1c>
 12a:	f8 cf       	rjmp	.-16     	; 0x11c <main+0x8a>

0000012c <_exit>:
 12c:	f8 94       	cli

0000012e <__stop_program>:
 12e:	ff cf       	rjmp	.-2      	; 0x12e <__stop_program>
