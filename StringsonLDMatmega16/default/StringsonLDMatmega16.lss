
StringsonLDMatmega16.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000016e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000001c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  000001e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000018e  00000000  00000000  000001fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000d8  00000000  00000000  0000038b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001a0  00000000  00000000  00000463  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000604  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000ea  00000000  00000000  00000624  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000140  00000000  00000000  0000070e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000060  00000000  00000000  0000084e  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e6       	ldi	r30, 0x6E	; 110
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 b5 00 	jmp	0x16a	; 0x16a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <main>:
#include<avr/io.h>
#include<util/delay.h>
main()
{
  92:	0f 93       	push	r16
  94:	1f 93       	push	r17
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
DDRB=0xFF;
  9a:	8f ef       	ldi	r24, 0xFF	; 255
  9c:	87 bb       	out	0x17, r24	; 23
DDRD=0xFF;
  9e:	81 bb       	out	0x11, r24	; 17
  a0:	80 e8       	ldi	r24, 0x80	; 128
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	c2 e0       	ldi	r28, 0x02	; 2
  a6:	d0 e0       	ldi	r29, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  a8:	08 ea       	ldi	r16, 0xA8	; 168
  aa:	11 e6       	ldi	r17, 0x61	; 97
  ac:	01 c0       	rjmp	.+2      	; 0xb0 <main+0x1e>
		j=j+(i/2);
		PORTD=~k;
		_delay_ms(100);
	}
}
z++;
  ae:	21 96       	adiw	r28, 0x01	; 1
int z=2,j;
while(1)
{
for(int k=128;k>=1;k=k/2)
{
if (z%2==0)
  b0:	c0 fd       	sbrc	r28, 0
  b2:	15 c0       	rjmp	.+42     	; 0xde <main+0x4c>
  b4:	61 e0       	ldi	r22, 0x01	; 1
  b6:	70 e0       	ldi	r23, 0x00	; 0
  b8:	41 e0       	ldi	r20, 0x01	; 1
  ba:	50 e0       	ldi	r21, 0x00	; 0
  bc:	28 e0       	ldi	r18, 0x08	; 8
  be:	30 e0       	ldi	r19, 0x00	; 0
	j=1;
	for(int i=1;i<=128;i=i*2)
	{
		PORTB=j;
		j=j+(i*2);
		PORTD=~k;
  c0:	a8 2f       	mov	r26, r24
  c2:	a0 95       	com	r26
if (z%2==0)
{
	j=1;
	for(int i=1;i<=128;i=i*2)
	{
		PORTB=j;
  c4:	68 bb       	out	0x18, r22	; 24
		j=j+(i*2);
  c6:	44 0f       	add	r20, r20
  c8:	55 1f       	adc	r21, r21
  ca:	64 0f       	add	r22, r20
  cc:	75 1f       	adc	r23, r21
		PORTD=~k;
  ce:	a2 bb       	out	0x12, r26	; 18
  d0:	f8 01       	movw	r30, r16
  d2:	31 97       	sbiw	r30, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <main+0x40>
  d6:	21 50       	subi	r18, 0x01	; 1
  d8:	30 40       	sbci	r19, 0x00	; 0
for(int k=128;k>=1;k=k/2)
{
if (z%2==0)
{
	j=1;
	for(int i=1;i<=128;i=i*2)
  da:	a1 f7       	brne	.-24     	; 0xc4 <main+0x32>
  dc:	14 c0       	rjmp	.+40     	; 0x106 <main+0x74>
  de:	60 e8       	ldi	r22, 0x80	; 128
  e0:	70 e0       	ldi	r23, 0x00	; 0
  e2:	40 e8       	ldi	r20, 0x80	; 128
  e4:	50 e0       	ldi	r21, 0x00	; 0
  e6:	28 e0       	ldi	r18, 0x08	; 8
  e8:	30 e0       	ldi	r19, 0x00	; 0
	j=128;
	for(int i=128;i>=1;i=i/2)
	{
		PORTB=j;
		j=j+(i/2);
		PORTD=~k;
  ea:	a8 2f       	mov	r26, r24
  ec:	a0 95       	com	r26
else
{
	j=128;
	for(int i=128;i>=1;i=i/2)
	{
		PORTB=j;
  ee:	48 bb       	out	0x18, r20	; 24
		j=j+(i/2);
  f0:	75 95       	asr	r23
  f2:	67 95       	ror	r22
  f4:	46 0f       	add	r20, r22
  f6:	57 1f       	adc	r21, r23
		PORTD=~k;
  f8:	a2 bb       	out	0x12, r26	; 18
  fa:	f8 01       	movw	r30, r16
  fc:	31 97       	sbiw	r30, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <main+0x6a>
 100:	21 50       	subi	r18, 0x01	; 1
 102:	30 40       	sbci	r19, 0x00	; 0
	}
}
else
{
	j=128;
	for(int i=128;i>=1;i=i/2)
 104:	a1 f7       	brne	.-24     	; 0xee <main+0x5c>
DDRB=0xFF;
DDRD=0xFF;
int z=2,j;
while(1)
{
for(int k=128;k>=1;k=k/2)
 106:	62 e0       	ldi	r22, 0x02	; 2
 108:	70 e0       	ldi	r23, 0x00	; 0
 10a:	0e 94 8e 00 	call	0x11c	; 0x11c <__divmodhi4>
 10e:	cb 01       	movw	r24, r22
 110:	16 16       	cp	r1, r22
 112:	17 06       	cpc	r1, r23
 114:	64 f2       	brlt	.-104    	; 0xae <main+0x1c>
 116:	80 e8       	ldi	r24, 0x80	; 128
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	c9 cf       	rjmp	.-110    	; 0xae <main+0x1c>

0000011c <__divmodhi4>:
 11c:	97 fb       	bst	r25, 7
 11e:	09 2e       	mov	r0, r25
 120:	07 26       	eor	r0, r23
 122:	0a d0       	rcall	.+20     	; 0x138 <__divmodhi4_neg1>
 124:	77 fd       	sbrc	r23, 7
 126:	04 d0       	rcall	.+8      	; 0x130 <__divmodhi4_neg2>
 128:	0c d0       	rcall	.+24     	; 0x142 <__udivmodhi4>
 12a:	06 d0       	rcall	.+12     	; 0x138 <__divmodhi4_neg1>
 12c:	00 20       	and	r0, r0
 12e:	1a f4       	brpl	.+6      	; 0x136 <__divmodhi4_exit>

00000130 <__divmodhi4_neg2>:
 130:	70 95       	com	r23
 132:	61 95       	neg	r22
 134:	7f 4f       	sbci	r23, 0xFF	; 255

00000136 <__divmodhi4_exit>:
 136:	08 95       	ret

00000138 <__divmodhi4_neg1>:
 138:	f6 f7       	brtc	.-4      	; 0x136 <__divmodhi4_exit>
 13a:	90 95       	com	r25
 13c:	81 95       	neg	r24
 13e:	9f 4f       	sbci	r25, 0xFF	; 255
 140:	08 95       	ret

00000142 <__udivmodhi4>:
 142:	aa 1b       	sub	r26, r26
 144:	bb 1b       	sub	r27, r27
 146:	51 e1       	ldi	r21, 0x11	; 17
 148:	07 c0       	rjmp	.+14     	; 0x158 <__udivmodhi4_ep>

0000014a <__udivmodhi4_loop>:
 14a:	aa 1f       	adc	r26, r26
 14c:	bb 1f       	adc	r27, r27
 14e:	a6 17       	cp	r26, r22
 150:	b7 07       	cpc	r27, r23
 152:	10 f0       	brcs	.+4      	; 0x158 <__udivmodhi4_ep>
 154:	a6 1b       	sub	r26, r22
 156:	b7 0b       	sbc	r27, r23

00000158 <__udivmodhi4_ep>:
 158:	88 1f       	adc	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	5a 95       	dec	r21
 15e:	a9 f7       	brne	.-22     	; 0x14a <__udivmodhi4_loop>
 160:	80 95       	com	r24
 162:	90 95       	com	r25
 164:	bc 01       	movw	r22, r24
 166:	cd 01       	movw	r24, r26
 168:	08 95       	ret

0000016a <_exit>:
 16a:	f8 94       	cli

0000016c <__stop_program>:
 16c:	ff cf       	rjmp	.-2      	; 0x16c <__stop_program>
