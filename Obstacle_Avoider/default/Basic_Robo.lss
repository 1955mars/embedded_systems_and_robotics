
Basic_Robo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000278  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006a  00800060  00000278  000002ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  00000356  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000066  00000000  00000000  00000376  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000365  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000129  00000000  00000000  00000741  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000039f  00000000  00000000  0000086a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000080  00000000  00000000  00000c0c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000117  00000000  00000000  00000c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000160  00000000  00000000  00000da3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00000f03  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e7       	ldi	r30, 0x78	; 120
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 3c       	cpi	r26, 0xCA	; 202
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	aa ec       	ldi	r26, 0xCA	; 202
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 3c       	cpi	r26, 0xCA	; 202
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b9 00 	call	0x172	; 0x172 <main>
  8a:	0c 94 3a 01 	jmp	0x274	; 0x274 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <sendcmd>:
	senddata(b&0xF0);//First 4 bits
	senddata((b<<4)&0xF0);//Next 4
	_delay_ms(1);
}
void sendcmd(int c)
{
  92:	82 bb       	out	0x12, r24	; 18
	PORTD=c;
	PORTD+=4;
  94:	82 b3       	in	r24, 0x12	; 18
  96:	8c 5f       	subi	r24, 0xFC	; 252
  98:	82 bb       	out	0x12, r24	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9a:	8a ef       	ldi	r24, 0xFA	; 250
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <sendcmd+0xc>
	_delay_ms(1);
	PORTD-=4;
  a2:	82 b3       	in	r24, 0x12	; 18
  a4:	84 50       	subi	r24, 0x04	; 4
  a6:	82 bb       	out	0x12, r24	; 18
}
  a8:	08 95       	ret

000000aa <divcmd>:
	divcmd(0x28);//4 bit mode
	divcmd(0x06);//Increment Mode
	divcmd(0x0c);//Display on cursor off
}
void divcmd(int b)
{
  aa:	0f 93       	push	r16
  ac:	1f 93       	push	r17
  ae:	8c 01       	movw	r16, r24
	sendcmd(b&0xF0);//First 4 bits
  b0:	80 7f       	andi	r24, 0xF0	; 240
  b2:	90 70       	andi	r25, 0x00	; 0
  b4:	0e 94 49 00 	call	0x92	; 0x92 <sendcmd>
	sendcmd((b<<4)&0xF0);//Next 4
  b8:	84 e0       	ldi	r24, 0x04	; 4
  ba:	00 0f       	add	r16, r16
  bc:	11 1f       	adc	r17, r17
  be:	8a 95       	dec	r24
  c0:	e1 f7       	brne	.-8      	; 0xba <divcmd+0x10>
  c2:	c8 01       	movw	r24, r16
  c4:	90 70       	andi	r25, 0x00	; 0
  c6:	0e 94 49 00 	call	0x92	; 0x92 <sendcmd>
  ca:	8a ef       	ldi	r24, 0xFA	; 250
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <divcmd+0x24>
	_delay_ms(1);
}
  d2:	1f 91       	pop	r17
  d4:	0f 91       	pop	r16
  d6:	08 95       	ret

000000d8 <lcdstr>:
void lcdstr(void)
{
  d8:	82 e0       	ldi	r24, 0x02	; 2
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
	divcmd(0x02);//Home position Initialization with dividing function
	divcmd(0x28);//4 bit mode
  e0:	88 e2       	ldi	r24, 0x28	; 40
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
	divcmd(0x06);//Increment Mode
  e8:	86 e0       	ldi	r24, 0x06	; 6
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
	divcmd(0x0c);//Display on cursor off
  f0:	8c e0       	ldi	r24, 0x0C	; 12
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
}
  f8:	08 95       	ret

000000fa <senddata>:
	PORTD+=4;
	_delay_ms(1);
	PORTD-=4;
}
void senddata(int c)
{
  fa:	82 bb       	out	0x12, r24	; 18
	PORTD=c;
	PORTD+=5;
  fc:	82 b3       	in	r24, 0x12	; 18
  fe:	8b 5f       	subi	r24, 0xFB	; 251
 100:	82 bb       	out	0x12, r24	; 18
 102:	8a ef       	ldi	r24, 0xFA	; 250
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <senddata+0xc>
	_delay_ms(1);
	PORTD-=4;
 10a:	82 b3       	in	r24, 0x12	; 18
 10c:	84 50       	subi	r24, 0x04	; 4
 10e:	82 bb       	out	0x12, r24	; 18
}
 110:	08 95       	ret

00000112 <divdata>:
	sendcmd(b&0xF0);//First 4 bits
	sendcmd((b<<4)&0xF0);//Next 4
	_delay_ms(1);
}
void divdata(int b)
{
 112:	0f 93       	push	r16
 114:	1f 93       	push	r17
 116:	8c 01       	movw	r16, r24
	senddata(b&0xF0);//First 4 bits
 118:	80 7f       	andi	r24, 0xF0	; 240
 11a:	90 70       	andi	r25, 0x00	; 0
 11c:	0e 94 7d 00 	call	0xfa	; 0xfa <senddata>
	senddata((b<<4)&0xF0);//Next 4
 120:	94 e0       	ldi	r25, 0x04	; 4
 122:	00 0f       	add	r16, r16
 124:	11 1f       	adc	r17, r17
 126:	9a 95       	dec	r25
 128:	e1 f7       	brne	.-8      	; 0x122 <divdata+0x10>
 12a:	c8 01       	movw	r24, r16
 12c:	90 70       	andi	r25, 0x00	; 0
 12e:	0e 94 7d 00 	call	0xfa	; 0xfa <senddata>
 132:	8a ef       	ldi	r24, 0xFA	; 250
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <divdata+0x24>
	_delay_ms(1);
}
 13a:	1f 91       	pop	r17
 13c:	0f 91       	pop	r16
 13e:	08 95       	ret

00000140 <disp_string>:
	_delay_ms(1);
	PORTD-=4;
}

void disp_string(char *str, int pos)
{
 140:	0f 93       	push	r16
 142:	1f 93       	push	r17
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
 148:	18 2f       	mov	r17, r24
 14a:	09 2f       	mov	r16, r25
 14c:	cb 01       	movw	r24, r22
	int i=0;
	divcmd(pos);
 14e:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
 152:	21 2f       	mov	r18, r17
 154:	30 2f       	mov	r19, r16
 156:	c9 01       	movw	r24, r18
 158:	ec 01       	movw	r28, r24
 15a:	03 c0       	rjmp	.+6      	; 0x162 <disp_string+0x22>
	while(str[i]!='\0')
	{
		divdata(str[i]);
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	0e 94 89 00 	call	0x112	; 0x112 <divdata>

void disp_string(char *str, int pos)
{
	int i=0;
	divcmd(pos);
	while(str[i]!='\0')
 162:	89 91       	ld	r24, Y+
 164:	88 23       	and	r24, r24
 166:	d1 f7       	brne	.-12     	; 0x15c <disp_string+0x1c>
	{
		divdata(str[i]);
		i++;
	}

}
 168:	df 91       	pop	r29
 16a:	cf 91       	pop	r28
 16c:	1f 91       	pop	r17
 16e:	0f 91       	pop	r16
 170:	08 95       	ret

00000172 <main>:
#include<avr/io.h>
#include<util/delay.h>
#include<string.h>
#include<mars/lcd.h>
void main()
{
 172:	ff 92       	push	r15
 174:	0f 93       	push	r16
 176:	1f 93       	push	r17
 178:	cf 93       	push	r28
 17a:	df 93       	push	r29
	DDRD=0xFF;
 17c:	1f ef       	ldi	r17, 0xFF	; 255
 17e:	11 bb       	out	0x11, r17	; 17
	lcdstr();
 180:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcdstr>
	DDRB=0xFF;
 184:	17 bb       	out	0x17, r17	; 23
	DDRA=0xFC;
 186:	8c ef       	ldi	r24, 0xFC	; 252
 188:	8a bb       	out	0x1a, r24	; 26
		if(PINA==0)
		{
			divcmd(0x01);
			while(PINA==0)
			{	
				PORTB=5;
 18a:	25 e0       	ldi	r18, 0x05	; 5
 18c:	f2 2e       	mov	r15, r18
 18e:	c8 ea       	ldi	r28, 0xA8	; 168
 190:	d1 e6       	ldi	r29, 0x61	; 97
		if(PINA==2)
		{	
			divcmd(0x01);
			while(PINA==2)
			{
				PORTB=4;
 192:	04 e0       	ldi	r16, 0x04	; 4
		if(PINA==3)
		{
			divcmd(0x01);
			while(PINA==3)
			{
				PORTB=0x0a;
 194:	1a e0       	ldi	r17, 0x0A	; 10
	lcdstr();
	DDRB=0xFF;
	DDRA=0xFC;
	while(1)
	{
		if(PINA==0)
 196:	89 b3       	in	r24, 0x19	; 25
 198:	88 23       	and	r24, r24
 19a:	c1 f4       	brne	.+48     	; 0x1cc <main+0x5a>
		{
			divcmd(0x01);
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
 1a4:	10 c0       	rjmp	.+32     	; 0x1c6 <main+0x54>
			while(PINA==0)
			{	
				PORTB=5;
 1a6:	f8 ba       	out	0x18, r15	; 24
				disp_string("Moving_Front",0x81);
 1a8:	61 e8       	ldi	r22, 0x81	; 129
 1aa:	70 e0       	ldi	r23, 0x00	; 0
 1ac:	80 e6       	ldi	r24, 0x60	; 96
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	0e 94 a0 00 	call	0x140	; 0x140 <disp_string>
				disp_string("NO OBSTACLE",0xc1);
 1b4:	61 ec       	ldi	r22, 0xC1	; 193
 1b6:	70 e0       	ldi	r23, 0x00	; 0
 1b8:	8d e6       	ldi	r24, 0x6D	; 109
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	0e 94 a0 00 	call	0x140	; 0x140 <disp_string>
 1c0:	ce 01       	movw	r24, r28
 1c2:	01 97       	sbiw	r24, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <main+0x50>
	while(1)
	{
		if(PINA==0)
		{
			divcmd(0x01);
			while(PINA==0)
 1c6:	89 b3       	in	r24, 0x19	; 25
 1c8:	88 23       	and	r24, r24
 1ca:	69 f3       	breq	.-38     	; 0x1a6 <main+0x34>
				disp_string("Moving_Front",0x81);
				disp_string("NO OBSTACLE",0xc1);
				_delay_ms(100);
			}
		}
		if(PINA==1)
 1cc:	89 b3       	in	r24, 0x19	; 25
 1ce:	81 30       	cpi	r24, 0x01	; 1
 1d0:	c1 f4       	brne	.+48     	; 0x202 <main+0x90>
		{
			divcmd(0x01);
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
 1da:	10 c0       	rjmp	.+32     	; 0x1fc <main+0x8a>
			while(PINA==1)
			{
				PORTB=1;
 1dc:	88 bb       	out	0x18, r24	; 24
				disp_string("Moving_Left",0x81);
 1de:	61 e8       	ldi	r22, 0x81	; 129
 1e0:	70 e0       	ldi	r23, 0x00	; 0
 1e2:	89 e7       	ldi	r24, 0x79	; 121
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	0e 94 a0 00 	call	0x140	; 0x140 <disp_string>
				disp_string("OBSTACLE_RIGHT",0xc1);
 1ea:	61 ec       	ldi	r22, 0xC1	; 193
 1ec:	70 e0       	ldi	r23, 0x00	; 0
 1ee:	85 e8       	ldi	r24, 0x85	; 133
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	0e 94 a0 00 	call	0x140	; 0x140 <disp_string>
 1f6:	ce 01       	movw	r24, r28
 1f8:	01 97       	sbiw	r24, 0x01	; 1
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <main+0x86>
			}
		}
		if(PINA==1)
		{
			divcmd(0x01);
			while(PINA==1)
 1fc:	89 b3       	in	r24, 0x19	; 25
 1fe:	81 30       	cpi	r24, 0x01	; 1
 200:	69 f3       	breq	.-38     	; 0x1dc <main+0x6a>
				disp_string("Moving_Left",0x81);
				disp_string("OBSTACLE_RIGHT",0xc1);
				_delay_ms(100);
			}
		}
		if(PINA==2)
 202:	89 b3       	in	r24, 0x19	; 25
 204:	82 30       	cpi	r24, 0x02	; 2
 206:	c1 f4       	brne	.+48     	; 0x238 <main+0xc6>
		{	
			divcmd(0x01);
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
 210:	10 c0       	rjmp	.+32     	; 0x232 <main+0xc0>
			while(PINA==2)
			{
				PORTB=4;
 212:	08 bb       	out	0x18, r16	; 24
				disp_string("Moving_Right",0x81);
 214:	61 e8       	ldi	r22, 0x81	; 129
 216:	70 e0       	ldi	r23, 0x00	; 0
 218:	84 e9       	ldi	r24, 0x94	; 148
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	0e 94 a0 00 	call	0x140	; 0x140 <disp_string>
				disp_string("OBSTACLE_LEFT",0xc1);
 220:	61 ec       	ldi	r22, 0xC1	; 193
 222:	70 e0       	ldi	r23, 0x00	; 0
 224:	81 ea       	ldi	r24, 0xA1	; 161
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	0e 94 a0 00 	call	0x140	; 0x140 <disp_string>
 22c:	ce 01       	movw	r24, r28
 22e:	01 97       	sbiw	r24, 0x01	; 1
 230:	f1 f7       	brne	.-4      	; 0x22e <main+0xbc>
			}
		}
		if(PINA==2)
		{	
			divcmd(0x01);
			while(PINA==2)
 232:	89 b3       	in	r24, 0x19	; 25
 234:	82 30       	cpi	r24, 0x02	; 2
 236:	69 f3       	breq	.-38     	; 0x212 <main+0xa0>
				disp_string("Moving_Right",0x81);
				disp_string("OBSTACLE_LEFT",0xc1);
				_delay_ms(100);
			}
		}
		if(PINA==3)
 238:	89 b3       	in	r24, 0x19	; 25
 23a:	83 30       	cpi	r24, 0x03	; 3
 23c:	09 f0       	breq	.+2      	; 0x240 <main+0xce>
 23e:	ab cf       	rjmp	.-170    	; 0x196 <main+0x24>
		{
			divcmd(0x01);
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
 248:	10 c0       	rjmp	.+32     	; 0x26a <main+0xf8>
			while(PINA==3)
			{
				PORTB=0x0a;
 24a:	18 bb       	out	0x18, r17	; 24
				disp_string("Moving_Back",0x81);
 24c:	61 e8       	ldi	r22, 0x81	; 129
 24e:	70 e0       	ldi	r23, 0x00	; 0
 250:	8f ea       	ldi	r24, 0xAF	; 175
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	0e 94 a0 00 	call	0x140	; 0x140 <disp_string>
				disp_string("OBSTACLE_STRT",0xc1);
 258:	61 ec       	ldi	r22, 0xC1	; 193
 25a:	70 e0       	ldi	r23, 0x00	; 0
 25c:	8b eb       	ldi	r24, 0xBB	; 187
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	0e 94 a0 00 	call	0x140	; 0x140 <disp_string>
 264:	ce 01       	movw	r24, r28
 266:	01 97       	sbiw	r24, 0x01	; 1
 268:	f1 f7       	brne	.-4      	; 0x266 <main+0xf4>
			}
		}
		if(PINA==3)
		{
			divcmd(0x01);
			while(PINA==3)
 26a:	89 b3       	in	r24, 0x19	; 25
 26c:	83 30       	cpi	r24, 0x03	; 3
 26e:	09 f0       	breq	.+2      	; 0x272 <main+0x100>
 270:	92 cf       	rjmp	.-220    	; 0x196 <main+0x24>
 272:	eb cf       	rjmp	.-42     	; 0x24a <main+0xd8>

00000274 <_exit>:
 274:	f8 94       	cli

00000276 <__stop_program>:
 276:	ff cf       	rjmp	.-2      	; 0x276 <__stop_program>
