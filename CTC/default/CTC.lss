
CTC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000300  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00000300  00000374  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  00000382  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000090  00000000  00000000  000003a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000387  00000000  00000000  00000432  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000188  00000000  00000000  000007b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000037d  00000000  00000000  00000941  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000b0  00000000  00000000  00000cc0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000127  00000000  00000000  00000d70  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000001d8  00000000  00000000  00000e97  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  0000106f  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e0       	ldi	r30, 0x00	; 0
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 36       	cpi	r26, 0x6E	; 110
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <main>
  8a:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <sendcmd>:
	senddata(b&0xF0);//First 4 bits
	senddata((b<<4)&0xF0);//Next 4
	_delay_ms(1);
}
void sendcmd(int c)
{
  92:	85 bb       	out	0x15, r24	; 21
	PORTC=c;
	PORTC+=4;
  94:	85 b3       	in	r24, 0x15	; 21
  96:	8c 5f       	subi	r24, 0xFC	; 252
  98:	85 bb       	out	0x15, r24	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9a:	80 ed       	ldi	r24, 0xD0	; 208
  9c:	97 e0       	ldi	r25, 0x07	; 7
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <sendcmd+0xc>
	_delay_ms(1);
	PORTC-=4;
  a2:	85 b3       	in	r24, 0x15	; 21
  a4:	84 50       	subi	r24, 0x04	; 4
  a6:	85 bb       	out	0x15, r24	; 21
}
  a8:	08 95       	ret

000000aa <divcmd>:
	divcmd(0x28);//4 bit mode
	divcmd(0x06);//Increment Mode
	divcmd(0x0c);//Display on cursor off
}
void divcmd(int b)
{
  aa:	0f 93       	push	r16
  ac:	1f 93       	push	r17
  ae:	8c 01       	movw	r16, r24
	sendcmd(b&0xF0);//First 4 bits
  b0:	80 7f       	andi	r24, 0xF0	; 240
  b2:	90 70       	andi	r25, 0x00	; 0
  b4:	0e 94 49 00 	call	0x92	; 0x92 <sendcmd>
	sendcmd((b<<4)&0xF0);//Next 4
  b8:	84 e0       	ldi	r24, 0x04	; 4
  ba:	00 0f       	add	r16, r16
  bc:	11 1f       	adc	r17, r17
  be:	8a 95       	dec	r24
  c0:	e1 f7       	brne	.-8      	; 0xba <divcmd+0x10>
  c2:	c8 01       	movw	r24, r16
  c4:	90 70       	andi	r25, 0x00	; 0
  c6:	0e 94 49 00 	call	0x92	; 0x92 <sendcmd>
  ca:	80 ed       	ldi	r24, 0xD0	; 208
  cc:	97 e0       	ldi	r25, 0x07	; 7
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <divcmd+0x24>
	_delay_ms(1);
}
  d2:	1f 91       	pop	r17
  d4:	0f 91       	pop	r16
  d6:	08 95       	ret

000000d8 <lcdstr>:
void lcdstr(void)
{
  d8:	82 e0       	ldi	r24, 0x02	; 2
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
	divcmd(0x02);//Home position Initialization with dividing function
	divcmd(0x28);//4 bit mode
  e0:	88 e2       	ldi	r24, 0x28	; 40
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
	divcmd(0x06);//Increment Mode
  e8:	86 e0       	ldi	r24, 0x06	; 6
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
	divcmd(0x0c);//Display on cursor off
  f0:	8c e0       	ldi	r24, 0x0C	; 12
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
}
  f8:	08 95       	ret

000000fa <senddata>:
	PORTC+=4;
	_delay_ms(1);
	PORTC-=4;
}
void senddata(int c)
{
  fa:	85 bb       	out	0x15, r24	; 21
	PORTC=c;
	PORTC+=5;
  fc:	85 b3       	in	r24, 0x15	; 21
  fe:	8b 5f       	subi	r24, 0xFB	; 251
 100:	85 bb       	out	0x15, r24	; 21
 102:	80 ed       	ldi	r24, 0xD0	; 208
 104:	97 e0       	ldi	r25, 0x07	; 7
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <senddata+0xc>
	_delay_ms(1);
	PORTC-=4;
 10a:	85 b3       	in	r24, 0x15	; 21
 10c:	84 50       	subi	r24, 0x04	; 4
 10e:	85 bb       	out	0x15, r24	; 21
}
 110:	08 95       	ret

00000112 <divdata>:
	sendcmd(b&0xF0);//First 4 bits
	sendcmd((b<<4)&0xF0);//Next 4
	_delay_ms(1);
}
void divdata(int b)
{
 112:	0f 93       	push	r16
 114:	1f 93       	push	r17
 116:	8c 01       	movw	r16, r24
	senddata(b&0xF0);//First 4 bits
 118:	80 7f       	andi	r24, 0xF0	; 240
 11a:	90 70       	andi	r25, 0x00	; 0
 11c:	0e 94 7d 00 	call	0xfa	; 0xfa <senddata>
	senddata((b<<4)&0xF0);//Next 4
 120:	94 e0       	ldi	r25, 0x04	; 4
 122:	00 0f       	add	r16, r16
 124:	11 1f       	adc	r17, r17
 126:	9a 95       	dec	r25
 128:	e1 f7       	brne	.-8      	; 0x122 <divdata+0x10>
 12a:	c8 01       	movw	r24, r16
 12c:	90 70       	andi	r25, 0x00	; 0
 12e:	0e 94 7d 00 	call	0xfa	; 0xfa <senddata>
 132:	80 ed       	ldi	r24, 0xD0	; 208
 134:	97 e0       	ldi	r25, 0x07	; 7
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <divdata+0x24>
	_delay_ms(1);
}
 13a:	1f 91       	pop	r17
 13c:	0f 91       	pop	r16
 13e:	08 95       	ret

00000140 <disp_string>:
	_delay_ms(1);
	PORTC-=4;
}

void disp_string(char *str, int pos)
{
 140:	0f 93       	push	r16
 142:	1f 93       	push	r17
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
 148:	18 2f       	mov	r17, r24
 14a:	09 2f       	mov	r16, r25
 14c:	cb 01       	movw	r24, r22
	int i=0;
	divcmd(pos);
 14e:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
 152:	21 2f       	mov	r18, r17
 154:	30 2f       	mov	r19, r16
 156:	c9 01       	movw	r24, r18
 158:	ec 01       	movw	r28, r24
 15a:	03 c0       	rjmp	.+6      	; 0x162 <disp_string+0x22>
	while(str[i]!='\0')
	{
		divdata(str[i]);
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	0e 94 89 00 	call	0x112	; 0x112 <divdata>

void disp_string(char *str, int pos)
{
	int i=0;
	divcmd(pos);
	while(str[i]!='\0')
 162:	89 91       	ld	r24, Y+
 164:	88 23       	and	r24, r24
 166:	d1 f7       	brne	.-12     	; 0x15c <disp_string+0x1c>
	{
		divdata(str[i]);
		i++;
	}

}
 168:	df 91       	pop	r29
 16a:	cf 91       	pop	r28
 16c:	1f 91       	pop	r17
 16e:	0f 91       	pop	r16
 170:	08 95       	ret

00000172 <disp_number>:

void disp_number(unsigned int x,int z)
{
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
 176:	ec 01       	movw	r28, r24
 178:	cb 01       	movw	r24, r22
	unsigned int i;
	i=x;
	divcmd(z);       
 17a:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
	if(i==0)
 17e:	20 97       	sbiw	r28, 0x00	; 0
 180:	c9 f4       	brne	.+50     	; 0x1b4 <disp_number+0x42>
	{
		divdata(48);
 182:	80 e3       	ldi	r24, 0x30	; 48
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	0e 94 89 00 	call	0x112	; 0x112 <divdata>
 18a:	c0 e0       	ldi	r28, 0x00	; 0
 18c:	d0 e0       	ldi	r29, 0x00	; 0
 18e:	12 c0       	rjmp	.+36     	; 0x1b4 <disp_number+0x42>
	}
	while(i>0)
	{
		divcmd(0x04);
 190:	84 e0       	ldi	r24, 0x04	; 4
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
		divdata((i%10)+48);
 198:	ce 01       	movw	r24, r28
 19a:	6a e0       	ldi	r22, 0x0A	; 10
 19c:	70 e0       	ldi	r23, 0x00	; 0
 19e:	0e 94 48 01 	call	0x290	; 0x290 <__udivmodhi4>
 1a2:	c0 96       	adiw	r24, 0x30	; 48
 1a4:	0e 94 89 00 	call	0x112	; 0x112 <divdata>
		i=i/10;
 1a8:	ce 01       	movw	r24, r28
 1aa:	6a e0       	ldi	r22, 0x0A	; 10
 1ac:	70 e0       	ldi	r23, 0x00	; 0
 1ae:	0e 94 48 01 	call	0x290	; 0x290 <__udivmodhi4>
 1b2:	eb 01       	movw	r28, r22
	divcmd(z);       
	if(i==0)
	{
		divdata(48);
	}
	while(i>0)
 1b4:	20 97       	sbiw	r28, 0x00	; 0
 1b6:	61 f7       	brne	.-40     	; 0x190 <disp_number+0x1e>
	{
		divcmd(0x04);
		divdata((i%10)+48);
		i=i/10;
	}
}
 1b8:	df 91       	pop	r29
 1ba:	cf 91       	pop	r28
 1bc:	08 95       	ret

000001be <clear>:
void clear(void)
{
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
     divcmd(0x01);
}
 1c6:	08 95       	ret

000001c8 <timer0_init>:
#include<util/delay.h>
#include<mars/lcdd.h>
#include<string.h>
#include<math.h>
void timer0_init()
{
 1c8:	8a e1       	ldi	r24, 0x1A	; 26
 1ca:	83 bf       	out	0x33, r24	; 51
	TCCR0=(1<<WGM01)|(1<<COM00)|(1<<CS01);
	DDRB|=(1<<PB3);
 1cc:	bb 9a       	sbi	0x17, 3	; 23
}
 1ce:	08 95       	ret

000001d0 <main>:
main()
{
 1d0:	cf 92       	push	r12
 1d2:	df 92       	push	r13
 1d4:	ef 92       	push	r14
 1d6:	ff 92       	push	r15
 1d8:	0f 93       	push	r16
 1da:	1f 93       	push	r17
 1dc:	df 93       	push	r29
 1de:	cf 93       	push	r28
 1e0:	cd b7       	in	r28, 0x3d	; 61
 1e2:	de b7       	in	r29, 0x3e	; 62
 1e4:	2e 97       	sbiw	r28, 0x0e	; 14
 1e6:	0f b6       	in	r0, 0x3f	; 63
 1e8:	f8 94       	cli
 1ea:	de bf       	out	0x3e, r29	; 62
 1ec:	0f be       	out	0x3f, r0	; 63
 1ee:	cd bf       	out	0x3d, r28	; 61
	DDRB=0xFF;
 1f0:	8f ef       	ldi	r24, 0xFF	; 255
 1f2:	87 bb       	out	0x17, r24	; 23
	DDRC=0xFF;
 1f4:	84 bb       	out	0x14, r24	; 20
	DDRA=0xFE;
 1f6:	8e ef       	ldi	r24, 0xFE	; 254
 1f8:	8a bb       	out	0x1a, r24	; 26
	lcdstr();
 1fa:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcdstr>
#include<mars/lcdd.h>
#include<string.h>
#include<math.h>
void timer0_init()
{
	TCCR0=(1<<WGM01)|(1<<COM00)|(1<<CS01);
 1fe:	8a e1       	ldi	r24, 0x1A	; 26
 200:	83 bf       	out	0x33, r24	; 51
	DDRB|=(1<<PB3);
 202:	bb 9a       	sbi	0x17, 3	; 23
	DDRB=0xFF;
	DDRC=0xFF;
	DDRA=0xFE;
	lcdstr();
	timer0_init();
	divcmd(0x01);
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
	int sa[]={240,270,300,320,360,405,450};
 20c:	de 01       	movw	r26, r28
 20e:	11 96       	adiw	r26, 0x01	; 1
 210:	e0 e6       	ldi	r30, 0x60	; 96
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	8e e0       	ldi	r24, 0x0E	; 14
 216:	01 90       	ld	r0, Z+
 218:	0d 92       	st	X+, r0
 21a:	81 50       	subi	r24, 0x01	; 1
 21c:	e1 f7       	brne	.-8      	; 0x216 <main+0x46>
 21e:	00 e0       	ldi	r16, 0x00	; 0
 220:	10 e0       	ldi	r17, 0x00	; 0
	while(1)
	{
		if(PINA==1)
		{
			while(PINA==1);
			OCR0=(F_CPU/(sa[i]*16))-1;
 222:	6e 01       	movw	r12, r28
 224:	08 94       	sec
 226:	c1 1c       	adc	r12, r1
 228:	d1 1c       	adc	r13, r1
 22a:	68 ec       	ldi	r22, 0xC8	; 200
 22c:	e6 2e       	mov	r14, r22
 22e:	f1 2c       	mov	r15, r1
	divcmd(0x01);
	int sa[]={240,270,300,320,360,405,450};
	int i=0;
	while(1)
	{
		if(PINA==1)
 230:	89 b3       	in	r24, 0x19	; 25
 232:	81 30       	cpi	r24, 0x01	; 1
 234:	59 f5       	brne	.+86     	; 0x28c <main+0xbc>
		{
			while(PINA==1);
 236:	89 b3       	in	r24, 0x19	; 25
 238:	81 30       	cpi	r24, 0x01	; 1
 23a:	e9 f3       	breq	.-6      	; 0x236 <main+0x66>
			OCR0=(F_CPU/(sa[i]*16))-1;
 23c:	f8 01       	movw	r30, r16
 23e:	ee 0f       	add	r30, r30
 240:	ff 1f       	adc	r31, r31
 242:	ec 0d       	add	r30, r12
 244:	fd 1d       	adc	r31, r13
 246:	20 81       	ld	r18, Z
 248:	31 81       	ldd	r19, Z+1	; 0x01
 24a:	44 e0       	ldi	r20, 0x04	; 4
 24c:	22 0f       	add	r18, r18
 24e:	33 1f       	adc	r19, r19
 250:	4a 95       	dec	r20
 252:	e1 f7       	brne	.-8      	; 0x24c <main+0x7c>
 254:	44 27       	eor	r20, r20
 256:	37 fd       	sbrc	r19, 7
 258:	40 95       	com	r20
 25a:	54 2f       	mov	r21, r20
 25c:	60 e0       	ldi	r22, 0x00	; 0
 25e:	72 e1       	ldi	r23, 0x12	; 18
 260:	8a e7       	ldi	r24, 0x7A	; 122
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <__udivmodsi4>
 268:	21 50       	subi	r18, 0x01	; 1
 26a:	2c bf       	out	0x3c, r18	; 60
			disp_number(OCR0,0x8f);
 26c:	8c b7       	in	r24, 0x3c	; 60
 26e:	6f e8       	ldi	r22, 0x8F	; 143
 270:	70 e0       	ldi	r23, 0x00	; 0
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	0e 94 b9 00 	call	0x172	; 0x172 <disp_number>
 278:	88 ee       	ldi	r24, 0xE8	; 232
 27a:	93 e0       	ldi	r25, 0x03	; 3
 27c:	f7 01       	movw	r30, r14
 27e:	31 97       	sbiw	r30, 0x01	; 1
 280:	f1 f7       	brne	.-4      	; 0x27e <main+0xae>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 282:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 284:	d9 f7       	brne	.-10     	; 0x27c <main+0xac>
			_delay_ms(100);
				i++;
 286:	0f 5f       	subi	r16, 0xFF	; 255
 288:	1f 4f       	sbci	r17, 0xFF	; 255
 28a:	d2 cf       	rjmp	.-92     	; 0x230 <main+0x60>
		}
		else
			OCR0=0;
 28c:	1c be       	out	0x3c, r1	; 60
 28e:	d0 cf       	rjmp	.-96     	; 0x230 <main+0x60>

00000290 <__udivmodhi4>:
 290:	aa 1b       	sub	r26, r26
 292:	bb 1b       	sub	r27, r27
 294:	51 e1       	ldi	r21, 0x11	; 17
 296:	07 c0       	rjmp	.+14     	; 0x2a6 <__udivmodhi4_ep>

00000298 <__udivmodhi4_loop>:
 298:	aa 1f       	adc	r26, r26
 29a:	bb 1f       	adc	r27, r27
 29c:	a6 17       	cp	r26, r22
 29e:	b7 07       	cpc	r27, r23
 2a0:	10 f0       	brcs	.+4      	; 0x2a6 <__udivmodhi4_ep>
 2a2:	a6 1b       	sub	r26, r22
 2a4:	b7 0b       	sbc	r27, r23

000002a6 <__udivmodhi4_ep>:
 2a6:	88 1f       	adc	r24, r24
 2a8:	99 1f       	adc	r25, r25
 2aa:	5a 95       	dec	r21
 2ac:	a9 f7       	brne	.-22     	; 0x298 <__udivmodhi4_loop>
 2ae:	80 95       	com	r24
 2b0:	90 95       	com	r25
 2b2:	bc 01       	movw	r22, r24
 2b4:	cd 01       	movw	r24, r26
 2b6:	08 95       	ret

000002b8 <__udivmodsi4>:
 2b8:	a1 e2       	ldi	r26, 0x21	; 33
 2ba:	1a 2e       	mov	r1, r26
 2bc:	aa 1b       	sub	r26, r26
 2be:	bb 1b       	sub	r27, r27
 2c0:	fd 01       	movw	r30, r26
 2c2:	0d c0       	rjmp	.+26     	; 0x2de <__udivmodsi4_ep>

000002c4 <__udivmodsi4_loop>:
 2c4:	aa 1f       	adc	r26, r26
 2c6:	bb 1f       	adc	r27, r27
 2c8:	ee 1f       	adc	r30, r30
 2ca:	ff 1f       	adc	r31, r31
 2cc:	a2 17       	cp	r26, r18
 2ce:	b3 07       	cpc	r27, r19
 2d0:	e4 07       	cpc	r30, r20
 2d2:	f5 07       	cpc	r31, r21
 2d4:	20 f0       	brcs	.+8      	; 0x2de <__udivmodsi4_ep>
 2d6:	a2 1b       	sub	r26, r18
 2d8:	b3 0b       	sbc	r27, r19
 2da:	e4 0b       	sbc	r30, r20
 2dc:	f5 0b       	sbc	r31, r21

000002de <__udivmodsi4_ep>:
 2de:	66 1f       	adc	r22, r22
 2e0:	77 1f       	adc	r23, r23
 2e2:	88 1f       	adc	r24, r24
 2e4:	99 1f       	adc	r25, r25
 2e6:	1a 94       	dec	r1
 2e8:	69 f7       	brne	.-38     	; 0x2c4 <__udivmodsi4_loop>
 2ea:	60 95       	com	r22
 2ec:	70 95       	com	r23
 2ee:	80 95       	com	r24
 2f0:	90 95       	com	r25
 2f2:	9b 01       	movw	r18, r22
 2f4:	ac 01       	movw	r20, r24
 2f6:	bd 01       	movw	r22, r26
 2f8:	cf 01       	movw	r24, r30
 2fa:	08 95       	ret

000002fc <_exit>:
 2fc:	f8 94       	cli

000002fe <__stop_program>:
 2fe:	ff cf       	rjmp	.-2      	; 0x2fe <__stop_program>
