
Motors_Con_using_KP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000024c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  0000024c  000002c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  000002e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000066  00000000  00000000  00000302  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000030a  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000108  00000000  00000000  00000672  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000037e  00000000  00000000  0000077a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000080  00000000  00000000  00000af8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000128  00000000  00000000  00000b78  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000128  00000000  00000000  00000ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e4       	ldi	r30, 0x4C	; 76
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 38       	cpi	r26, 0x82	; 130
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 e8       	ldi	r26, 0x82	; 130
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 38       	cpi	r26, 0x82	; 130
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b9 00 	call	0x172	; 0x172 <main>
  8a:	0c 94 24 01 	jmp	0x248	; 0x248 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <sendcmd>:
	senddata(b&0xF0);//First 4 bits
	senddata((b<<4)&0xF0);//Next 4
	_delay_ms(1);
}
void sendcmd(int c)
{
  92:	82 bb       	out	0x12, r24	; 18
	PORTD=c;
	PORTD+=4;
  94:	82 b3       	in	r24, 0x12	; 18
  96:	8c 5f       	subi	r24, 0xFC	; 252
  98:	82 bb       	out	0x12, r24	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9a:	8a ef       	ldi	r24, 0xFA	; 250
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <sendcmd+0xc>
	_delay_ms(1);
	PORTD-=4;
  a2:	82 b3       	in	r24, 0x12	; 18
  a4:	84 50       	subi	r24, 0x04	; 4
  a6:	82 bb       	out	0x12, r24	; 18
}
  a8:	08 95       	ret

000000aa <divcmd>:
	divcmd(0x28);//4 bit mode
	divcmd(0x06);//Increment Mode
	divcmd(0x0c);//Display on cursor off
}
void divcmd(int b)
{
  aa:	0f 93       	push	r16
  ac:	1f 93       	push	r17
  ae:	8c 01       	movw	r16, r24
	sendcmd(b&0xF0);//First 4 bits
  b0:	80 7f       	andi	r24, 0xF0	; 240
  b2:	90 70       	andi	r25, 0x00	; 0
  b4:	0e 94 49 00 	call	0x92	; 0x92 <sendcmd>
	sendcmd((b<<4)&0xF0);//Next 4
  b8:	84 e0       	ldi	r24, 0x04	; 4
  ba:	00 0f       	add	r16, r16
  bc:	11 1f       	adc	r17, r17
  be:	8a 95       	dec	r24
  c0:	e1 f7       	brne	.-8      	; 0xba <divcmd+0x10>
  c2:	c8 01       	movw	r24, r16
  c4:	90 70       	andi	r25, 0x00	; 0
  c6:	0e 94 49 00 	call	0x92	; 0x92 <sendcmd>
  ca:	8a ef       	ldi	r24, 0xFA	; 250
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <divcmd+0x24>
	_delay_ms(1);
}
  d2:	1f 91       	pop	r17
  d4:	0f 91       	pop	r16
  d6:	08 95       	ret

000000d8 <lcdstr>:
void lcdstr(void)
{
  d8:	82 e0       	ldi	r24, 0x02	; 2
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
	divcmd(0x02);//Home position Initialization with dividing function
	divcmd(0x28);//4 bit mode
  e0:	88 e2       	ldi	r24, 0x28	; 40
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
	divcmd(0x06);//Increment Mode
  e8:	86 e0       	ldi	r24, 0x06	; 6
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
	divcmd(0x0c);//Display on cursor off
  f0:	8c e0       	ldi	r24, 0x0C	; 12
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
}
  f8:	08 95       	ret

000000fa <senddata>:
	PORTD+=4;
	_delay_ms(1);
	PORTD-=4;
}
void senddata(int c)
{
  fa:	82 bb       	out	0x12, r24	; 18
	PORTD=c;
	PORTD+=5;
  fc:	82 b3       	in	r24, 0x12	; 18
  fe:	8b 5f       	subi	r24, 0xFB	; 251
 100:	82 bb       	out	0x12, r24	; 18
 102:	8a ef       	ldi	r24, 0xFA	; 250
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <senddata+0xc>
	_delay_ms(1);
	PORTD-=4;
 10a:	82 b3       	in	r24, 0x12	; 18
 10c:	84 50       	subi	r24, 0x04	; 4
 10e:	82 bb       	out	0x12, r24	; 18
}
 110:	08 95       	ret

00000112 <divdata>:
	sendcmd(b&0xF0);//First 4 bits
	sendcmd((b<<4)&0xF0);//Next 4
	_delay_ms(1);
}
void divdata(int b)
{
 112:	0f 93       	push	r16
 114:	1f 93       	push	r17
 116:	8c 01       	movw	r16, r24
	senddata(b&0xF0);//First 4 bits
 118:	80 7f       	andi	r24, 0xF0	; 240
 11a:	90 70       	andi	r25, 0x00	; 0
 11c:	0e 94 7d 00 	call	0xfa	; 0xfa <senddata>
	senddata((b<<4)&0xF0);//Next 4
 120:	94 e0       	ldi	r25, 0x04	; 4
 122:	00 0f       	add	r16, r16
 124:	11 1f       	adc	r17, r17
 126:	9a 95       	dec	r25
 128:	e1 f7       	brne	.-8      	; 0x122 <divdata+0x10>
 12a:	c8 01       	movw	r24, r16
 12c:	90 70       	andi	r25, 0x00	; 0
 12e:	0e 94 7d 00 	call	0xfa	; 0xfa <senddata>
 132:	8a ef       	ldi	r24, 0xFA	; 250
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <divdata+0x24>
	_delay_ms(1);
}
 13a:	1f 91       	pop	r17
 13c:	0f 91       	pop	r16
 13e:	08 95       	ret

00000140 <disp_string>:
	_delay_ms(1);
	PORTD-=4;
}

void disp_string(char *str, int pos)
{
 140:	0f 93       	push	r16
 142:	1f 93       	push	r17
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
 148:	18 2f       	mov	r17, r24
 14a:	09 2f       	mov	r16, r25
 14c:	cb 01       	movw	r24, r22
	int i=0;
	divcmd(pos);
 14e:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
 152:	21 2f       	mov	r18, r17
 154:	30 2f       	mov	r19, r16
 156:	c9 01       	movw	r24, r18
 158:	ec 01       	movw	r28, r24
 15a:	03 c0       	rjmp	.+6      	; 0x162 <disp_string+0x22>
	while(str[i]!='\0')
	{
		divdata(str[i]);
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	0e 94 89 00 	call	0x112	; 0x112 <divdata>

void disp_string(char *str, int pos)
{
	int i=0;
	divcmd(pos);
	while(str[i]!='\0')
 162:	89 91       	ld	r24, Y+
 164:	88 23       	and	r24, r24
 166:	d1 f7       	brne	.-12     	; 0x15c <disp_string+0x1c>
	{
		divdata(str[i]);
		i++;
	}

}
 168:	df 91       	pop	r29
 16a:	cf 91       	pop	r28
 16c:	1f 91       	pop	r17
 16e:	0f 91       	pop	r16
 170:	08 95       	ret

00000172 <main>:
#include<avr/io.h>
#include<util/delay.h>
#include<string.h>
#include<mars/lcd.h>
main()
{
 172:	ef 92       	push	r14
 174:	ff 92       	push	r15
 176:	0f 93       	push	r16
 178:	1f 93       	push	r17
 17a:	cf 93       	push	r28
 17c:	df 93       	push	r29
	DDRB=0xFF;
 17e:	8f ef       	ldi	r24, 0xFF	; 255
 180:	87 bb       	out	0x17, r24	; 23
	DDRD=0xFF;
 182:	81 bb       	out	0x11, r24	; 17
	DDRA=0xF0;
 184:	90 ef       	ldi	r25, 0xF0	; 240
 186:	9a bb       	out	0x1a, r25	; 26
	PORTA=0x0F;
 188:	8f e0       	ldi	r24, 0x0F	; 15
 18a:	8b bb       	out	0x1b, r24	; 27
	PORTD=0x0E;
 18c:	8e e0       	ldi	r24, 0x0E	; 14
 18e:	82 bb       	out	0x12, r24	; 18
	DDRC=0xF0;
 190:	94 bb       	out	0x14, r25	; 20
	PORTC=0xE0;
 192:	80 ee       	ldi	r24, 0xE0	; 224
 194:	85 bb       	out	0x15, r24	; 21
	lcdstr();
 196:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcdstr>
	divcmd(0x01);
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
	{
		if(PINA==0x0E)
		{
			divcmd(0x01);
			disp_string("Left",0x83);
			PORTB=1;
 1a2:	ee 24       	eor	r14, r14
 1a4:	e3 94       	inc	r14
 1a6:	c4 ec       	ldi	r28, 0xC4	; 196
 1a8:	d9 e0       	ldi	r29, 0x09	; 9
		}
		else if(PINA==7)
		{
			divcmd(0x01);
			disp_string("Right",0x83);
			PORTB=4;
 1aa:	24 e0       	ldi	r18, 0x04	; 4
 1ac:	f2 2e       	mov	r15, r18
		}
		else if(PINA==11)
		{
			divcmd(0x01);
			disp_string("Backward",0x83);
			PORTB=5;
 1ae:	05 e0       	ldi	r16, 0x05	; 5
		}
		else if(PINA==0x0D)
		{
			divcmd(0x01);
			disp_string("Forward",0x83);
			PORTB=10;
 1b0:	1a e0       	ldi	r17, 0x0A	; 10
	PORTC=0xE0;
	lcdstr();
	divcmd(0x01);
	while(1)
	{
		if(PINA==0x0E)
 1b2:	89 b3       	in	r24, 0x19	; 25
 1b4:	8e 30       	cpi	r24, 0x0E	; 14
 1b6:	61 f4       	brne	.+24     	; 0x1d0 <main+0x5e>
		{
			divcmd(0x01);
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
			disp_string("Left",0x83);
 1c0:	63 e8       	ldi	r22, 0x83	; 131
 1c2:	70 e0       	ldi	r23, 0x00	; 0
 1c4:	80 e6       	ldi	r24, 0x60	; 96
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	0e 94 a0 00 	call	0x140	; 0x140 <disp_string>
			PORTB=1;
 1cc:	e8 ba       	out	0x18, r14	; 24
 1ce:	38 c0       	rjmp	.+112    	; 0x240 <main+0xce>
			_delay_ms(10);
		}
		else if(PINA==0x0D)
 1d0:	89 b3       	in	r24, 0x19	; 25
 1d2:	8d 30       	cpi	r24, 0x0D	; 13
 1d4:	61 f4       	brne	.+24     	; 0x1ee <main+0x7c>
		{
			divcmd(0x01);
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
			disp_string("Forward",0x83);
 1de:	63 e8       	ldi	r22, 0x83	; 131
 1e0:	70 e0       	ldi	r23, 0x00	; 0
 1e2:	85 e6       	ldi	r24, 0x65	; 101
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	0e 94 a0 00 	call	0x140	; 0x140 <disp_string>
			PORTB=10;
 1ea:	18 bb       	out	0x18, r17	; 24
 1ec:	29 c0       	rjmp	.+82     	; 0x240 <main+0xce>
			_delay_ms(10);
			
		}
		else if(PINA==11)
 1ee:	89 b3       	in	r24, 0x19	; 25
 1f0:	8b 30       	cpi	r24, 0x0B	; 11
 1f2:	61 f4       	brne	.+24     	; 0x20c <main+0x9a>
		{
			divcmd(0x01);
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
			disp_string("Backward",0x83);
 1fc:	63 e8       	ldi	r22, 0x83	; 131
 1fe:	70 e0       	ldi	r23, 0x00	; 0
 200:	8d e6       	ldi	r24, 0x6D	; 109
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	0e 94 a0 00 	call	0x140	; 0x140 <disp_string>
			PORTB=5;
 208:	08 bb       	out	0x18, r16	; 24
 20a:	1a c0       	rjmp	.+52     	; 0x240 <main+0xce>
			_delay_ms(10);
		}
		else if(PINA==7)
 20c:	89 b3       	in	r24, 0x19	; 25
 20e:	87 30       	cpi	r24, 0x07	; 7
 210:	61 f4       	brne	.+24     	; 0x22a <main+0xb8>
		{
			divcmd(0x01);
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
			disp_string("Right",0x83);
 21a:	63 e8       	ldi	r22, 0x83	; 131
 21c:	70 e0       	ldi	r23, 0x00	; 0
 21e:	86 e7       	ldi	r24, 0x76	; 118
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	0e 94 a0 00 	call	0x140	; 0x140 <disp_string>
			PORTB=4;
 226:	f8 ba       	out	0x18, r15	; 24
 228:	0b c0       	rjmp	.+22     	; 0x240 <main+0xce>
			_delay_ms(10);
		}
		else
		{
			divcmd(0x01);
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	0e 94 55 00 	call	0xaa	; 0xaa <divcmd>
			disp_string("Stop",0x83);
 232:	63 e8       	ldi	r22, 0x83	; 131
 234:	70 e0       	ldi	r23, 0x00	; 0
 236:	8c e7       	ldi	r24, 0x7C	; 124
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	0e 94 a0 00 	call	0x140	; 0x140 <disp_string>
			PORTB=0;
 23e:	18 ba       	out	0x18, r1	; 24
 240:	ce 01       	movw	r24, r28
 242:	01 97       	sbiw	r24, 0x01	; 1
 244:	f1 f7       	brne	.-4      	; 0x242 <main+0xd0>
 246:	b5 cf       	rjmp	.-150    	; 0x1b2 <main+0x40>

00000248 <_exit>:
 248:	f8 94       	cli

0000024a <__stop_program>:
 24a:	ff cf       	rjmp	.-2      	; 0x24a <__stop_program>
