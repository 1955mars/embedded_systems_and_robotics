
Moving_ball.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000270  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000061  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000484  00000000  00000000  00000345  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000016f  00000000  00000000  000007c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000380  00000000  00000000  00000938  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000080  00000000  00000000  00000cb8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000010f  00000000  00000000  00000d38  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000001a0  00000000  00000000  00000e47  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00000fe7  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e7       	ldi	r30, 0x70	; 112
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <main>
  8a:	0c 94 36 01 	jmp	0x26c	; 0x26c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <divcmd4>:
	divcmd4(0x28);//4 bit mode
	divcmd4(0x06);//Decrement Mode
	divcmd4(0x0c);//Display on cursor off
}
void divcmd4(int b)
{
  92:	9c 01       	movw	r18, r24
  94:	20 7f       	andi	r18, 0xF0	; 240
  96:	30 70       	andi	r19, 0x00	; 0
  98:	22 bb       	out	0x12, r18	; 18
	_delay_ms(1);
}
void sendcmd(int c)
{
	PORTD=c;
	PORTD+=4;
  9a:	22 b3       	in	r18, 0x12	; 18
  9c:	2c 5f       	subi	r18, 0xFC	; 252
  9e:	22 bb       	out	0x12, r18	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  a0:	40 ed       	ldi	r20, 0xD0	; 208
  a2:	57 e0       	ldi	r21, 0x07	; 7
  a4:	fa 01       	movw	r30, r20
  a6:	31 97       	sbiw	r30, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <divcmd4+0x14>
	_delay_ms(1);
	PORTD-=4;
  aa:	22 b3       	in	r18, 0x12	; 18
  ac:	24 50       	subi	r18, 0x04	; 4
  ae:	22 bb       	out	0x12, r18	; 18
	senddata((b<<4)&0xF0);//Next 4
	_delay_ms(1);
}
void sendcmd(int c)
{
	PORTD=c;
  b0:	24 e0       	ldi	r18, 0x04	; 4
  b2:	88 0f       	add	r24, r24
  b4:	99 1f       	adc	r25, r25
  b6:	2a 95       	dec	r18
  b8:	e1 f7       	brne	.-8      	; 0xb2 <divcmd4+0x20>
  ba:	90 70       	andi	r25, 0x00	; 0
  bc:	82 bb       	out	0x12, r24	; 18
	PORTD+=4;
  be:	82 b3       	in	r24, 0x12	; 18
  c0:	8c 5f       	subi	r24, 0xFC	; 252
  c2:	82 bb       	out	0x12, r24	; 18
  c4:	ca 01       	movw	r24, r20
  c6:	01 97       	sbiw	r24, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <divcmd4+0x34>
	_delay_ms(1);
	PORTD-=4;
  ca:	82 b3       	in	r24, 0x12	; 18
  cc:	84 50       	subi	r24, 0x04	; 4
  ce:	82 bb       	out	0x12, r24	; 18
  d0:	ca 01       	movw	r24, r20
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <divcmd4+0x40>
void divcmd4(int b)
{
	sendcmd(b&0xF0);//First 4 bits
	sendcmd((b<<4)&0xF0);//Next 4
	_delay_ms(1);
}
  d6:	08 95       	ret

000000d8 <lcdstr>:
	divdata4(0x1f);
	divdata4(0x0e);
	divdata4(0x00);
}
void lcdstr(void)
{
  d8:	82 e0       	ldi	r24, 0x02	; 2
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 49 00 	call	0x92	; 0x92 <divcmd4>
	divcmd4(0x02);//Home position Initialization with dividing function
	divcmd4(0x28);//4 bit mode
  e0:	88 e2       	ldi	r24, 0x28	; 40
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 49 00 	call	0x92	; 0x92 <divcmd4>
	divcmd4(0x06);//Decrement Mode
  e8:	86 e0       	ldi	r24, 0x06	; 6
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 49 00 	call	0x92	; 0x92 <divcmd4>
	divcmd4(0x0c);//Display on cursor off
  f0:	8c e0       	ldi	r24, 0x0C	; 12
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0e 94 49 00 	call	0x92	; 0x92 <divcmd4>
}
  f8:	08 95       	ret

000000fa <divdata4>:
	sendcmd(b&0xF0);//First 4 bits
	sendcmd((b<<4)&0xF0);//Next 4
	_delay_ms(1);
}
void divdata4(int b)
{
  fa:	9c 01       	movw	r18, r24
  fc:	20 7f       	andi	r18, 0xF0	; 240
  fe:	30 70       	andi	r19, 0x00	; 0
 100:	22 bb       	out	0x12, r18	; 18
	PORTD-=4;
}
void senddata(int c)
{
	PORTD=c;
	PORTD+=5;
 102:	22 b3       	in	r18, 0x12	; 18
 104:	2b 5f       	subi	r18, 0xFB	; 251
 106:	22 bb       	out	0x12, r18	; 18
 108:	40 ed       	ldi	r20, 0xD0	; 208
 10a:	57 e0       	ldi	r21, 0x07	; 7
 10c:	fa 01       	movw	r30, r20
 10e:	31 97       	sbiw	r30, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <divdata4+0x14>
	_delay_ms(1);
	PORTD-=4;
 112:	22 b3       	in	r18, 0x12	; 18
 114:	24 50       	subi	r18, 0x04	; 4
 116:	22 bb       	out	0x12, r18	; 18
	_delay_ms(1);
	PORTD-=4;
}
void senddata(int c)
{
	PORTD=c;
 118:	34 e0       	ldi	r19, 0x04	; 4
 11a:	88 0f       	add	r24, r24
 11c:	99 1f       	adc	r25, r25
 11e:	3a 95       	dec	r19
 120:	e1 f7       	brne	.-8      	; 0x11a <divdata4+0x20>
 122:	90 70       	andi	r25, 0x00	; 0
 124:	82 bb       	out	0x12, r24	; 18
	PORTD+=5;
 126:	82 b3       	in	r24, 0x12	; 18
 128:	8b 5f       	subi	r24, 0xFB	; 251
 12a:	82 bb       	out	0x12, r24	; 18
 12c:	ca 01       	movw	r24, r20
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <divdata4+0x34>
	_delay_ms(1);
	PORTD-=4;
 132:	82 b3       	in	r24, 0x12	; 18
 134:	84 50       	subi	r24, 0x04	; 4
 136:	82 bb       	out	0x12, r24	; 18
 138:	ca 01       	movw	r24, r20
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <divdata4+0x40>
void divdata4(int b)
{
	senddata(b&0xF0);//First 4 bits
	senddata((b<<4)&0xF0);//Next 4
	_delay_ms(1);
}
 13e:	08 95       	ret

00000140 <ball>:
void divcmd4(int);
void sendcmd(int);
void senddata(int);
void divdata4(int);
void ball(void)
{
 140:	80 e4       	ldi	r24, 0x40	; 64
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	0e 94 49 00 	call	0x92	; 0x92 <divcmd4>
	divcmd4(0x40);
	divdata4(0x00);
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	0e 94 7d 00 	call	0xfa	; 0xfa <divdata4>
	divdata4(0x0E);
 150:	8e e0       	ldi	r24, 0x0E	; 14
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0e 94 7d 00 	call	0xfa	; 0xfa <divdata4>
	divdata4(0x1f);
 158:	8f e1       	ldi	r24, 0x1F	; 31
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	0e 94 7d 00 	call	0xfa	; 0xfa <divdata4>
	divdata4(0x1f);
 160:	8f e1       	ldi	r24, 0x1F	; 31
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	0e 94 7d 00 	call	0xfa	; 0xfa <divdata4>
	divdata4(0x1f);
 168:	8f e1       	ldi	r24, 0x1F	; 31
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	0e 94 7d 00 	call	0xfa	; 0xfa <divdata4>
	divdata4(0x0e);
 170:	8e e0       	ldi	r24, 0x0E	; 14
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	0e 94 7d 00 	call	0xfa	; 0xfa <divdata4>
	divdata4(0x00);
 178:	80 e0       	ldi	r24, 0x00	; 0
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	0e 94 7d 00 	call	0xfa	; 0xfa <divdata4>
}
 180:	08 95       	ret

00000182 <sendcmd>:
	senddata(b&0xF0);//First 4 bits
	senddata((b<<4)&0xF0);//Next 4
	_delay_ms(1);
}
void sendcmd(int c)
{
 182:	82 bb       	out	0x12, r24	; 18
	PORTD=c;
	PORTD+=4;
 184:	82 b3       	in	r24, 0x12	; 18
 186:	8c 5f       	subi	r24, 0xFC	; 252
 188:	82 bb       	out	0x12, r24	; 18
 18a:	80 ed       	ldi	r24, 0xD0	; 208
 18c:	97 e0       	ldi	r25, 0x07	; 7
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <sendcmd+0xc>
	_delay_ms(1);
	PORTD-=4;
 192:	82 b3       	in	r24, 0x12	; 18
 194:	84 50       	subi	r24, 0x04	; 4
 196:	82 bb       	out	0x12, r24	; 18
}
 198:	08 95       	ret

0000019a <senddata>:
void senddata(int c)
{
 19a:	82 bb       	out	0x12, r24	; 18
	PORTD=c;
	PORTD+=5;
 19c:	82 b3       	in	r24, 0x12	; 18
 19e:	8b 5f       	subi	r24, 0xFB	; 251
 1a0:	82 bb       	out	0x12, r24	; 18
 1a2:	80 ed       	ldi	r24, 0xD0	; 208
 1a4:	97 e0       	ldi	r25, 0x07	; 7
 1a6:	01 97       	sbiw	r24, 0x01	; 1
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <senddata+0xc>
	_delay_ms(1);
	PORTD-=4;
 1aa:	82 b3       	in	r24, 0x12	; 18
 1ac:	84 50       	subi	r24, 0x04	; 4
 1ae:	82 bb       	out	0x12, r24	; 18
}
 1b0:	08 95       	ret

000001b2 <main>:


main()
{
 1b2:	af 92       	push	r10
 1b4:	bf 92       	push	r11
 1b6:	cf 92       	push	r12
 1b8:	df 92       	push	r13
 1ba:	ef 92       	push	r14
 1bc:	ff 92       	push	r15
 1be:	0f 93       	push	r16
 1c0:	1f 93       	push	r17
 1c2:	cf 93       	push	r28
 1c4:	df 93       	push	r29
	DDRD=0xFF;
 1c6:	8f ef       	ldi	r24, 0xFF	; 255
 1c8:	81 bb       	out	0x11, r24	; 17
	lcdstr();
 1ca:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcdstr>
	ball();
 1ce:	0e 94 a0 00 	call	0x140	; 0x140 <ball>
	divcmd4(0x01);
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	0e 94 49 00 	call	0x92	; 0x92 <divcmd4>
 1da:	c0 e0       	ldi	r28, 0x00	; 0
 1dc:	d0 e0       	ldi	r29, 0x00	; 0
 1de:	ee 24       	eor	r14, r14
 1e0:	ff 24       	eor	r15, r15
 1e2:	00 e0       	ldi	r16, 0x00	; 0
 1e4:	10 e0       	ldi	r17, 0x00	; 0
 1e6:	58 ec       	ldi	r21, 0xC8	; 200
 1e8:	c5 2e       	mov	r12, r21
 1ea:	d1 2c       	mov	r13, r1
				j++;
			}
			else
			{
				divcmd4(0x01);
				divcmd4(0xcF-k);
 1ec:	4f ec       	ldi	r20, 0xCF	; 207
 1ee:	a4 2e       	mov	r10, r20
 1f0:	b1 2c       	mov	r11, r1
 1f2:	32 c0       	rjmp	.+100    	; 0x258 <main+0xa6>
	while(1)
	{
		int i,j=0,k=0;
		for(i=0;i<32;i++)
		{
			if(i<16)
 1f4:	c0 31       	cpi	r28, 0x10	; 16
 1f6:	d1 05       	cpc	r29, r1
 1f8:	c4 f4       	brge	.+48     	; 0x22a <main+0x78>
			{
				divcmd4(0x01);
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	0e 94 49 00 	call	0x92	; 0x92 <divcmd4>
				divcmd4(0x80+j);
 202:	c7 01       	movw	r24, r14
 204:	80 58       	subi	r24, 0x80	; 128
 206:	9f 4f       	sbci	r25, 0xFF	; 255
 208:	0e 94 49 00 	call	0x92	; 0x92 <divcmd4>
				divdata4(0);
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	0e 94 7d 00 	call	0xfa	; 0xfa <divdata4>
 214:	88 eb       	ldi	r24, 0xB8	; 184
 216:	9b e0       	ldi	r25, 0x0B	; 11
 218:	f6 01       	movw	r30, r12
 21a:	31 97       	sbiw	r30, 0x01	; 1
 21c:	f1 f7       	brne	.-4      	; 0x21a <main+0x68>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 21e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 220:	d9 f7       	brne	.-10     	; 0x218 <main+0x66>
				_delay_ms(300);
				j++;
 222:	08 94       	sec
 224:	e1 1c       	adc	r14, r1
 226:	f1 1c       	adc	r15, r1
 228:	16 c0       	rjmp	.+44     	; 0x256 <main+0xa4>
			}
			else
			{
				divcmd4(0x01);
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	0e 94 49 00 	call	0x92	; 0x92 <divcmd4>
				divcmd4(0xcF-k);
 232:	c5 01       	movw	r24, r10
 234:	80 1b       	sub	r24, r16
 236:	91 0b       	sbc	r25, r17
 238:	0e 94 49 00 	call	0x92	; 0x92 <divcmd4>
				divdata4(0);
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	0e 94 7d 00 	call	0xfa	; 0xfa <divdata4>
 244:	88 eb       	ldi	r24, 0xB8	; 184
 246:	9b e0       	ldi	r25, 0x0B	; 11
 248:	f6 01       	movw	r30, r12
 24a:	31 97       	sbiw	r30, 0x01	; 1
 24c:	f1 f7       	brne	.-4      	; 0x24a <main+0x98>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 24e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 250:	d9 f7       	brne	.-10     	; 0x248 <main+0x96>
				_delay_ms(300);
				k++;
 252:	0f 5f       	subi	r16, 0xFF	; 255
 254:	1f 4f       	sbci	r17, 0xFF	; 255
	ball();
	divcmd4(0x01);
	while(1)
	{
		int i,j=0,k=0;
		for(i=0;i<32;i++)
 256:	21 96       	adiw	r28, 0x01	; 1
 258:	c0 32       	cpi	r28, 0x20	; 32
 25a:	d1 05       	cpc	r29, r1
 25c:	5c f2       	brlt	.-106    	; 0x1f4 <main+0x42>
 25e:	c0 e0       	ldi	r28, 0x00	; 0
 260:	d0 e0       	ldi	r29, 0x00	; 0
 262:	ee 24       	eor	r14, r14
 264:	ff 24       	eor	r15, r15
 266:	00 e0       	ldi	r16, 0x00	; 0
 268:	10 e0       	ldi	r17, 0x00	; 0
 26a:	c7 cf       	rjmp	.-114    	; 0x1fa <main+0x48>

0000026c <_exit>:
 26c:	f8 94       	cli

0000026e <__stop_program>:
 26e:	ff cf       	rjmp	.-2      	; 0x26e <__stop_program>
